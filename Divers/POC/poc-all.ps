%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 (MiKTeX21.12.10)  Copyright 2021 Radical Eye Software
%%Title: poc-all.dvi
%%CreationDate: Mon Mar 20 20:10:50 2023
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman12-Bold LMRoman10-Regular LMMathItalic10-Regular
%%+ LMRoman8-Regular LMMathSymbols10-Regular LMRoman6-Regular
%%+ LMSans10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o poc-all.ps poc-all.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2023.03.20:2110
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 407 2022-01-12 17:06:33Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.41, 2021/11/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
revision 952 gt 
{
    systemdict /.setopacityalpha known not 
      { 
         (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
         /.setopacityalpha { pop } bind def 
         /.setshapealpha { pop } bind def 
         /.setfillconstantalpha { pop } bind def 
         /.setstrokeconstantalpha { pop } bind def 
      }
      {
        /.setopacityalpha /.setfillconstantalpha load def 
%        /.setblendmode { pop } def   %% works again    hv 20210825
        /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def  
      } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse
%
%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 
%
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/fill@Dict 30 dict def				% the fill dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  10 dict begin
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
  end
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  40 dict begin
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
    { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
  end % userdict
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  50 dict begin
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
  end % userdict
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/ArrowT { % like tikz
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
  w 2 mul /w exch def
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
%  w neg Inset neg rlineto % move to x=0 and inset
%  CLW SLW
%  1 0 0 setrgbcolor
  2 setlinejoin
  stroke
  0 0 moveto
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
%  5 dict begin
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
%  end
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { %  on  stack \psk@dimen
  CLW mul /a ED % save radius
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid {
  40 dict begin 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
  end
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /RotAngle ED 
  RotAngle Rot /RAngle [ RAngle dup RotAngle add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 249 2021-09-14 10:22:55Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
  4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
  end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  1 dict begin
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
  end
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 601 2022-09-08 19:21:27Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2021/10/01
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
12 dict dup begin
/FontType 1 def
/FontName /PSTricksDotFont def
/FontInfo 9 dict dup begin
/version (001.000) def
/Notice (Timothy Van Zandt <tvz@Princeton.EDU>

This program can be redistributed and/or modified under the terms
of the LaTeX Project Public License Distributed from CTAN archives
in directory macros/latex/base/lppl.txt.

Modified by Etienne Riga  - Dec. 16, 1999
Modified by Etienne Riga  - 2005/01/01 (er) to add /Diamond, /SolidDiamond and /BoldDiamond
Modified by Herbert Voss (hv) - 2008/04/17 
Converted to OpenType by Marcel Krueger 2021
) def
/FullName (PSTricks Dots) def
/FamilyName (PSTricksDotFont) def
/Weight (Regular) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 65 /BoldAdd put
dup 67 /BoldCircle put	% 67
dup 68 /BoldDiamond put
dup 69 /SolidOtimes put
dup 70 /BoldOctogon put
dup 71 /SolidHexagon put
dup 72 /BoldHexagon put
dup 73 /BoldBar put
dup 74 /SolidAsterisk put
dup 75 /BoldAsterisk put
dup 77 /BOplus put
dup 78 /BOtimes put
dup 80 /BoldPentagon put
dup 83 /BoldSquare put
dup 84 /BoldTriangle put
dup 88 /BoldMul put
dup 97 /Add put
dup 98 /Bullet put
dup 99 /Circle put
dup 100 /Diamond put
dup 101 /SolidOplus put
dup 102 /Octogon put
dup 103 /SolidOctogon put
dup 104 /Hexagon put
dup 105 /Bar put
dup 107 /Asterisk put
dup 108 /SolidDiamond put
dup 109 /Oplus put
dup 110 /Otimes put
dup 112 /Pentagon put
dup 113 /SolidPentagon put
dup 114 /SolidSquare put
dup 115 /Square put
dup 116 /Triangle put
dup 117 /SolidTriangle put
dup 120 /Mul put
readonly def
/FontBBox {-572 -743 572 743} def
end
currentfile eexec BAB431EA06BB0A1031E1AA11919E714AC69FC5B91315E2
3949B468EA8965C09E14B93FD8F0A9A9B4A0240775693C371C9F5E8CFB4752C5
B8C3907EB8B475C65DEE88EC0510BC599D0660C41C842A3CCA793376ECDB36BF
799EB8631B5A08846013BAF4256252AF16B24E3BEE4C45F8AE9AEC40351B49C3
CC0B1DFA717674CDC7A3BEA5CE689121348DBBD82720A92C2D68DB27F03F105D
87587E74605E01EDE24B0539FAACD5311070E7BE0BDC57182DA408ED060B7B6B
964AE3EED6C8F348F298B28987B635D1332B77CC33F0B6BF682193B93CE93416
64F638070894F299603700A95B876A3FE5CEFD5BD19928E5DB60E0FB25969A26
05A6651F04B60470D0CE8E37C50EF9350CE0A4EA9F5251F0E9A1B7ACEAE4DFF7
40578E61DA30D0C9067954E23DA81539D0601CCB3FB78040200CE8A1B1E2B4BE
E6BA8FC9121F04EB916D5F9D98C77AE10A51F451B440230C23077251E29FC6E4
2844FC17F11EE282266DEC3A15C96832E595773ADA1A48330AEE455DC4A2805A
C7C7CA085D16113F30AF3EFCFFE079C45CB512DBF81EBD6137314545CA6CE891
19B42A3518E28989CA7DB1DB6F28ED3CB0E9F227A023660A46D14CF05E197E23
3015D9046635F59924C00F5EBC3561132B94C23E91D3AA1EB997B9F486C8793C
E2B8B9224C2C13AEE4AF9AA6E2FF96FFE84223ED1A902C38AD739E0C863A3A37
0482E2F28EB620257113D8EFBE63FCCD181158CC92CFA474170798746B73808F
8D4CB2A16B5BED0ACE4673AACD1484A8CF1F437F58D478A2CFBDA394851AE87F
E8E488302B346131EE903FFF22B882624BD2EF1381761C1FE4BAD1E701CA9C4F
F34AC1E9F9EC27E673FA78703FFB2432FDCD62AE52DE02D55580636F347297C4
A74D04EB5FF11D31D3D04EB580E6C54F88A817049249B0749FAEBF78C4A3CE4A
3F375E7C57D35D8CCA7810BFC7C0F4D4F14F8A29EF000D2BA97AAB26D48D50D7
CFA8E3586105575D14DD80F3D2022373F802C98A78E465F7688C9952848876D4
D7BECAD0FAFBA4674944BEAFA75ED8A87873439FDA03B482FF60B84007FCA6C0
1A04B7C8BF346E30BB6D838EA08FAFF3A3D331527459C665264B9E07A7262419
E0AF9F0AB9897891BF0CB656FE222587FC8890C3FF9D848ED557732CBD2865E0
F4838A6C6E5D794F7781359855ABBD8B2BA63EF2190D930D20C74E9088BBB9BA
62865A174D03BF90A0959079C28DA220598AD0A960C66697A49513D3F152C306
0A9E3133F750EFCDD43E34492A65321EE3B08F904968BB642D3E46DFAF2697CF
52589695642631DEAC79C3B4DD9DE61885901D9465B538643F60FC1B46D83DC4
2D6AB7AEF088D43531C4CB5957A74FCEA04E4BB05B5AF68BCF316C62F7A26CB7
88C6CCFC7859DB9915626FEE3C95F6FA3777B3F6ACE5271BF3309B0A41AF9853
5866F4EBABF5CBFA2D3F411BFB2C3B66962102B183B281FABFF17CBE2A744CE6
A8CB6E1B3D624A68104A7E43F20483622B9C93D8803D71C5ABD930DA44DD6177
F6F411619A130954C54D3BDC24E66A4EE2B3F6C7EA40167FF6E21CA13DF3E903
3E88F8F46C5CDB75E816EA0235669625A772779079CABC8DA76AFBBBC1C15EF3
5695EB0FD46E34C3FE121CC29F7FDA3384B0F1292087CBCB9CBD7B2377AC0F76
5BE0CD3485F2FCD3C6C0012125C273B48900E5200008B21F6DB9F4D4E8027E7B
34265E1FFBC9666A2678CEBA46AE908BDADA630B135683D4F66934702F939912
EDFF3EE524B38F25A0E12239EA471DC4A90814D38747EEF125FA30BBA9998119
A1499E6E6BC26ED39814B64D04D500C2E14A062125A7E4AE9985BEDB6C4A800B
D37D8F13274B28F86D73600A165214E1A8F0F787C92B3ACFC274A34EE064732B
BAB298F0DD452B3DA4E230624FA5296C7ED8A464C5E7D31E0A9C88FD767D4C6F
E2348CE16CAAE803DBA21AF5B8A44ED8B92ADB9C07D422878C63EA6163DFFA5B
FD8AD97240D760FB6667DF08A0F16FB66B2934E64A39C0D82535FC1ABC3C28F6
DD83851928AE495312AFE7F0B7C3D0990D7725B54B0D8644C01CF2BD29340E92
FDCC5D221298669CBD1F842A1BF45D59D4BCC425E3D7FECB69AEF5FF54E86B80
A6011AA0ACD1D286F7BD2CC6F995355E214BEA9DA0696F3D436BAB29C2328173
4661158DBB87A777A8C0FECA5B1DEC07197BADE6B65EBC7152E119BD58204353
4C4793FA4566107EFFF912A0E03255C11824CD079923F7296DB156A8C9134BF4
E573795C7C720A3CDBFF693602A141D436B2F7495B01F6FBA43ED1CB444AEAD2
400638034AA4D95EF5849E61EF2068A4848A27FA16EC8931456000E61E1181BF
545AD271F9D10C60C6AE8616B12998B08270B9E29464DE2725F61EC431C7023D
FB012FFB2DB2EAA1C61C06519BCD8114331FF644B79E9E96E21720B38098D513
59BF4CA62716A9289C555C1B5C05D68F762B5B2E0B9BE7F67D9EFB20B8A0A898
4DE73C07853DAD10A8805E5844A36027E2AECF4F10CA66BFAFEC17DD1CC93373
547071168AF5018B0B6A40E606207ECFE146DE6F8881F969E06207A973DF290D
29E325B6D59F363A5F4105AFDDF24CD4FABAE1B5E784638F3EB2E67C88879F69
00101C3F6DF95D7F81E6E3FE732DCC175F1FEE41D87120F52AB5EA54FD2E1666
CFA5D665F9B97531D74B56CEB8A9E1417A58C1790ABEB68F2F1B49EEB34D24B2
855294A892EC5C92D090BB460AD8844E85E25094B7CE117F343A856F27CEEB36
1CC7AC29D4048E6ACC5947AE7FB937807AC29E65353D20A57E461AC33EEBC75C
24068278B586B33A5E534B1A9ABAAFF492250074EA4CF3EF0818D8F0BA0C7428
40BF46DFCC9711A0420413D0667C7361C8ED428BC510616C34AB28BCC9ABA6F2
43F08A2FCCFC5D1BAA77AE90BF0E296E2C3A99268D7906AE12CDCEA5CE8B5FC9
5A75526CC0B72C7E122C2ED67153BC9AE380DF04FE51E7B0C5AE4363D95DC730
AD0EF34542C179668A9D5807AA22256ADED921E8711E673C67CB5086D7563C98
2A6C681813E07A8E7440FE562EEF08661E1D9CB5761595B515DEC347F0DC84AA
1B3C272792F2D9B4B11C5EA50F7584C7D931BF5BA1A39F635C87CEC31BD22D64
10F7855D66EC86193FFA19ADD7880BCE5588D2322071D443F47D6B4F3F66CE68
4B87D99A5A0D375535D153353DA6E154FF78F458A671CBE1E7136C16435BF244
6E60705C79C82EB5D40934AD496FB08999EFC6E52E56C0106E39603F25D3B946
A7850B4A4EF56B1E5CA32021F191236EA0FB315DC37D708115765F85B668D051
D49167E374DFA9078D128E745F1583EF885F6614D0D1CE1F3F27571B5C68451F
38BDD4758A54A3C6F8ADB3DC20CE95DA5B22C77227CD8EA53C51A643250FA288
4DA7B6F3D93EA1C82B6639B6090352F6E4ACD6A478701D88F8591F71ECB15CEC
FE6FA0C4C049FE9F04612DEB944271F1EA167B2103D69C11E5B6C66CB8C859FE
8DBF7D2E4B26FDE68CFE085B61212906AB7B4E4DC2FB44E8B035DC6938B09632
5C2AFE3B1742756E1DDE8E2D16D957B07713C650928ABFD08BB5BA216086D699
797884E3D06F0096BDE68F929F9FCC4E5819320BF62AA75686A8EF7A11B33281
2477A82B9B0D3B71E8AD3CD41388A69C33B7A4482BF2345419DA669BB7544636
CEF7C14F8C55620724B05B7EDA33584D9CA46B697EFE6CF01B6152DAF28F42CD
DFABA3788B04D5A3AF493625E3387AFCAFE7EFDC62F4A31CA69E7563ECC5F919
91763C850EE7F7B6A979DB2955BA8E4BCA4039D2F083DB3B256F68BB34624CDE
2A745010D76C85300691A0DABBE33109721FAFF7C9BF7D9B2E0F1F9CF5C76676
02A9C95488976ED8956EC9C1B9A9F3CE3B0F7E2DF387DF831C855D9E21908376
BCEFB52FFBA0AD0F9B56CE4043643BC582750110B16399281C79183A8D693AD8
A961C6DE94A882D27A0D9806A5D0ACFC29180CC21E375BA98DAA4C6043EC4532
937C4870CB65365D2CF81C66A72841E189EE4BC12F8882AF0652D0EE3DA63D1F
010248A498F3809036D1FBB712F2D78CE71E0C9AA2BB3A55094E4FAAB574A474
5B153A3D4AD4ED347819033CD288FAD39E440D2FA03630F9529E50BF1E6A51CB
309A34CCCEAEE87C8B3DFDFB81A9B3F0D36DCA6AC69588F51F29BB83015E3244
5C666CC22DC85F7A86FD1D0311A8D8D1F399F87B2859E66C9432E8C14E04585C
A01642BEEAAA975AE4D7977D40FBC85D4B8F40646721A9F38E916C226EB2C045
04EEB6027C835EC0F0F8091EA0250404BE75563D44B40A5D67C1A122E9E9DF7A
5692F8902FDAEED37EB2C430AD36E021CF56CA560B77137710090D8685624CAD
9E6BFDF5BB2FF6147A65F164ED0490E1126D67FE1A93D5E77275FA925CE8666B
E8FF666F97E3101881467A955FDC9864C9B85E943918D4C22F84391D35DBBD14
2EE39F130DB83BA304C931113287A3F7CA042128135D9AF672319B1C3C1FBD59
80BE72F051D6A6FC34174C461A77F000F446E594CE046052A571505F0E4922EF
04A8185830D6D47E006F893973CE8740FC82F77CCD5B2CEF7DBAA9D2A0EFBFA3
2B0A73412A362977B01FCDC95FC8E0B920D884FF7E40FE9AFDB683776B95487B
F096B4BBBA2BED724ECE2CD766C8D83E28FD65924942AA4A3064AC3D5A322D86
3A4D41DBC2F5C6E21C2184CEECE1101A10F8290CBF0D4116EA1C1DB8988785FF
E50B066A4C21E99AA660872A5EEAC307C7794B303EE066C57594AE2389DBEA5E
85CDD9D314CF686811C2022E8E0EBBA0B699EB0405FD2426EA4D698CB4757B6C
53E65BB5D42C65C7A9DA515DA23CB3834C89F769154447BE2D92229016235658
4F40E982A14EB4E6BACC81313C8E0A74A19FD184B1364CA275FC6A62A8709428
BA35305F02331212B45B9268D582A8B638B430BD0A51C607D4C4FD862F0E591C
1A1273650BBE5DA16CE10C98F5209A7C998877BE8F57DEB4D9AA46CC2EF71588
0EDBD79F25594D516AD74C54762FD393D4810EBC8AAF10F821DCFE8D503B37D5
6AF14F0FA57DA3A3365EF38470C1F0BCD693378BA20DF34D263165841DF96F90
32FCB81A44BAF77D3C294697CC8CC971B555F94E768A275A154D63E71A1D6C67
CFDC729E86FB9315B9234D2AB1D6529BFD0D4C852C5438D368B350D8420DCD34
4A164EAC0AE99AC9A2D07A1F77D2E68255EC3F7448F10DABF969653D21590661
2B1DE5DF11BEFA41CECFB00C9A6A7AE3808009E41E2B933C6AA50E1E9BC8AE00
651C8AEFC9FCE6E647FB5D6032000CF87663510D97C12386227E58DD71FD4228
A070BE013F86155C46C8F96D3CF1DE07D60DA3D0E05C3B4A6B5FBAD168B06A50
30738754199245C8AF782F76C58A8F638A2D85CC51309C866729297E3CFC075D
6F9ABB484C5D1D307E06D6ADEFC769E5F51E389520288843F373B71B233E8B96
E59A7053D1D7E17972EDFCBD700A001EBE7759818EECC03353EB0B990EE6DA34
8C65B5092EF565AE325B00DFA892FF2E7217990F6020AEB57974D38E31F97183
FFB436B7DD8C18A80EB7D43D1EFB9A8D3EA99E77F65AD1443AB10857C44B7AB8
2EB0BE22CE0CDDE525B9DE03251E192A3B436C3907AC59EA40BBB63A5A7DC56B
DF08035260ADE398AD7ED78F895AE0CE0ADC74F4BCF4FD9ABEEBE132A537D788
B884084A69BEAD6791D7458A0BC58635A1576F368FA8D2D99DCB6C31BE97F432
5FF313DDA4B7411296716D32049D31F8E85C7D4B4DAE656AEFF8B7B8C1053A57
F13B93F29800E250C98BA58B6061AE740762F9202122F156852A326C13F3675A
4FE680CB4FD1B94C875840A97F2D14D6C1EFD4D4C37F39752572225377072C53
6854A002922441AF733B6F90EFF39E37E1605AC5A3F4B45F66DFC2357B57CF40
263D66A21EE0F0C1D1A0E4BA12454F9A252CAF55B46F5A907DF9D94650DA1D5C
4CBE7E65DE6BC996F52CEC6A02D4D987D99F7B66A1C786E9463A5628A50F5163
02A7F1CDDA1FB3337774AD640B02D504018E7C11267BEB7F51B8AC2FB3326EB5
1EF125B3AA855B3AF7891595077B9FD5960896A022BC3CB4F97F4CC175F09B81
128452C576CB26479E769DE0B75150360EF0C2AD3530A8A3B0C61005BD13EBB8
4F6A707A8D1565529BC1ABE78FBFBEBAB170ECD6908CCD31FA33368E485DCBF5
24DAC34619A38FBDA43C886FC6B4D58C7349C6D577D3AB8DF830F3DC3E06BE4F
8D1283533AE54551513735E278DC928869953AE85693870179055B8D953A8062
0339D4FC9D3DCE68C408FBDE261FAC68438ACFFC7E0F12168B91ECF56ADEEF93
FF6A2D2AE5D35CB0B49BCDED51EF5B16B6A7364D38592BE0EC092C66309F6D0E
E9E73D7AC69A9F9F8C83B5D7352E92D27751D149F552DF5ED5825A79507C5C8A
725E19E744631C96C74EC15829092BE11AB890C9AFBFF608B4F3B5FB42B29F1B
DA5436480A26657A2EBA297FD9933FC6B0071E62551C1A6398F82B097726E06F
4EAC8ECD5C4B316AF63B64A131F3EDFC50F1141E56EE81CB44A03B0CE8B6CC4C
B9E6DF9F47E957E47D4C5C51508C0825537EADCE33E9C3432AA0C0E7890FCFAA
54E1D95E922165EAECC89E7E18A7E36A269D68D918B4E64246066C88F009D478
D17DEAD4CE93F288531DA3CDD4F0B040CC82544B95E6EA26F002357CCF6E3D7D
F52FF5C84DB56CAE8F64D9DE498A54C28558E34F2EBCB8CD3F3F2AB2531D3D74
6A1DC97F93E312DC04158ABA06E9E55BE5A8DE5E0F3D8087188C8055B4C6B7F1
AC373AB1563F756E269BF3D90BDFB9EF3E62E610906E1928A4FF14665EC4DF2F
1703DEDC813E3BD7EFC9CDAD47E0DAF19D2C0701F2C027AE2986BE7715E0B0F4
15D4501FC252AB0608A9BF79FC085AE7F9340C073817296A900E1AB7033D4FD5
21AB67D4AD5E29DC4F20283A7864A4D6CA60908CE2D544E7C3C894A5635FDB42
989443A0DB0AC9281BA74DD27B1B573911DF90AE01984A865A3DB95125594779
C77DFFEB5699712598DD86F94CD032D14E0B71A92890D3EDE1443A3E30968AC6
33A004ACE18A56520853F64A4244C7B479530A8C5D18E47B38D67BB508A58710
6B5753081BF59EDC0793542987F1BC26553DC19CFC6EF456DA872DEAA95884C5
D4D8E503E6BFCF252AA8E144F2A24F21A08CBD05C4F65C9A9636B102ED4ED535
2A3C0A4FF4A039C3ED2C9E00C3E680C4A8FCFFBD90E871E5075FEB7661340E96
44DDBD719F2D4DD690457568802749D1E6A1EB15F64A85414B1680BCE311E8AC
1C08758B6453DD440D8A9816EDEA14E09224144E91276B842280E04A0BBA4E68
CEC5A9603A7F56551C2B11DADF1F4810C734BDEAE930B5DE4556DA67981B820B
CD2BC5A0FB8D8790D2666E0AE5558B1D2200534E83F7851F3D9482A2E8908F92
3BA87358A66968605B3D53DA4AB1D93389BB689B0822526D9F240952001DD054
09B9BE40559FA3FA4F216F022D50C408ACB34021AAE5F2B257DEF13A25F02701
234CA72E44287FA9D88D7EF4F768C35A65CDA6B411323A501BF3848AFE448DAC
2240C6CDB5208EB259D89A8F1BE43B39F911F55D88B5822E443C898E7ABC7EF5
B3953C2EC6DDAF174DCED0BF9353A2713774A8DF9A9091AA553D30361C9EA580
56F4993B29EDF2D3F3F1D6DBDB31728A84CB10019CE7407FE4201FC9A9D70F9E
8FF56B5CE83D2810A507AE941431A5D9B513A6F55FDD452D6309492C76D9C5C6
DD9D8F6CCD27BD71AFFF7FCE5D34DC355A066BCC3C9282EC971521260CF0E12E
936517B05ED0108AC13A671654A2EFD5FB71109B16B3B4274BCE4EBD624F288D
9E90D28D18D27FE4628444E76D3EEA619AE9476D181B4AC774AA62BC6D8AE5F0
84F90982D5EE1D24AFB37703671B2493AFFA4C51245086BE865627AE7D0E7759
179D509827104F840BD2C720F35D46D9C8338C0F8C03ECAC14E9BF044A04A96E
177D1C5CE74D34AFF22F3937F05A1B54F46CE9C5F2D60907DB971F5B2F8E5B9D
3ABA4ABA144209E6845B85A64F3A97CDC9B6AA5BD9E68F726F511255CDD9394C
0A0332C27139192F0C5D79668CA0CC0CBBB14E4CDD707F11F048CD6E0756D90A
F2EFCD882A296CF97148364A31FE8D7B5250C8BBC7E9F39EFC55B4662EC31535
416F2F90DDAC955FBB297FD4829BB73079FA91012386544B98E65BABA975C754
36B64848E3903D03C59BE0DB94E12E600E82A72EDCDEB4AB2260EE95F46568EB
D0A7002D21C9BAE538CF8A347A2751868343EE4FB3730984335FB2B5B88DFEE9
66A8062C26E4B834F568CA6164D6FE9AEB126502B943DD390A50B93D1CDABCD3
C96FACE03115D56C6BE19F06CF7DDC375238E238B448D27D64FA49ADCC0A5B24
AEF014B5D48F6CC493AD69E74DF47FEA376C6EF4B14C2FB71ED0F42E09F1651C
EAEE97341F26A6591B83FE723C448AA04AE504D6C34BCAECD27DE4B247678C7E
C51DBF53850EE7E615C7A01BC705F714B7B0C80B7AB79C42C24C036C6718E5A3
6E1475F07D9F7035866A73B4D0A67807A03FB61352F73A349AFFE3CCF566F457
6A62FA32004F3FE6A15E7B25C6E9AB2D1DBC9964E6903AEB408F09A0427933F3
4E92753419A9FE79513A2E39FAA295A92292D521E3A95FBBB77AD659D4E03D2B
39EE02738A10059514A8B51A35D3302C25891B90F74EBDB362E1017C676F0A0A
9CB67C9794A27FC7F0ACD189AE59C8A75A5E9BED84A5FB6EE5DC1F74A620E559
51D8C5CDDC4B37CAE2AF70C48B6C306BE826EBE8D22DF714D1F2FCA10369A266
F5DA86D65F730262B0035E5FF68817C93CE0FBBC201B593D955E40C99E235D45
7F70F497A8A11748AAA70FEA09AD8F5BD1A01E06D56BB6059DBEF8AC8AC5FB0C
59B5CA3C447022EA6AE6F928DA7C9A6A1F322C5D53CE905829C41408CF7449C2
69FF41A9B83869D7F230C78871C22933C991EAE40EBC97D8DB082B20E4895E49
6D6EE9D22FD9B395CA79073C08C0053E3C26124538544D9C68717076746A8D72
7DC34AE353D29983338A2D1998A0D62BFC296E433A8E48CA90B999B298609587
1164C2A65BC00D0F124A8EACCCCDA7A7F65D5AA4DBF70A273B6CB918B00F6ECC
0131BA9461BFC53357E09E0A3C615E79A26261D83F71B944DAAAE74A4B7484AB
D22B4BB40D4E9038E721EFB5F672796A3C961C298B29ED896A27E389D134C21E
7BED9DBB0FBB3AE2ED4A661992BCC8E4976F842785431AAD804360FBE8A134E4
3CA9D26F8571E18D0F27F70ECAF659A99FB7955E0F4D8690447CA37F42A05D15
E1D6559A1C95CA424A643DD58D0416A374091D94CD7A48859EEB4A461A6A436F
D07DD5A94E7D5B033D2AD99FDA4E7373A1D6CFD11DE94DF6537F25F5CFA1428F
9A126E21D819AE1A044510186FC8A9D51C20D922F3279A85E31C1F34B6B240C3
000775B140120C6E697D7BC14AE22F87EC6885C3CA40E718BAD7688C8A0B3E9F
49652FE7D0DE406B2EB70F039AA8B10C7601C4929B2971A9A3CF98F52F9FE122
CCD2D944BE6F68EF6F4F8EBEF51AEB1DFAC87C164F94B36511BF120D126D6824
01736A019ABF0BA4355854251D381828F2D5C8460F3B066EEA447009C01DB22E
33764CBBFDC5C74CB881098E7586725777144FC38DCBAB71413A26068EE3EC6E
53300BA5BEDBE53E5FD61E6D2E390C7E1D82454093264E8A2013AA0C91058031
B52A08D996CF2C82993DE9497AF91D4AF8C99E68577589F98564AB36FA448901
E671920A8DEC9535AFA9038AA1D528C4B31ECC27A505A5B83E4ACA119C6D3BF7
1AD9B21318030B2F1F69F132E3DBC5264A4AD516AD4736CED6E8CA4C3352C78B
2B836CA994A67BD63576593FAE07433051723DE3A67FEAEDA3CF10F66F7DB936
D96BD0A813A5C40B144EE897A5CC701B0297E190B6999EE9808A54F86AE2C05B
0FC4056944066CDBADCE78A0524D6F190B155120749CA84957FEBF447B748BC6
27B3AEE460D4D5FCF042B7CCF4A4DC92110AC09B16669CBFA4CDA713606FC086
97E8EF90EF2BFC8BF6C811FBEA5163C68B95C0B65EA87B9D12942EA0DE78FCCE
9DD86341497DF3F0CD388BB386658FB6D774A46E9857E0091F3B2C6E016BC24D
037FADA56418D223E672609C891E32E96BAEB77C7C568F26FE03B720F5F2D875
9F1C5BF185C4B1DB2E6BBA48F4BD5F6457D92B701E7DCDF0ABE154A9CDE3BC17
8F1F1CF521081036019C20E3A8AA6958D08C3EA3275CCE2F96F0FDACCB50ACB9
37204C55EC41CEDA3AF577FB778E606C7C2EE814E8D3E1C250DE4D3E587AFDFF
A1266218FC1D9A386D00BE86EB2433531F5A978031775862254994315B01C937
CCAF1C5DD69F96F5D64DD288087639B02BDD29F9B96C5B4F525DDABE245371DD
4717AC198F6477E1A2E6CA5CC2AC20FC94314212F5146721FF639C6CEB6936DA
A7ABE5348153D0DBEC6F96F61B6B7E53DD82107EB85F5D2FD094D82F4F446CEE
B64340FCE74AD83B2082952ECA69C53ED64B6F03FE3F54695FEEB8EE1D61C6DF
87F7214F97C165F4962E5B78500E7F4E684AD4F4F575F06FB275D449BAB97B06
BBC205D8FFE660C682A8CED9E1F7907214AB2E6BC7C830885EA32605B069ACE8
66EBFA95DA16774EDDCA73685D1B145770BABEBCFB3989284B27B7E698E12064
147A2EF3F2883F85C9C0E927DAFFBC9450E1B6E918726DD37B5CDA55E6D0D8A5
C3B5ED376F4772DF45D45C4CF18BEB4811CF1B9B3D920BA4A98A80F8DABC91BA
362EA6A74FA33DDF518B09564FED9F04D4312CD988EBA55DFD3145438A223943
488699B3D16846B51F2BB650790EB63BB9ABB2B3EE27C62B1B01FBA662B70542
DBB61743DC569337082176ECBAD417354A5F900EA0BB5479162ED7ECCCD71AE8
3B3EE296F3D14D289B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%/PSTricksDotFont exch definefont
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 438 2022-01-31 17:45:26Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 216 2021-09-10 12:28:13Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def

/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 2019-2022 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMSans10-Regular
%!PS-AdobeFont-1.0: LMSans10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans10-Regular known{/LMSans10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans10-Regular)readonly def
/FamilyName(LMSans10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMSans10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-420 -309 1431 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFBD8A43517ED5F05168EBF9D3AFE
25EC2992AF87F286EB5CBCB7AB5454926B000DE86BC7DC7722EA9CC5AF351D71
F88C22A045179501515ECAEDA3F7CF9A23FF4ED29532BCC5A2D9C4566653DC0B
F99B58B303B412848BFDFCDC0BB4CB9FDF30F98236F5A2863FD3E28016CB2182
2E10F5EC6419BBDF2A9031E1EA217B147A06BABF1F87C9585634C5265AD31FFB
EB313C8110270894F41E54896FAE4A5E1A9B04BB8EE53CB5F143D8A3B77AC1B9
96AEFAEB5EA99D855A53026FDEE6A856D3616D7EA42379EC96B931867D9E55CE
3ECD8877C379F6C2FB63E92F146942350BF980AF3D7DE17DC4C2E4B304AFEFB6
F4A34CB06164596B7DF119147C59AA2A1A8D448EB219B2682388F94393CF4D74
532926ED5F2B9D281EF3324258F963D1A460D08DBF08127EE66D40C3C74B98AA
22B9AD6BB84113F84B085EFD4982BFBC507D1215DF109AC39E0B12230FD6DF02
C4B69CAB0B3375C9924071A89A799AFAAC3EE2010B8FC82E42BCBDF021C9DF72
D2D02FBD2CD3E161AF409AFC0828954F2BF56A15E1ABC0815ADB9C244B0AED7F
4B9A54CFA2A286FB4D9DE215B8B5879444B3E683FCAA95D0F1520A716BF2325E
E76716BB5C5DB5600A7CAD11F019AD5B3965B61494D228A3473256E4B8B22A6E
08F055AA199E8E9FB2B6F04B01BC31664D95FE7CAE16648E0344934054BCB06E
44A33F278B8A2215F77018BE752B8FBD6518461CCFAF61F07032398367B284D0
B0AAEF9509F632534C7084BEA8B52EFAF676C38D4A720D4078C0B3B525B7178D
9F85BD44B13272DA283BEA7AC239A3E1A0FEAFD3E9F7AEC9CE3296A054919E74
51FDCDA8344A2E134E285D682648203E81A5343EB6EB96FB42F1034835DD0440
3968C3E86CB7B20B53F9CF8FCB188D635FE58370AEB11453FE69A0DB8341039F
EA654B8FD7323E5536E130FA10100643C234CBDFB8E1CAF1E0C1D9073C3299A0
24F2E4D71EA82005EA03BDE743714942D5C32341D5A1054CE77454DC152B2CD1
2041A9F75C1557998BFAB954E07A39E9AEEFDD9146B438CCACEABFBDB7FD8AF9
8A270F2130D1D0635323E8E33DDA857E562F41B2162992616974E51CAB33BB82
0A654E2172ADDF9EA1ACE49BE65A86B265EACB68F4588F0A756250D994E7E870
6A72A69CACFE147AFDB341718372ECEED5B387AD84597CAD3320EFB4D2DD74E2
FB2E5B86F89160CB448A6793DFA98800C31CEA9AF82AE2AA5CA952A079E1E2E6
A80F3AF65AE92A9089683DCE3EC5E6EC689DE2C541568232CEF707373F07E753
AE55712F2E5C55E47F31B7AE43ABEAD548324A5DAEB9AC7E77DDDF41CE0DC42F
D6D4F0B4ABBF4614BBB181B06F7786B32790B89747B6BFA7EA057D586AF5A841
0A54FC2AC5C6987A5A8BFD7462484AB9EC77CBC0F708F0CE57359FE9EE1DDC98
E280A2C3B8DF12C1E9C72B6B090AEF50F95714D15C261A3AEB187BA1DC2BA013
A2DD2155A0B68473FB9DBC1ECE947112CDB791A1CA9D765A8E48752BADF79F03
E033D5873D5292B58642A9D79D6DF9E977B6BE8BB8B73909AA1117B78A550619
2B150F3EEA5EA1DB1FAD71C69F5C5C9D103BC2051857423F69F6821F0D376478
0499D4A5816CC1FD41FA211A5BCAA9B7B8DD2F0B8D82752DF19FF85F3ABBCA8F
A9001DDD61AA40404BFD6BD739FEB4B951EEF8BB47854AFCCD74640A44AC9447
37792B49EB984BAB5F5CEEEBD40813F722DD86A572F602F36E083DFC32E5B188
AC85EFFFB94024CB2D6F57CCC4134CB607D56892AAA79594FBFBE75603A0A117
C1419DF929D29EAF4490A01DF2A035EB7BAD4A2236651359D3942F98C02657D5
E20B8CDCEE93DDCDF5BDEFB5F08872C77BA070C12CD83480E431C10BB4D94A38
E4E2071E750A972AB442C5373BDEEA5E6B5F5897445B471395DF6F39D245EBFA
1E7A70B5E6928526F8EA1A1D72BD2D398BE3C3E7074B7E3BC175C3A3BB199137
C3DCBAF784D79C2F0F8BA9FC589975823965AA4D2FC6AE27B27A17C510E934C6
91E3688E6A0EC0E65F5063436840DBA4375894A327357FF78D906699CB9C2B43
FD2042ABADEB88D8E65BFE73E22391AD1D0DEC1DD4E91AED7FE13BE59C137EDA
F9B56C3617FEA2E77A32F1D21471D485F5144E0D4BAD47CAD5EE287FF010AF55
A4B864B822E4BC089465081151A6F9A0553D1297C9AE252D018C3E59C8BAD5F2
7D6E47F4FB9602AD6E1158543D00A6C823A5A8CF68AA2FDB9A09A73FCB008956
FDC4CE39D2761A728DC24D8C2C25B06AE091DB97DCDE55F701A63B25C4F261DE
CB1C4B4EEE54C6A9D14DC90A39B3E3C59073798435CE532956A864B66EFEAED5
C16287F5ED06380D6719079991D4BFFD5CFF4016400DC83E5BC1E788CDE73C09
892E3E65EB28C411BC79646781C456F572D2963F1A9473DDF6254C62013FD103
33512A4751E1CF748CB6C0489438BE89DA50BFAC7999BE4A25D61B56F5F504AB
332FC17EABD6E425CA195445145B8CB7B19883B9F981FDD5AE272603E4D20E7B
2FEC517DA69DEF4F35816A39E65B1528AE7D952D4A4FBBF092AF877E21C32B70
39E11C6B7298B9460C2609CB70E97E163A41E6E7BA871647E3928FA328E62A30
BFB558B14DC0296750D8A3D5099541416B91533637D5D1BA8FDFF84EF1B037F6
E883A41645C1E4CF533954DF291A6E0C0F58C98B26492559C69C8395B1FA4C2F
642C09AB2960F8D54E965C4D8F99DE6CD69EFF58A2B2546F1123474D93C05C07
B8689FC4885699E4BB76640D3E1C81416DB353A4EC3E8784399CE0C86BEE448A
038A3519D4236FC473CE71A6377E32DF8E4EF595064DAE07A199D5825CB5DB62
680664A8C32A7059E8DE1B7F324D70F86D047007CDBFE9F54F0A6C7B80ECAEAA
BD8B5A05FD0E43A207F5FFA4470C68A59CE17438321CED244B3351B9191D5B4B
FC8561888BACA0E81352589E0980EEF27FF33ACB54F0A6AD8849F98CF9A4FD87
D613121F0796E257FDB8D61E033D083625FFCF88A17B1B815B966A2F82D27A9D
E7D80DC986174F21FAC13BD01C6450DBD0DE1D9CD163520429734028AE6D45F4
BBCE60EECEEB2B7B9B392B5E0ACA15C2FF5D33EEE3AC3C9907BB7B683009C74D
666CAE5930FD5D8FD1948515BD2B3AACC6D4DD67BCD6E3068468A0903BDE8F81
C142E70727135017B39A5A1AFBA562AA9085B98CE96563219F82D9EEAFC6F78A
F8033A68854394C7A9397156839E10B3B329E90F3DF32DC7AD92327F371164CD
8376433E9D2556C8FD15B110E435A6CC4DDD59F622DEE2356B941F292425C63C
09D85A4E088C75B8B18D8D9B9D2227C7649133EC6A81002AE7A7084F53401701
EEF17EAC1C7A901496F86B39EFC0A5AB80F3788AACA2DC8EFBF1825630B15574
DC1FEEC1DC993A2B670C19B19D222051E7E89D6F7CBAAFCFEA55F0FBC15FEEAF
BDA650DE094645F2CDD7998FBCF9538444AFF044845F16B02C5105565CBB43DE
8DD9BE0FA03835605E573A5E9DB59361545F5AD98E4A7948261BFDC4E3406847
5EF1CECC81F0CBD9533A766C2AB8AB0F671B02BA487CF6B588EBECD26F9BB7E8
DE05DD0483F7A3D5741EB51E3EBC641AE20B324996DD0027E8A44E42451F6944
43F3C4E2FC9541C8344D357C6767667E1D4C76AF0CEA8A936F9CF329B2F4350B
001DD51A9DB64D82D53435C7BAFD262DC7F7D015F4B34329F93BEA641E049A6B
6A2C59DDB9EB967AC2EA9C06AB43A775DE88FC98C2839CE66EFBB8FDAAA92A32
1B3386935E6A69C5868A268D1D3E1D71D757DE153AC916DC8850DE6284BF1940
F241A22A09F10267CD6254500668E59A7C8DF2AD0123EA18D5AB0735D57A6382
E9B2EBFEE1F502A178E35704B7D0AE379FBADD0BB2BC7D550144AF357A32CDCE
079C1047F1E55E05D754F34502EBAE22FE9FEEF344C5218AD07EBB2F3261539C
BC394555FD489236394407BB66B609F75D8C1E1E9538F61E5FBAE613B8F58744
47F68EBF491EC59FCC32BD7E0F9B25F3B832585776052FF4259FCEB7018DCCF3
647E03E89E38C8C3F9AFFB729B1B2971DBFDB7A1A64784D4C5CCDF5BDEC3427B
53C25B1BDE14ACA25ED9C90E8BDB022B99F26C5F42A789D622CCE2408EC84A10
260637BA69C7965DC0D8F8B86692D45186394E0A112C870F466B96EA9E36FFFA
2C3875C789CFA650EA76716B89F7953F411544E56FCC098DD1C6BA94A6B454A7
501E4EAEB76731EE262D684627DC8F839EECED8A0313F339FA17C72A4103D5F4
78A55576C1EEDFBFDE9B94904D57A927644DDA7044E0146ACC2771C893B96FE3
05B9AAE1FAF9E601EDE032D124162880AFD39EDEF8B54FE04B0C87467990C8FA
DD97AA854076AD6C685EB8A77528D9EC0E2F37B10826AA7F8D15F5A74F536B4F
63EE567926FD80077CE767994941E9A5D75A8FBBEDA2F3FDF20CF092A23EA9F9
73E3F4E5F1A14EBF827DCA38CBF9A44C755FC8A374550A55B6CB4A316825AD74
3AF24B4870DF468A24148906DFE022C2C2F06C2429A370F070A47C44BD6B0FCA
5AED88EAE8608354A27DA79FD0F96B3E2A446453E102EDDDDD7AE2A28CF1A20F
7B73911F39D6E41D428A2CAF48D65FF1C7E8F8F8A34611ECF2FC72D04C39314F
8D548DB7D37F18CA0AEEC4C4A57FC7997D3EC9C30BB1760EBCC416441356F36B
BCF98C89DA493A6A242F6B23C707536610F58CEEC2E48959530A86B62E15E2BC
C514D171B7ABDCE13D9B38CFBBDD8C63B665CA594A4AEEAE4062D6403E3B4178
7E1449587E28093E66A9837BBD9FDF073DAC2D5EADE4A84FCD99EB09E131D639
5DBF45A77C66BF775292DF056CFAACA8C087B4C0BCC2AAE1F2387D0AFEAC9181
A6C434512F6A544CCFF36F8AE89975B7547075C6FD56077C00902CA6AAF0C12E
B5696A397A29372FC54ED39CEF3F9292DD0BCCC266E6895648A661EE6635CDB5
3BA93A15B889E023A11B6C2A35FAC32CECC0BAF6413BA4DEB76CE1B7C8CFD866
C961BF468F25A828665F6B316C147E4148F43F68B433E736D2E15CBE3DBBF4F1
397EB5BB488D476D4E7CF40F9BC85B6AED675BC2F751F55968F63A8507C386FC
B705BBF46AAE7CE33A06243277DDF91BAAAEE61A2B30C71F43F4164D26BC0618
6280623B6CB8ABA8D9B716C021A65FF920CCEF8C950C820851E07C23ADAFCCEB
B1385530B27180661A5946D5B014037556D6E9C3326F8592F1A8E23E12340D6D
962C5703167D702466832B32DC035DFAF601E2EB6615E5535A54C42DE6FFF8AC
8683DD62ED727126F236C790583C463BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD0
8FA2E79AA4C89E877948CA4CF92F1BB9E3825B748C865593B8072DE32241CA1A
E9D54F1E3710F18FFA2F912FD822B23D7F42F4BC5752147BBE75D0799B3A3F84
CEEEC397F62EC7BF5CC818F3FA54EDDE178B40A1B1D6E2F900365E2FAF37D819
7EA627089D71EAA4E103C8BF03E66F3D8757FB5A86F24E434AC076E2A9559B9B
8752EB8E57C50F0A9CEFFBC27B3A08467E29D17E5932C4535B3AC49BB35A5AA3
5518DFB99CA7E44B6E03DABF8ABB73228AB47CFDB3EF2D18742DF7CA2D119CC1
2A3246B9B5EA106E3A8FCF0755E67108085652BA05177872A46DA310F17C1BEF
1F9E356555DA1A22700A87C2999DDE579B60444EAF9912E2CF7390AFEB6F7F9E
6309A71C82A089CD2DF10D9B054AD7D836AD02211578672376E2B3FCE63EA618
8B133D08EE8FE60D5C71D367B7D2A6BD0C527C07577F38EB41E9FB1367E89709
CA7AAAB9AE3B273DB6E751F50D6BC26D141B2164031D611A41DC693B0B1E461C
5432AAC985AEC7EDE0CBCF1AC4B2432B5FC671FC5A672F5C893EFB469CB813D1
453D986E24853C42E8D001B7C8D31B887FC05EF8A7BB32F7D29BB5955814EA22
6DAFAD36DF4C2E8C4B94348E7ED962708CF7AFCE68CF821605ABD5CE63B03210
F3BF96D6BF08F38611A67040608203A5C3D09B83453029710375D9F063B335EE
CF830F146463EA4A237ED18BF7D7541264844FECA5CEDC552F7F63440B9CB063
939AEFC3033B88B33AB67C5499D2A60B5321A0C54E2525A147759BBB495C5D5B
99EA24A21A41A2E09D39E9007BEC5BA79B849449A58453935004FFFC8F5B1D20
70F87419A0D24A42CEF307CBF1945B22B48B2CF10C1B338DBB9E22D50FAE5815
1D8AFB0CF8CCF782D8C0BC3752C1D9DA1534C9032DEE7074D7CD3FE36FD16208
E4B5F58347F30AA07EBAEAD88FD6EFF01C1FA8C0BCC468BF0F103E31F46B8EE9
211460C2E734C59BBBA6B2A5A6D96F9F2221E85020131163F32645F023CEC670
FED1174757C91B9211C59FA14CAB520B2E929E901926B36B9306836131B18D78
5FF63B4FC19AC48528D4FA923C7356D17602C55A70BE3015A727DD70ED6DEB95
EE615767510AADA4364CC2035DB3CD08B107110A2E14E7E4B07C12A28AE03BE5
3CEF9894EEBBD3459DA2F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA282
7281F7C5416109CCEFEC324FD2DF976CFC21F029256B858B6C79D6AE577A3784
FC94031C64514BE9CE802668949FA87BC9F910524EEE46F14F2E5DDB7C197D9B
33C9647B262F5C1D848726B4230B4F8D878451CEFEAFA495E3CBA7CBFE350C69
3B23476C3C77F0D21406751D2DECCB2F9DEDFC2C3D1C14EC30CBF83E5729F1C0
74D4F1665E02B79F4198FB57134BD4E40FBF297E85C3F343EF9384DF16BBB215
E47107A17454A4B4234536BFA1677F9F1C65FBB9B9F62E3A3E951935FDC18090
714B60E3CC56B67A5D4F2D6944A68175A656514425E96DD970D81D4E99090AF1
7A438014B5902A55EE220152C90348CF590A0BA98BD50D1DBCBD3EBEE7F8CCC0
5E4104CCFF117FF69C08E32AF9ABFF613F157B6D35489507729D3A3B7C2C8450
1CCEDD11F7C39B765BB942E979AAA1DE3496DAA9C91C7DB5DFCF2450270BB75F
181704FC3ADA152A9B3FFD7DD69842B10468046D3114D54BD3389E38DA769C55
40AB3ECD62EBE43B473FEC1F76DA6C55089AF3D95E392F996D8C91D104F88377
7AD1B0FFD5C8C14C34C3638975BCC8CA5FBA4E4E99A88103935A91A910B6AC68
0A8D8A40EDBDD51D7CF582120472701A66E8EAA12D2FB818A8F35E882A0052DE
76A475D72276E2C6A8C48223624B5A4204DCBB1C1FF12E5BFED5253156E3A76B
45CE938573AD32260E95199F6B19286AE258DC9E2206D9705E4D0F5DE91444B6
D0F630EA3586991C072A22F9D743F683C16FE7B82DC191365103F27EC65E777C
4FCFE9351274FBEA480210E0BA1D53E704FA24F55107E8C5B9DFFAA47AC2FD64
2AD61CD0776567E48DD8D9094FDBA1613FA326087DE922C36FD17FBCBCC657AC
F0C00272C7BE8C844AF52E881F5CBA918F299A849F5ED006AA52A23114FCB322
2C789B363F4B77BB6F513F2D1CF82BE364B0469925E4B319C569DF3CD3C053F6
CCC206CCC848A8A56F937901D81D4F0F7E49D329237064384825EC71945DF03D
FD616486E4E0A6FC3A0C6CD24600D6CFD67F9DA4FF12E029DC1813F4D2BF5379
B7F894A8D822CD8B8115CAE347EE32B5C7659AA3999D8CA1D3941D1FF042DCB7
83474D99A4A3259B2FBC52122E7974849DD398C044CB32F94A5CC71A40D7AED3
2A610FE0495715743C9519AD6A1827DBD3DF632A9B2B3308C641EFC16613B8AD
5D886B7ECEEC348CD37B9D56B3AA8B008FE983857E2F142D2EACE0C439D359F2
E8A6DC5EB9B6D9D3B4CFF4CD3FCB4801A203B5177BCCF14778CF7C65AA035205
A6E77500B2717C3B182971A143737D515EC7EBDAB4AF1ECBA1C6E908237051DF
3DA72DE6C083E4FDF42A54520864E06191CB16A436E150E02FB2831359FDB957
92B2E6431DD24BF9C2AB0E6573D5CE090C2DBDCA93B57A82AF52A14DB5E1CE4A
FEA458ED232D3F24C4839AAF0BA7BFEF50AAAE91322B434937BA7ECE3B966FA4
A35BEE2036FF9C5C4239762E498A17C7ECFFAF85013B5C541204F798245660D0
0FC4BAEA53ACC2539978118B095E6A8ACB62DD34E1A0E1C92CC3D01782E74D45
DD4CCD6B47CD7AB46DA2993171F39652670F92510ACA7AFD71D2B3E874456992
AB83EB16EAFBC59BF0404A36DB4A079CF92AFED25998FA67CA010CCE8249E41D
C16DA43F79D4C8CE6C8C9F8C6B78722B93E8650097C6F2596885420B2B38DCAC
B524BE8F56A6F17C220DF312D33508279355F50B3A93FF5A9AA6A5CE2BEE8993
C4CBE39FBE83BD728E3724990B9056627C72C577BC8C1DEDC1B91AE582EFF2AD
2B9B2D6D097D827B6DA01FF8F441690E196B19402154F4AD4A152254522354EF
68A6F45AEB7201BBCDED53FC161D391E60CE743E8B6DD2B9A8F686D6AA020E49
172C02DA888DE03D1756976B3D2246EBC69353B083453AA83AB1657ABADAED62
2B79AA362E40524F69A53E53B860719FF1040409D98B7A51F1B973F8237718D3
E3127F81D20BCAF1F0B5D16A5A039EA9BA857C26578C8D3650A6ED32411F26B3
D9E50DDAE88E34ECAF5F6E49A777D15DA87D810AC3FFEDE1EBF1155F34FDD9BB
4E925596FE4DDA936CC61223A6463ED0505F69FF85459A658EF4AA3557F832DE
C8817DF9F5F1B4DE109C3E06915E3461C79E71BD7FE5E527B4FC3900C42DD44F
3D393FC62DFA07074E9560A88F841FE13510E5180B59AD5C1B12A1E790F7809E
B1DD887721E8B3FB059814C123CA62478537A6492B618815B78E7A132A15725F
6C5B800AF66B44344F1DF681219626C8FE4A3AE384BE3D9ABA647142B2B8815F
321407ED2E385138ADAFC1AC17B04381C6754327FA7C65AEAC1A283A5F8C19F8
D9264ED3E1F628D7837DD60AA72A8A74DF479706600B58A83FBC8DB8D654C0B5
6D514C4F791D4ADD94C03B29B8EF5B8C6E1FB46E5C40B1D2D23D99FAE300DF85
BA138014A4F744CA3897AE5E0C66DE09FE538B20D93D2338CDFCE1F3CB0E7863
E79AA792B335CB8D729780CFE14ED5A1031F84BD428DC3C91D5F05761322D36A
94FC92C81BEDEFC264408C6DB1AA29867BCF8BD9D7BB3D97CE93D5063F7D87E6
F759A29F32ADBF5D37B697E1874A334E9CB20A617275B4BEB257C6238D56A1FD
2E9D3845413C3602323512D5D98E29A6CE6EB31F175724D3A9AC712D30EBD40C
7BECE058645C6876A647C19F9C697EEBE5062D720A8E05B319FE16FE42ACC4F8
B1F8FB7F79E9D3BA865B757E8A132763F637266B57E210657C6F7FC6C2E9F820
D2B1C9B1598BAEF7CE0226917D674ED43A0182ED03A0C89B0EF64BB3DA65F519
DD4924475D42C49D186CD60B16C94CF8AC326817CC906885AB059488A06284F6
AC47CB3022D3751E6B7123FB71403E154153027412748E3893178EBCAE7F5E1C
2AF64EDD2073883B55990F210C11818D3575FB13A916E3197083C64A1E298574
764E076EEE81285FBB3CCD86DBC5251D2D384836291BF2A26CC105BCCF12CF0E
044E911F74366983E8E82D4DF1C717F60D000EA21999BC05B9D3F253C0B613BA
6B10B24C7F82297BA7530C442B5E22F23C7CC8F7E4622F9BA31ED82CC4A183ED
86D278180D66D97CE9B52FE5D491DA1E51C0C8B947175219DC294964D501CAA5
B867EC4549B7C243DC396238C498E0C3E44C0CA78E9836A8F4CE959B419528B2
83E03EA02F39AFF37556536D462FE383B1757242BE47C2EF1682A05ACB1435C4
56501A6A85DDED3705DFE13EB7E3AF75001AE8C8203622C72908F3390CD1BB03
2CF0DDA97FD7C35218928C48545178CD514B5A0E4C44FF6732B5B95A45847D1B
DF852FED978F55FA024E380036EC605313952366F3C351EFC4332563988136ED
71848D2E7CD6B766D4F3E1751C3B528D02B87469EA1A7A7FF7F93ABD95738928
4A9FCB3E8B92F3A58F78B147CEB89735647EE159434E3AF6588F47FF97218B8C
4BE682E5162DC70CD52C30C67B52B16D78473322876F6D774D8D275B5D7E5A97
81B2739D42973FA53DAF73759DDC5C6C5A4AC9E21CE0ACF1C02A9B72F3C264E7
9FAAC1CB7320494E2AB777F5981D2AF6FD54B8C1638820838A4C95D7EB3F7FDB
5E41BB1C0A46FEF16EBB0A960FFCA2F0BBC8221F5B71F51DA9B563DF30F06E69
DE565CC56E0E2A297D7320EDD2F1CFCB94438E9293593279A7B0C585BD959FF8
D0CB69DC465F32137D1B4A8F90B14A7F6ACD76361FFA0EBFCDCE08ADDF149731
756044BBEC21CC0A112E0565D1E1920094A0509510A0DBD662C115F997FBAC26
79BFDF3654981CAADA75574B2BDED250737A08AC29D1F25C3EF360ECC5DE85C9
F339E8DE7FEC3F4C7824330F5052B43E42A8D9BABC1C3DDA7B54BE6D8274298B
686E568B1585A8ACB82C2E1D2AC8AA4208B8A5330CDDEAE09A8D3DFE74FBAD75
F5F43F5198261699583EB6EBD83470905482FE174288EC9F9541B87578764F2F
AF1F0487C30CAE8A871B9627A789E268385070E6B341D02ACCBFEA0148283EAD
2E621FD650A01D43380488E69981F1AD5778B2FD0FC05CB4C628A1F09377B855
501DE293B4D500F009C2ED820B75D4FACAEFA4489F263364783AC9A3A8A50D9E
4040DC6ADF8979C2C77291AE9EFC2FED8382CD07F6B122872E6A35F12379B111
3D12EA40395B415F9565E574B571CC7AC0511ECACD8027F13A067E7F1FC03853
CE5EA4DBA6728946C135BFA75A9EF302027E211127BDA0F71F4DF0A717D1E97B
AADFC61D4E779216FF6451FCFDED1ADD3E2F982EBE208BA9E144526BCE054CEA
DEFCD37AD00997C5E88265319829F657E1837FBE0C3CFF9C5CAD1CB5BA1AF1B6
A8D13F6A0D3E1763523AD01F7A76DD5424B746A66BA0A805CF2EBE2F77E8E426
3866CD683D9E2833DDF7F0F8E5B487EDC7DC78B764F0C0172F32136BC1076BDE
C1F9F3DCA66E4EA6FDE105434845636BBC2B8F77CD1CA62FD7E5AF7951EE5210
7DE4E19B4429446C0981B34070CFBF71A5FD300773EECB517109806DD2CB6704
EBB0D4389D1217080B745B95F5265392E03264AE22D81E75A04AE68344A9F155
2C84D7D262FE5B24916FFEE93A68A5C016172C6715E039F2A9F6A5EB4F570CE4
ABE7C8A1852095D045E85DA10A324EB9EDC15EC6ECBB7011BCBE5D5C08C85264
A5B277852D7DD3FE4DB63D88B16327359D51745FCFDBE437205785EF78B1D0F7
2CE3FE6E475E5D061105933646FD9D64B2BF9C697C5D32A76F096ECAAFC06553
5AB32B2F26E358EDE1252074BEC777212D9B77B85B10B7644566CC768909303F
C1F7F0EC7DAE571D60AC892E217669424DA41D130FBD21BA4CC1F4547D6E3F93
51F911D017A26267E1AA973C7B5548E26597DB0D49B84BE1362D29F4774DA0F3
744E683F88050A9CC76AD73A11DD87363263CEDC7322B6D8D15EBFFC5673FBD1
F0E09303F8F6B6663D3C233A044E8AAEE91E1C8A867E2D2A25DBBC9A1CFD7F91
C22134974E27D9D89CBC802B4A9D803BD635C05FC784322B02124415DA5CB7FE
994C3506E6C02DD94BF5D4F96EBCBA9042FA4AD9530EE7A9A7E11D9BD9AE3FB2
150D9C42376AD7861619AF1B9FD874D6095BAD166CB1364A0282850350E76447
9A66194341696E19DACC83FAD7859B01D3016CB710B5E3B6C185648120398E67
E38565455F2359E372DF28BB7DB86376BC7F7708D9DCA34A520C8C0036E35125
E11CFB8F1E397508BCB97A2A87578ADEBBCBCAE0D1C27B5342D62B68098A7C22
BD843E8E452CD8479FD479D9E3C3C95C47088D3CBC8C8A942A84D849BD8DDAD7
5355524454167D9A461ECCB66125A0252147583C00360A382EF21A8DD920396F
7F52B7D55F1503712F8520AB299EAB77CC0EB53BDCF9FC767A18B14A24161D60
569ECC2EEFB7B6B0263B8B5CE6EE63CED9F8900201E8E4467605FB8B7A5143E0
EA721DAE16CB509913CBA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1B2966E
5DE161B8DECC065CAE2939F99BDF7D2DAEB9186E21BE40C214E62974B83A5A5C
C369CE9F3DF01FD6055457848ED153FC699BBDC4F2D227B7A94085C657D1C6E2
C2CAAE3FC2B4FEECC7F8F63FBAE0648833A8A814E536A56B990F7BF552E25EFA
7274938E55FBBF174FAAC6A38821C4F261DECB1C4B4EEE54C6A9D14DC90A39B3
E3C20DD5B8CA978D6AC89C5D7D115D20015326BBB45A5A150F108D730640A031
D5E76B5A50B324FF8CB6D2794108B8B07A6697F6664AC6B6C1F5650255776305
892A6E3CEFEB0DAAA5011FA002E6C13D9623AE2DF25F912B8E41E62D4C6AA42C
40192634B360C4D9BD88735ED4D83C12B8FD40211D1F114AF6C6B54AD528D7AF
AE4A2886F5EA22B0E58E41768AA815396C31F0A44812EB0380609942CA2A69FF
E5B7BA5722421E932D08562CB010C689FA7A1754C6C7CE11E28EC98108F64215
AB50A25053AE3704CF829BD1B8B1946112E1A28159DE471E7F9D693F0FC03B0C
895F28069204A3FB1A0EAC9EEB2620FC79D7C419BFF6F3620AAD09E167926A63
C1587C09CFB052316D4D96E57440D0CC6DB88EAD95B87035A3444D643B1ACD11
5FDFB8CC64ADDCC527DF9C775D6F86C4640222DC394CB7CAB104F32FF3156716
BF9D93C41B6028FC2870E4E57BA1B4773094EA19550A4DC7EF56F0BC4307C6A4
AAA30A692BD60CF235074F063CCD9ACC3C44B5755DD9071DAE1E651ED94B4CDB
4B571BABF9D3D0CBFD6FA67EA6CCD740525D51D713CC6566E05725DEE581FAFD
1F33A85B6169D4794B1D73940EF363C63F84AE09FF5C7902A238A22607F158FF
E415CF5D41C892E53DF3AD9691D42235572F67AC5C0B20E59F6C6D0B76A496FE
37B34D462E79BDFB28B4401DD4CF5150D20739F5638F9917A41081B83612B3EB
27C2D8530D137195F6B9368142FCB34668AF303A6455B248FB866B91100D8223
1A371B2A470A2AF01F683AAA25B2BB44131E040F73DE2564F315213F7D17A7EE
4B34B024B2778C42CC48D9A1FC92A5039BED5F5C9B9770ABF579FC9111B3A059
EE56F352334ACD0AF4601369783A83EE1F040CB6D85E418650AD20A77AB23C7F
16F5BD0A9CCF307F6D7C8489385864B2CB30DF6E62F4C135D31756C2EBD23B16
BB126AE6231E3C48243AA2E95DF0659993DF1C0DE066FB37C9AE0B707390C2CB
C0C271B9B304F156053EA5BB4ABBB4CC5C7C3CB31E874A1647684B190468BFB7
B82C4A4AC98248C0D58F0CE987E3D86D72358F53C5E12342FC6EE80574191008
3A065233C00C079D7FF5928CF1AF83F55F8E9FF435AFF83A7BFEF9BEEC854EC9
12ABB8501FAE2EA28F6657C76F77B64D605695615950B45A60AE11BC1FA14F1F
E0237FA942F76F1157480F336F734521FB0D7067FA57B561F745A1E86953865D
451F5B002ADB5893C7129FC3118662032D05CC768DB05E7B70CD62F1B9FBC93F
D42447B49C723F43F3A8E113ED7AE479D0AB52B2D60708010670335212EF1FCC
3EC47D7DBBF0DECD9890896E2F250369FC6B6F5504B4E002A992E2515086368D
D742A0BD67804B5803FB9DCCC6342F21C8548684A88FAE3535115200C6D6D2BC
9DA0BAB7DA969E929EF7CAD185DA8A80553F052F97988D4B276110BCA39FC10C
76E65C6C61074320443A855CDD8298F94DB4334198A7C19C38F2C2F487CA8BC0
696574F4D97784BCD075E729CEB6B654F55A192D587A2826DDC53126346B09FC
6FB76645F4BBCE60EECEEB2B7B9B392B5E0ACA15C2FF5F979183F5A9962D953A
F02C2FD19225D25382E07A033706C8312E79EBED8E98A4C8A688068C012538FA
61229483FDB1A3DDE73023BB66A4AE15A222605C2D9953525080F22E2CE6220E
ECC5F186EC036F0201CC7CE50D71443820E72E7BCAF1EC95C2133B220D3E2791
E45CFA7F4559A1F09897C951F626E4EBEF192F0854EE1637B55C8563D0B83027
9F25987C461AF3F1EDF57A41375B3F0B08E9BED0FDF83EDA2FC20EF7B323D3DA
DF42D431244F0A759F69D60EF7062955D04731C461CD14359427CE75FB0E2B46
B3E57B2E15F34330B8E71F816068081D325833AEDA96C0DA8C378CFDF823CD09
B4F17FF2B810BDF2D369935F062BC322FB4A4821CA583928714F3FA3D08D08C1
A696775658C5BDEC3A9F1990A0DB13C2E33342D40AFEB24E186AC111E0FB5756
B198949FE7C59B1F798BCB0576672A693BE439E84F7113FD6D52BEC23C21EC0C
0FDE2375719E962F3381CB37FCB36482DF85E9BB4725630BF0B5CC539DB2E259
88BFE7F399175DE7D08904B7A508E489571C79B40280355B43C06B19887EB524
D6E65C5726EB9D729F336F276E64F5C86707D726E8CB6510CB7C057C2D55F381
E84DE64ED200494B8AE9CB3B6F78899482D13780ADA6A937C4593B1A8DABB9DF
D465CC454484CDA735B701547B5818D8CF2E912DBEE22944E6CF716D3B3FEC17
8E292AA426D048C4DFAF41B77E0C77F98BF02C1CFA6831E1F21D39958E0E5034
5F764B36FBB24DA358D4AE497A03E39BC2642702978B73B0322E3B0291A237F4
61755E5D77A68165B99027D306D83F6AB077C1EAA4BD5466590B9B2CEB0C1EF4
2FC0DCB4B5551AA51F3FADFD7E2B2575116286D1C2A40545F973870CBEFD57A7
29387C6E48EFC3641A1DC59A816C933FF53196747EED4385B4BA6D903E3DBF70
0A77387EA8EC418454129DB8756E55BA2372E3B035D28F3590BECBC508D4ED05
F378B26E3D7A2C72B64493E5043685A5A66E5C53FC13DAC48D353FC68A770143
65407D48C1350E58ECA8C11C6AD9CC2D30C7486438C4EB99365D68F27B9FCC33
D2CF65E56963A758EBCD38F57552442400959A62CACF59F5D4A1872141DE6FF4
845014B6379A7F72F1879084AD33715F663D97F370141456A5DA72442BDC46D8
62F6C8675554C7E604231E3E61D172E87A663E50D8FE4951080595B10D9F47DB
9287A12F77AE150E4FDDAE8346CD6B190A985F89A459C6EB24A9BD700BECF6B8
8D1F1B777D95313E22F493A53C3C1B37341F96F2F8FB4CD2BE21F9880086A6D0
76473DA09D5EB6334E81FD2B536C53C1E6FC970FF6310EBD4306E2D9D1D13E30
3C932EDEC2896A91BAE0A75988ADBC792656B858C0919BAA073453B24D191A67
DB235577B68003BA14073E2702296B284F8035EECF63E7526A427499AFAF4ACD
6C6A475373979424F012D41F45D03D5D37D781421DC5CCBC42782E8F4F5E0D87
00570758CE347F60D3830085F5B2B4D380F11A63AB691F3386935E6A69C5868A
268D1D3E1D71D757DE1537A4A7EDA571EED8BD7ECF7829B310429383B5497FF3
9E7BDB36A224FEF55B06A6036ADD54CDC87F9D2587664264A7A1A2F363888E2C
465AD7B95E7641782E3298C0CD144F3897306CDAD972101182A41616016A7C6A
48F5A680AED920CA5BDF2CC4DEF46FD4A183EB07660D60FE40CF0CB0C9274D38
D73921F3A811A6C64C5B527ABF1AA4ABE89872706B290B8C9EA925AFED9C9A2C
BEDBDF024789D3CACF97B0D86FF2BC399BEAA86FF6D34DCF21BCB3B3D5345299
B536DCB10CE7B05165DCEEFA72DC1B32829A183C70AD8CF7D678D9916169B2F9
C63246C6912604E6B39C158B955F488C37D4A5EF7DE963C2420A0A08320520D4
4E7129C612D32ADCAC98FB5260D1C639DAC9F6A3D650579C2FC6D6C73ED842B3
3A939689AD59BE427F4C91C807F1A3B23B0DD937C0CBCED5F162EA320DCAC9C7
9BE3BA370215A15953B841058296B4C08B0440D4C0196027C17B8EE71D654F0E
33C5E5A8054383603F7E7065EA1ACA0B22F411E04AE47B92F8CBA5384EE8267A
B123DD8589476FB3E4CCA0AC1C9FC47EC502880C01BB1A762ED37127DF2283B9
05B9CD7FE4F2F92D07350B48F645B799A92B58734D8F1EBBF10A7E363AFC691C
9F8FC68B9043740852B4CCBDD37BF728E564821765E9766B8E2272B3FEECC7E1
48D5FDA02F3A6FFD579298AC0BC9C73264E946226627968FA8AD8EFA4530AD6E
923A46F772B5E5698FC7DBAF51DC2CBFCE0781919E026C7C9AAEE0BF09A319FA
EBDEE27D69DAB92802C091E28EBE3EDA4CAFB3DAE3C39B1E9D5222A83F9E39E4
E85D2D8364E1A2935F3463195DE95A253AD84C9B7EB6D776EDAACF83E9683ECD
6C6AABB289BC700B5EF5835B8486AD989A8F17CA0C871AAB3CF16015E2B1785C
C9CE17A2174039F59776D65F0A6D9E5088AD245098A9CFAE5B426AA2A4BEB17C
11463A393EF2F9C04C700FBB29DF2FB42CBD2C4E2EF1070EC9528F0BC7ED87DA
4B04088C5EFA7B5C9CB0CAD5FE88FF780E752C4FD8E749DBA0FFB2CD3D56FC31
B227430CF55057B0D3795AD53F1ACDE16337DA45DD2E6EF3F61843769AC64AFF
25B265D451B1FB38D9CE440110E7CF77EF9E89E7CFD5C7E6C184E7BB76377E4B
40A9B1DADFC6C5A8F9857E1F4EC4E839E6026974523032D26A845F4C4F01F4E1
5975C89124DADA58C9CDF6DDE2DC59CFCF6E7C9CB506508BA61B65AB48E09030
5A87C5F70C2E005213489EA21075A3BAB4C48835820024AC30EACEE40AFE2068
FC618945860121C4BF9C5368593B375DC205CD8FFD81E90BBF30579F13EA06A3
699B15C9ED69D045E949E25F10F2F48C6D08A7F95F6BFF0F620705D8B675B261
FCE9455E95B57C84214E9F17E257127F69E855D69DC9212141AA5E0D9097EEB9
1AF7DBA4DB08E718056EEF9D1D01CE2755C4B74383FD094BBB217E12AA379A62
EDFB1378A82FA82511BF1887387A293593E0BEAD979398F26FD1680CC331C7ED
D3E4B4C9307C1A78FD23CAE96C94B20AE2F1D147AAB602E9889CA3D2431C5DF7
7B2944603F47BEFFD06259B256CD1A08F62F535E31AE17B3A5F26C726618551E
D6F3B85C5DB458FB55BC72E976F99070AD3FCD958C1EC54B3994EA142AA56274
7EC0DEE2E7E1A65036AB0B6CF7AA892FC8E6E9E478F2EC00EC532870FD72E532
671CF9042E72CC4F32967C57A8A0DD76EAC1477D781DDF9ED17BF1BF122E0579
A84753E92C12B26A2295E900D7206F8293785364A5FBF91951A6108AC1864C96
8DC394CA300DF3C5A3E0FF835DBE2AC7D6D521E9D0A70DB9A2BCA8A15A617ACE
DDE157343D9B5F73A28458F167602207E3F017531D8DAF13C5747B6412A342CC
F58A2AA32DB331522B98CDC9902F882F93E8D7CBEDD8B5CD37443C40F8CECF61
496F87923C529DC587C64ED6809376C833E4F520FC63A7179901C4BE0837B980
6C9E41A58AEFA75636CBBD065BD7A4D0BF3338ED70E86F742C3B5D9421E2AF8F
2412E78CA82C7F9DFB6731C02D847D0A2374A0F4627ED82BBB5056886D255C7B
1F1047F47883359E4FFBE3857AF495A7F2B78349D74DDFA29EF38C14A7D31F07
4565A14EB60996DBFE6054A20928917BC496D6AA2AA99F2FD91BC4957C7E8E5E
50D7D4FA086B02F42B2EF6104F0437D55A4BA4FFB022F9A99CC73A8823086354
F120209525EE410DD0F8A3A8F31BA9169EB8426EDEFFB5554DEABB048EB8F3BA
DE166E7A8B26B0F41D7874110FB0AF4CCCA650EA7675A42AB157EC305286CE4F
0681B2FE319DBE692FC1E7660625593487BDD4CD96EEEAA809372D0F7C78CACB
B5CE40F3E843D51141B789F15A6E67A8BA6CF7C24249DA6BB9D621FA514C6B9E
EF4C5804E7FDFBB5D0A20D24A42A590D0A14F56ED1959BD60C7F7F5BFAF84972
05D4BD5CDBD884730B650D73C9ECAFD53217BDC48F8E503BD8B46CEC275D1A20
41D7BFD186D88AB87DBE9F29AE099FB492C3266CC638D2C3C32B415E966CACC4
21D9E0D61AD59DCE0B2A89794FD537D7AC87A594FF69F8EF942959298F741387
CB512AA64E156D060119C53CFC33D924B390FB8645008E5FDF9C86DE6697E604
38DA76A0A508D8A04889082515779292470FC5F08C4BF9E33745C58511561A18
E2CF7390AFEB6F7F9E6309A71C82A089CD2DF109467B7834D15EAD8CAD4CCFE9
2F79019521AA7072575A30992C04D14C4C65A43095F7F0BF8E2E5795683F27D3
2C1B3FAC7C61DA6E683693241EB0CBCB1EEAB6E9391170CD7EBCD51C597C1AF6
102197A1C8714E87DEE3F0D46D2E2BA4F9908402DEF9AACE7BD76B3D4A244E3A
C7424BBEB993111FEF38733C3527515538016F8BA6AD48DD09A3CC53A8BAF398
83AE261391BB667719D9F90D4510E96D19CCE73F2F56333AD234C8292BE3720F
21CCC228383A179922D2AAAB4C6AD5613E10A96FF8E3C4E2908090AF9693C973
462254BC1B1501FE22953A7743F87828B6087532E0E981F879B79440CDBF6CC1
4F198DBA7A8AEF9D36E846E285C4137E63A00A3F971043EFD019FD2F2CB3B330
D7FD29852913C5BF793ACB714F9B797B266A864F70CFA9D08495FD52F82F9BFE
C9FF3462A4C0F77645DD2332DA1C884762EEB3EF660DADA9C04B5EBD29A4EE05
8E684AC60B650D0B4FECB6021EE5AE710302645C41AE776F927C4FD3E0920790
A57DAEA08C5B169A3E243C8248E705290566CC292B070FBADED5A15A8FE42169
86B734701FC7128048CE8F2291AE97EF2C4B2446425F0674C71D425F9409954D
F168966159B2A302B801CBA296220D6F22E851DFDF1315C0679C0906D77AB214
4E8544DCBAD6F59F50D0EDC193D8E54625E72549B331F99B20E306A23361C0DD
06828CFB7991365B0DE01F3B42F7607E7E94531169CD7436A61D09DB2F5D3E8D
3640E5C3E0D995373CB0F8C088F35F2CB696C51679100212026801B5CABC5928
AE68403AC7D2174BADE4B196DE9E61C4C8C0FB2F3A34AD00EA828769273159D4
123E00A6BBC08F91B71201D625F00EEBB6FA5D427979ACBF85B44CA9DAA3CB79
A6FBAD1E171AE3D8D4277E0496F0FF797C877B759B5160029C2C808865F2E4A0
183C3F12358E664428B723D11844BE36E421823C6EF7A34037F06CE42522FAA4
252DD820081E3821F226D8D45B9E0A9745747E0C19682F3C6FE22E584B1197B3
CEF5DD0B1376678D381CC4707473437C06B83385AC9411C3D47D893F2AFEDC6F
C7429B2DFFD98E311BF3DB0D2F8103C51CB9F50407BB009FAC385340EAA81259
21E0646C0C76B875FF4244C48421238F71836827211B879B0652D79EDC835375
ED3E2DEA45A0B5C75D5B24CDB8B7144642812FC3C2B9A4AF02892EF579A535CE
2816498D130303EAC1F421514702D2F0D17821A60CED6694F025FED299C4C7F8
B077C2DD521BA43A6A68E4D42CDD2484CF47C0FB3A68121F4243E14AE61FC357
754093C51EBC67E1499C66E969C0D0E903740EED7A3B6BF6112C35C2953F4A76
FC5F90AA018F3F9B78E669300402E5DB75B1683103305C5A43ED712CB85C89C1
7F507FF94133927748F577CABF879033E1FF40D962C1D23238112C153B204553
8C9D5AD428839C635554C7E604231E3E61D172E87A663E50D8FE495109336755
87761AC21F5ED179AC834CCDCD90581DDD15313039732EE5CCC0ECD9151B8114
E865F16B9F09DA1BCC4E2D7C39C3521EBE7C549741B627A823F2B82A16026F93
E435E60BE83D8AAB025DD37D558C37D51209A50DC492B2BAF47B290A01263D43
2868618263B265E238F5DBBEA1B728D27C8018BECD829ACB6C3D9129E976A242
7FD75324AAF53671ED0D84110670483EFE13BCB89E89F84FDF21E46EDA743CE5
D7BCA65AE29C4F00F2FB20F2CE15FA49CD7A4D0500600EF954CCE1A7ED40F1AA
5867DAF79F9A8FC9282C13741A755DC615794571972FD93DBC0430146B66C6AC
37133B518FE14EABFFBA280CD8260B82A47FED4B8B1946C7CAEE37D8B823953A
A248937D5DC6E599807054A5199212EB0F4A00A37AA3E5BEC4C49371FA980DBD
AFF561681D2E5567934C717D46586B20E7D9AA653445B7B313A224E1B8A802A8
848237D0C8FA2ECBED729B4CB7AE01D7828DC5D01EDB518C4585B589945DC824
2EEE8BE3DFABBEE51B858A5B9C6AE18156C6E9F2844D17BBDC170A6EAB585160
3B257F16070F955C35FA46F719B503CE83E8D26A0EACB0C1F8D931E812477F7F
A1E96F324DEB1835B5A1EAA58C8E138AEF87F96FB90C5F9D65B2C635044148CC
BC64FF5416E48A5D84E34B7576776BB5BA26CEB198F362FD8713C920F86E8DBB
441979C203C6D210C162948DB77AD011EFADC428DEF51F85E19965690FFC98BF
B027E54B19C52504F6515414556748ECD1A784C8412099C1250C6DDD43E7F7DA
74C1C018F92047DC2A9A086C937CB4AD6FFCC1A7A9658175D31CD5098CED4839
70ADEAE6896B13491C79A05206F1F3DD9FEC9D4805999CE7C896F0CA92E5ADA6
5D49209B01465BCFF19581CBFC648CD35B1E038274C6C4725D877312259BB09E
0A6C8A6141EEF4B9A359FF66D51E8791BE69388A7AE3163F3A9090772EB7A951
5D1A734EAD6EE3F026AA8E8020FC4CC50D7DF073C580B0F4C819E5A6D085043C
9B2D8D3703FE875D7630D08DFFD16DEDA888EFD292A2AF6CCEEC2C722C9D3C5D
1F7A8331235555
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F636D647F334B648E11C3
659BA4FA71AB8342608C30E42BA95277382833BB9C14C6EEF11BFCEAE9139B89
256D5E8FE9B80F6DB3179657983AF5CC8F3C7EAEE084A74558304627D0C03A01
2B6CB42DBC8EEF10FC8E83696D58F0CAFCCAFABB836E9C1C7887C42265DD4193
C8618501A7FFCE13919D15CF5F00684B37087F633AB4C7B25FF2D7D54B31D2D6
96DC1E52C828A7A1155E6471DA39E1D47F152AF583CAE41F7F7FE0AA3F1F7DD9
175A2945C257765C4801FB768C6188F02FF2328F7D5B493D274CFA840BDE34CA
C6B57A04D9EAE9B90595D133E0CA2A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F
9E367C4D358692A287F5074A8C01BA5518911789F7767BD01F00D086DF326D7C
A50C1EFBB3AD48F21DC7670F524682E7CE6FB4EF66525E8F15F63E8A9F64DB78
90533FDF90C51ACDDB5CD7B1CBFAF76EE833E519C3715CFF2AC7C25F0EB8FFEA
273601D1E82984B8AE31AE343F37D03920CFB83E2DEE7642AA85B1615F9CBA1C
3C3197223C9F0D4AC9F585ACD311E1BA537EE424CCE1F22EBA8031443AC094A0
7EE8CC94D559627274D5026EA0DFDE5F67ABF5E84CC6B6717E8B794AB2DBFDDF
3A89648C906439A91CFB1AA195D9F12E03463930D05A3D71E1E9830AC1A31C2E
35BA7B396815CECCA18146C96709CFF862E8552E4FDEB7767292AAD81E5B4186
180C7D70697B73BFADE926163A5780E71276C60EAB7E25C124964778296D06C9
02559B89DA648B919EB362176B83298EE2D8B405DC67F2F888ABC36137C2137D
E0D7EBBF2323C750C674154FC6CA853B13A2D88CB67CECA9A1D3498D569DE012
062C1B959357A2A5903A5BA40F8E6CA80916037DB040BCE705D91E61D6FBF089
4C659A61F005C6FCE1A0E9700362C58C9FABCC46D24DB46E33983DE9AAEAA7DA
FD44C991F74087597F21C39DB6A2CA7C80E5410BFF7EA073A18DC2F6999DB161
EF7DB88DA4B0C592385D35F705BC2A9B1075F1B1568CE34A4F7FC812BF766372
E6F0277D8604E72E2594DF545E359F2932DB2764780688C794121E4A50AA7CD6
479A34E1B75657B41FFDB8AF1C9E3D3CE95EB410E74A1A29DC16D7FC12AA69BB
C23F9C6C4B24E6F0331C3747E378ED0C634370C3BAFFA2F1F9A03CCD801C4E1C
6915BF41399274FBC801C11E04F0F273F924236FE35A6D73F229FB0864FFE4DB
AA778AB8B6A72295CF4EDFA47D5E543A29BE8B775B8524F917EBB9D8C296BC76
2A318F8DD86085F6CB78702A72472D74B184CDB743905273E40F13923E0F215F
8FCB39FA008F031388B4A9E9F2975FAAAEAFBDBCC51FACB235994219E6223753
B1688580F301F831586B454CCFDE1C3019E40C91990B65926B7760A2ADB9E004
A33B77C8FBC62BF3E7EAADF911EA498CAD90EC3401E7E09654E59499DFB80CB7
7D148943F3EA4F8D4D72C7309DBC0BA9D316D5A0E49CD94C3D30DC28E800E0F7
240A3194AD079E95458730E24B94224D6D639B0FA57F73F3BD06D2758A35DB52
0524F7BC44B35F82F88C25A045867F2F981336F4467D159BDAFA098838F35539
99E0B3124F590947C0D6439FEC5E4ECB9E7FFE81A652E8B7B1DAAD7DF7CA1BA2
90437D557FCB7A1FAAA2CCD5889333FB7750933EB3D269D33B84CDE42B042010
5C285FE8A67A5F1C7E5E5C7FC6F8CDB0410670E527BC95332DDFB6D162E29606
D18F3A50BC7BB215326F90A5348B08B1A68F8C1D871222A5EFB28FCFAC70D89F
33DA386A7FB56A8901E52764F640BC7561C1B6DECA5F958496656C121C571031
9A0B54F393DA94C79C02736FC1815B7578D0CC66B459B963147BD7D42C2F3D10
31EF99FF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1
B78BB131F06294B45300705B786BC0D0653933C657D716DCDE61AEAC6DBB9F5F
26C309EC6AA6E4BDF86680F4004C27DB20FEF95B0BE467B5B7F436B45DA8033A
3F755FBB8515426BB432CB6210B93F60C98D1DBC60E48CCFD9E1AC3BDDF3FB69
A81F2D36111B48751416C9EB562F65C3DB7A4AB69D26B5BF8D90B5758CD7435C
20A34F783A4273244DA0E4AB11C078B07BF2786AA78EC0527660082810DD4D12
583633A6CDA00B353267B2BE5B8178E6B7889A33771F86276E6F0FC729A9B845
FA4DB9CDCACCD1804B9444C284E42F73764E076EEE81285FBB3CCD86DBC5251D
2D38483567AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB26033F03C778A1A
810DCD869D660DC33865B7E7C25820CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF
592B0E0A571D8192A287F5074A8C012E6AD53C85A735816E815777D18C511AE5
913FD38C2705B78CD907457A5F085EF70FB8DAD2E73F158978ABC35805453F84
CC5EEC991A5CDC8C33DADDDF82939669A03C2A9AFA9544CC0C8E8B145BCD2D46
280FDDDFC1EE81028E13027F26BABF3AE38AF0FE01279F319172E380341CAAC7
984BF444AC5EABFAB89FBF8430C4611B33767D29F06AE02C06A97C3D5DBF67E4
84DCBC5B8D181BA465EBF86C3D7D138B055A428C37CBCCF98EE1D718F90E93CB
3C94F88A97391159BAD4859E93FA1E34425EB42114C732C9636EB8C9D5E42178
650D3F8BA9F4CE9942D5A2E34899C409009B0923C59674897D2BF681774C13C8
AF0A144C30A00A6E010B976C54DC60783A839A0A350CDDBC615DC3FC7DEEE770
6D0C617C71EA07C966CE65D512216CECAE9184C1E385D7950D65C195ABF58BAB
1BD6EAD05659ED3D07A65252B68E85CF080DA0F8219DE6BCF33F4B8F480C1E04
AE494CBE7A6A110D67CCC793AD7BA4CD269CA625D8A04E8D407C27BBBE99C4FD
27A53F9A952A1CC231D1546014591E9D9F50789698F02E147A48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D6B61B5550B362D0E2F84C305D9672FAFC82
D1B9423D48BA4F8968C575ED30C8A88BC1DA9C7B016BD78E48AF905824BFF394
34E3F7588BF0814D39DB681D6BE7403DF80F66E65564BD91E07D49C8A226BB69
1DE952C3C78E4A6BC9AFCE79A420946ADDFEE44DBE0218ABC12DD547B394C7DF
28A190BAB9326EEF9F61F04580994B5EE91C45DD0AE3299C87A2187591E7F42C
3CF6E780CDEF8E6CE1051D1F85618EC5ED55B43B8EF9DCDA92FF0C890631DA9D
AA0F185E7D99E0ABA1EBF44D7C5D4AAA6E2A79BD5B4D33EED90B6DD04F0D36D0
C6DB0959FB94240B438B67B6C474B75AFEA18EA3B3E1CCAE874D2C37B6AD9F9B
A7BC2B0D206B0B603771A27B121C5E833A8174002F401FE47E5D8CDF584FDBAC
AA5FE65822616E07268ACE65C6EFADB667852739E02647D111A69CAEAD09BA79
0D209F321D7FA34172BFC50C04FC2A6D8B6286A6C53E044C5D225E0DA3E6918A
2E7B4B9489FEFBCA94246FBFDAB3ED718CC8AFFDE2BAAB56D5937DAAC628429A
47EB1707C89BE13AE1A7FB3ED742D1BCEB2426D84375718AA931E5FA13B644B8
84645DAF9F4EB360E7A44F7EE7CA9C2CB80D9EF1A6AD3FCE5339E173960ADEEF
68329D5CAE9EFC75DC15A9494E876104FCE2AE60AA436618C281E0A0E3B3A930
3CC927663E40FC84758C66FFDF1DC8DA2E05CB53340A4054B02E8C220FD62745
40476E3BBBA96B3FF82F13A246D7A1775159FDBE6A5E05F302E15CA31E9F3666
0AA3F1F955556FE08DD26E0EC1C981E7703D9DFE30FC3F11D35466E8CBDD13F1
D5A0023C7B41128D4859E7AFCAA163FC9960CCFF32A7372348A2255187480B12
44D999AD420927993D1E3D64D048CE34560BBF01C461E2A4BF707160EE6EA3E6
E8FB3190B7E1BF4C2BD3DC8A8772064F864396A0FAE044D3C8ED906B38A3094E
3DCA1AF7414284569654399917534D94483A59B739F784CB308AD7FF6297A5F6
CA68E103BF8828018E26604D6585E47B1DB784435B7ED889046EBF85EAEAE51E
4D7B8EC341F738F2B5548B9E62CC54564A69DCBA5155F6786FFBB9984621A5AC
C9E322A112B427CCFDBAF7327F4BB5A9B8E0C4734935845B44538A8917FFC77B
69D538E9731D8ACFE97EEEBB536527D13E789C4D1AEB51A8612828DED34ED907
8CDF0EDB3A2C7866C977678C571CCC9FFFBCC6BA84E409650E9CDFFD63D996E2
5E5C0E0FFE02BBE678688B95BDA8F401BC2AB34B2B8CC71EBAE8F6D2CDCB5056
C324BAA2C7919C7E116629E963F00FB88D10612C5C9614AF82D00B6895632E14
BA86B1F60CBD8B640A11BE0C3F9CF0F3B9E559727DD5308332B7A223F3BD15A4
4362A10F1795E0780C412A606D33C0739E18CB4849B3E0E8D46A3090B42801AE
7A97DBC8BA160E649D44399EDD9E9B893820416437F76C29622F954A4B5D7AB9
4E4C153F264048F377A11D08F846F089661E11898952F1317E3BC8F70579EACA
82C64B7ABFC8F6C58F596DB80B4A8BCA33E2CA12037F3F4926F4EAD16CAD30ED
18B6F832E45704E5A2A51FC399E819773C65D91E8B28382FDCEEAA89A3E0A6CD
429A2A519B8EB91958D7B43EEA506E0B4A36A18E25B5BDCD75599A60BEEEF61F
7273B23833662C05C23C5D0B2DB206A6AADA625269DD309D8FC9F32EDEEA07D8
0E163B84212728C19C09232F7AE51D6624C8B15D84C4B7B18AA7A026CFB21934
CE02113E9BBE04B9B859F23A60536155B840DFDAE7F0CE226EE6A4C6526AE5DE
9D2B2A004342D0B05283E667C0CA72396F8A1AE9DF20F80EE9BAB6CB855C94FC
C02CC2B2977EE52C61D64CC6CDFB1B830A5822BBD34D08EB7FD43DFCBF66F347
EE1D6DB95461595C9938581921663D3C9A9E1D924CD89FF87DFBC5B77ED158C0
EF082D34EB28625EDA3D3CE4E46821457498301C03ACF66F2F7ECD4D20462258
D5DFBFD7DAF32CEEA2096AFE70E8026A1D8F2F796E97E492D77BAA5654806C9C
AC0D5C461D983BAD18079A8C1C34FCFA63CE7142DD70875A554200B56497589A
27735FF3B9EB0A1BE8206426CA436FBE5F80E23A8F5206C817E75FD12153EF75
A00DC20E5E0FCBD81E0308986556C728BA46265C2617B2D56DDFD991C001C437
B231507FF515C5784507F7DA1141C2368EAF513D47C127C23F603C18A8B3B188
0A33736E36EA3E0AE6D94408A45E5F6B12921B80696C5DEF9344CA2E9C00B041
913AFEB4E45707032333B2192244DDA97AAAE956C340D4B6F08A87F4D2ADE310
130E0682758EB76975A74A0F767536B5662C61BF17C75FA4ECBD78008B0695E3
0D3477255EF61C590A8274222638CB2582F75CA7F1BA6327B0A39B251E106064
21B22BDB9302337CD98D1F23ECC02D3B718F41E71AF19E04086D86EF34DD686E
BD47A517BB819BE476734FBCA8EDBFB3CC9869F5BEFFCB86768D0C654D71C189
9741440E8423E5DFCD5FF7BF21EE316AEDA07CC4A98BBC9E92F80B744761290E
8ED0E49466DEE887E5C1B58D6C1A9D5A4E40821EE8089BF5521A19117A0A5BFB
D2A97B4D2CB1B019FC4EA512311094E29D5FB9364F60A604BEF0EFF30EFE00E0
5C08AA50EABE80BB1819DF7E2DFEDB8F10BE06FED538273CD29074D8210A3058
DBDBC28B91B1C2488DA5BF0FF3FBB3CDE8F4950A0B01DC92EF20C4D928F2E50C
CE40BADF149542AECE7E1FC3DE57410DA12E707F36C2DD237344E59E452EC24D
46F92C99498946CAB6DED8F5DF054006306A430395489A5ED95EB8E3E305DB3F
493C27EFAEDEE4C13E06F1086EA20848A8E5E5D3DFB2424B7CC45145CDFFE6E2
6212A073EC154BA126A5C0F635DC7FE4978975331A8FB62F312B7D35CD9B4E9B
7F733FBBAE7E723C2668B7E3840DA5A64A70AE846216191026A9BE5C6B9AA0D1
E9EE8B39AD6FD0201D1E7E2E27FADCF643C0D7CB15E2DFD2F644E65E2E074B3D
3BE38D9FB4F96C2C54591C85D37B4F113B1A507431B6EB6C47AB4740F4B704F7
641BC26CCF0037586FD15B81A40B9F9963FF71FB273F99CF9BDC03B195EA47DA
1051E1E72B8DD209DDDB0964A51388B669C597141ADACC769E0A35C0C57C5EE6
17C78A61EE89335F2E9ED046063D6E166E5BCDC33EFFFD392924E57ECB5A258A
291051C7A076DB74BE5191EEEF657F57B67B7A30F199989A9D8015A28BF09B92
6DFDE5F394A54086EC1AB27CAF772C3EA9C2D391DEC576BE278BB95ACFE243C7
7442F41C338714CA0EFE6FA7E1EE63D218B92FD4C8C69FC12F70483D668221C3
D21B072AA0B8373C97DDBFD7445D1E1121A40DD44E6C1F7AC9E31FECA53748EB
84088D6D1662A7F79A91616E5D117BBD39746E2C432C2AF2E86D1D6BC57F333B
83B6D1CD3D56DD3FA494E5B2CA224852CC2480DBE5D8E384CA3C4F4E14B3C9C7
5D027348A06F7A017D1883C61EF0334681CCACC5D024F39309DDAE722EA81F63
5AD4656A8411543FD8B3DB6B7ACB32CA6E4F4CB092BB4E415EE0D7776B862FEC
DEC691CE30F65D091DC04F7FB96BC2C4563C7D80C0F466B67851DDD3608CB8EF
015C2D7FD8486C405A26A77DDF63F1ED7C65C9910E91230B9C7606CB953B09AC
E65910521533282982BCA555DD24BF3CADEE7E8C956454650FC6D9ECFF2EAD23
6224137E1D47B1B478FE28C2CF6A83804C93555E4C7ACFAE9885399BC5C25112
7B69C0F9402470762EB0A14CC90432CBC330E50EE06F4FE716D26EB4017C11A6
30FB4554A28A227CAB65E8F6DA0D66DA468596CD53E79DBCD8EDA9EDCE84933A
4779DB29211D8900FF6E708FB49C405C2C6315A98EFC76E3D31FEC0ACC009449
221B4CF6C04902C8B5562615168AA458EAD2F07C2F3F3450043B6492C07CDB7E
E5C2F883659B50DA23980475E02748AE1A891F5B01C04E6947C11ECD37C95594
61B078C8215B9F542D8110253072365A932A3B5713613155F9849A26457C8866
F350087863151331708AF0D806823923CEA6F87A9E34231A3D2EE2587AD0D3D3
A48714EA217B591D115579FA3BF2C2CDC318ECD5652B7FA2CE2DA8FB70315526
C9B0141A5643D0F9DAF13088E1BC59640E0336424602EA4A30205760640BB177
10A5ECDADB2CDB17ACEFDE8AA1B611D88439181AE77338F7A45BFF3ABBA75B3C
5272D5BBD561039F2291FAA610FE8C4CCD57A7A8C9F5071193E20E3A40B2C4E5
69A1AF7B997F72685DAABFE2728E8C858A16E297196C25737D3DC6DD65C90A8A
1C2ED11A53852E6925EBE86D98234C679A1CA1503EEAC4658CE24F7DEA054DAA
40EF5C7609B7B8A5E1768FD239F48D40506773B7260D693391DEA7CB26D4A418
E48A2989167B7DCE26CF80A64E19314525F5345D90E505AF1D4F053CECAF32CF
693A15DA0432E4E6B15F9E7C2C8477AB5B1C5A25CA301990D104EBADB9DA0932
1173442805CF8F8F6BA06964AB3C41A484CF7B7D56968E9DD32ADCAC98FB5260
D46C7AF1D736B9E40BBBCA4E10612142E1C154CC374F25E03F9179E939E8E50F
7BE4118ECC2CC40F691AE9748D266A1A5D69B3A9B39695AC4C95D2B8073B0700
F3CF51B32D80D89FAF2BD300218B879BE060706CA4081CEDEC0C39DA788E4700
8109D48C9B54C23D6F7DE57D9852BE33CE5105B28471B69EED368CFA2F0B81EE
EE6E1DE6FC82775280C8337FA283BB4340DDEBC4D256E13F78F4299A87DC399F
E1D8CFA559C93999700F1189021D60151436F8BF31F6CDBEC9F61F64A1F45434
CA44F972054546EF70A08F59D9BC7914B43329D65505656F8C4DA01916DE003E
1D02CD57C8961D1E0EA51C02097026083440BE992586D4DC72B74618CE98CD3A
8FE526D171F646510C3E74A33C5E7EBA96669D80EE6F3E05905CCA51B26401C3
07041B711C074A9C05A17C014945F08547DBB905FFA6640689E964FAFD82E425
B65D3F8D5CE7C2A9F04C4E86B3549D56C3E372F126A22A872220273191166ED0
98D144EA03A5D6704780155DE7E7B00A8B99E733AA64B7854AE7727EA3222207
E864C7F39773638E3BD2FDDA12F55759FDBE6A5E05F302E15CA31E9F36660AA3
F1F956011860A53BAE828D3411D613F0CCAC20A2E48B37F8BF6C8F5A9D054A1B
2BED399E780DB66D502014608F6D4EC99B0FF17722847C88C9C0A2FE4804ED67
6411B1B59B1C1DB9B31BC088A320DCB2073CEB54C50F3E6E2CA995EDED4119F5
B53CCF11576A5B3D14BC2AB8ED858D43F66384EF4EBF6FB5C8C1B20D1AD0FD2E
6A4C530BEEF479CDBDAAE4015F53DD5994514C074D8D84A638CDAC6591847FCC
CA5D312E8E0B4078AC809300807CFE4BF7CAB4B21F40B35D6A20C60658D61ED9
5E7BB4ECF7DB3731D6B2A8094346C06AF01FF1D4784AD33491DBFB17AA6A483D
BD43ACE6B352A0B859AAEB15A52403FBD562D284EC1513FA254CE192150A06A4
37F194A50EEB0A766C689C5450C4E828D61D7937837DF89B62C6E21AB81DFA80
285DF0E675408DFCC7E67C946531DFF69669CFD455CCAAA187B108A61F2B9B09
CDFE5866948199CA27C1838AD44C3C2571377BC9C45114130923586825E36300
7FB211DB3506C1E03028539338323F06B3AF9DDF627537F714A783F6EC43320D
24867624620D636BD5D74B42B0388A9730992191A5A26154CE54AFD9DB3C8E9E
ED4DDD03EF82678CB826D732F60C7359331530EB552CF3C551FA22DF6A8C090A
692C03E4F4098C74ED75FB75F8E794E0A83F970C27FF8D8A182D99B955E6E09B
2D1BCC179850C54A53D4A7D0F691833BC71890A2706528524A9FA3EF41B38E2D
C4F1D8AE32B1AF8669B84ACFB1FE71C614310AFB51163ECE573EAB9DC7349FAD
C1651CF31D319EC3E946CFF341E7B705B7CA5813511E05DBBC4BE22B74FE346D
9AD20730AFDD020D7B237A581C9C1670B8A568F69091BF0FBC9AD619AF7C3147
AEB507D282904556162ACF05935ADC9D0738AFD43FF2457FFE057FE48817E2A2
F71DB6E33BD5AF7B51FD03EBC2A7A4B904A4031C519E155A116C14F576AEF66E
86BDFDF6D4C4C6CBD815B95655FC8D6A14F7BE3E2111BF0766C6266CC638D2C3
C32B415E966CACC421D9E0D61AD14EEA06772992CC43893291BDCEA2DBB162B8
5E7721E93527A6A396F42A330D1B6C3619E2C081F4DE7D2AD9C8EB14B6D4808E
48F40632F84C34BEA6BD6B76592A8D668BE8569693E3E2CDCD508876E200F3B1
C6FC0878C36139CEE271D9F3A9068D32ACDB476F04E5FFEACBC97E5F8FAF59B3
18A1F6DFBE0C02B78E9D05CD846EBD47D78ECD7D758E2E8BE6DCD49E7B623DE9
D7F73AE1EEA6664AF0E43BC91EA6FD21F1AADFF547B719681D34DA7D5C1EC21B
D233FCDC655E808CD605A5C2D0712B114BB44747C291F571D6E0ED8901F90F6C
F346D6564B0C2F3B595C9F8B8A3106AC80DB85CE6635A2E8F60C7ADED3943103
3CCEB5F4CC02D42B0C297B9A0EC30145CBCA745791F2A7410DDABB73F0767894
474A712A0996CA6D433E064CF168DB1E5CD0A7D6635234139ED8BAD0C669DE20
FF823A10E4EB9325DA0807D0B38F8AD16FCABEAAA6D87458CCF25F198AA55DBC
4F8AFB25E4E8E504F5B6553AA9BB15553DA69B99B6C48B3BB42664CCCBF8C225
5DE4C035D2303AA66DF56526A41CB1451023821798E27E0F586CBF2D967E468B
2E8E763415D559D129AEA943677452F92602D95BACF61580D51504D2DC503C36
4C054BBF7F35F0B627DDC5FE2AA948AE738E02EE537A7E03BD98EE97FA23D768
F48EA462E9C8ADE003C6312FFAE07D32B62AEA32B58B8D127C00F3B953C6EFC9
695D85DB4B8EB762BDA2CCDA2F5E5ADA62706D4D1FCEA822840BC8FA3E02D9B5
20F7E8785DFEF225DBB3713A7D2C19DC9B35C23652C18D90B02C9E0C18A6CDDC
9BD8A4372B858D2D40789EB1A68AFD88B506A966D125EEE5A3EE02D5836DD04F
03C7AFCE7E1BDC7457501B41DFAA5D74E63E149EA56A941E4DEBF136186B2570
78A44351FA4BE711B6DF0B7912C1FE9229D78A0C17BEC5FB2C0A7B9356C1E1ED
8B2C0334BE3D572A1C405E1F86614B476A9F6A3A2FE7FA1826E5DAC5C0D5A7CB
777899F1BEB85B3081FED4A12C27B85CC6A3E545A312C95C6F2560B6B1EB68A0
B53C977307CE56259FF842E91C82E42C1551F9849D5B7ED1DAC77D33CA607154
E6B8741330E31B8ADBAA54FF0F25A13DAD43232F7EE4D840B43621745E7779FB
48DEB0FC94009BFC69A4C12F62DF356AA094C53BFEF2651A6FF898C29998A99E
4CE824A072AAF76AA9A37B2C1B97F807E5AB84C0E6378D4022A99E04D6527B82
9C7A580610905847A649E4477773B87686F7F288A95D814B292E99A4B6AD93AA
4E6FD216C7B7A8109CEBE9A7B80CCCA6788AEF25264822AB4D94FD51449F12FD
DFFB8D465247CC08127C60B94A181D75FB34147D9585718ADF55429E396C9C0A
F8D0AC0CE02F15E45F1353E736081330A7F88EE867F55C828A9154DDA3C57B6E
596D7E6968280AEA38F840066456C470C3226274D60C73A9A9558CAD41225BB6
27A6D60FF613EF2279B10F44600D51036C4034B5A2C6FEA57D50A9ECF4529BF9
07C094448BCD4F7FB96BC2C4563C7D80C0F466B67851DDD3608FC7F26FC20737
2135B875DF11865C20BE5944EA064216565068F234FF6C2A313F2C5326CF9DCB
210F48CDD47060BCC4763B6052678658F1CA80918437877FA64FEC9C0A6212AB
9606859F8B88CEBF2609ACB01D758D8C883C338489898025EA873936EB69BC17
539AFB4E5E6E11F46F4E2B34FAF8CB61DD5E0BF54F2B8E1C7EA1FEE81E0D5790
C91112C266328D8A85976B5C34C57CB8F2B0FF27B3802BF7FF946F932852D393
1043F260B7BEABB6B6F08A6D483BE513ED163242C8A16395C67E4EEAA170C208
2D60E23C189818822E6CD053D8118AAA25FC998752D9D5D39A1F19CEF2A45184
E57F4CF967AE0084387B52C5CD1CA81ED58FA8598C55080A06D587BECCCA9A75
E08FF9A9D920CA5BDF2CC4DEF46FD4A183EB07660D60FE46E5A147579752BCF5
C8B0040059CDAF1118CE04D23884CFCF623DB3DC17E5BA3907257B07761EDD4E
519CC813AF236A0D7768B98966C8391783D179FBB013476335D2EB21C2D7500E
5926AA784E5659F3651C49C701002EC513F7EDABB511D068C9183BC01DDFF178
1BA4CD3A2F9C9136FB436F629EAD2AB3BF6C3781D123D7B13FA06623DE4DCF34
F43878F7D76E5B0744A7C12C1F974E42BCB15D56C8AEF37D9872B22CD19ABFFC
0468B2D448A840F3FA32956D729E9026B048BF61FA390F64979D77A4C7CF95E5
671A7CB3A481B5B76ACD2DE40A4E388D2DE263E867B7655B5AF313C624500AF6
CA058ED16528D28E50E37BBEB1D1554503645ABF63E7A5833A6A4EE0E75EF619
C1262B4249BA9ACCECBC2B4659D3409002CAE1C90459BD22093A222AF420AA58
FE584F7DCAE9619544FE8CBD926AB84D5AAFEF3557EE0490A4380917962C18EF
FC6774F6DB08B799C5966F3DB23B95A95C52C13894C9156315E5AFF47E4041A4
596B8C9FDB5CBF741CFA9D1CA3196622B3800D5F7DD514A3726E365C1469BE1B
6F645F29B7C424AB6D73089970A0188F4F3D785A31C1CF5B24D127CFD021D684
AF84AB55402527265C047DCB885D6B04DF891FC807DDC7F0A78A2E336B36409D
D33F766E798DAABAEA05D0E9B205C7F96EA80BF721271D10FCE1045F51007055
67D2BDEC73EC3B8308B94DAE1C20EC756F18E6D71D16CFA275D9F5743FB69CF1
61B63A8698A10F2496E649418F5582332AFAAD3A3B0832C2CCD40CF07EA3A99C
732A1CB59AC7194DC8319FD802BE7341B5F4E5D10C072C63B2D6EBCC95F10564
A890B457F6D5861AF47BF280AD2C167410497DDAF85848163A1C551E3A788BC4
F391CDE990AA8B26441324A228BF89C162EB68EA6DB15372C468C84C08EB2BD4
FE16949794F0A487F9B4CD388E421867ABE0B998C7BA8313DDE3FF722B3E0D13
6657488E5ABCA07575CE998B37E6594CC0A406B20C54AE6DF8F82D958661D01D
7B4EF7591B5F107F831AF680016FB33E04570758CE347F60D3830085F5B2B4D3
80F11A63ADC212E0457DD9CF20980B148F607EA2FBC3B1E04A7F3E95D4998C13
7F46B5F5665D88EE206EC10446E70F07D571C499F175A0A71B8A651C030CCC15
48A348C48D19182D79249080AD244A961CCBDA9D8802E424392D610B3F1062AB
86D4EF61EA4CAB239C7FE74FD0A4011808FF1EB140791D557DA31A46FD5F2FE4
BBA340F4B45490CE22EF906079DDD08FF521506BCF36D988848D48A7E98A78F9
5DEC58D847DC65E9CB0E3659A0ED08636CE9ED580E2631176927E5A6C12109CA
189D116A779C73E575948744853BCF5547A7870E7F61959F0A661B25AB58E949
4F503B4CB5024B73C130A7853A702784927B2668B569007A840FE3FA92A0F6A0
0C43DDCD526B5F08183595C8E603F6DD62558DBFE78E0CE89CB1A2377508BAD0
A7CFEAA913B935BA91F1682C8957F08303E5912DB8937D1A4497FC262B6D2B26
6FB7345BA41F6585B5393B876ECEC4101176BE636CB678AE18A2C1DC3ECF0319
1454F3BA5CE1AE7C913A4018FD77C17143C3A63BCE67DCCD4E73F9288693726B
B1E0D39DC3EE52A1A468B354F7978C76EA1140A78AFAEA913AE1C757643E54E7
DC0912EAC8754AE29EAE5AC87616C0C26855C79D2E4EA0D5A8E7FA28212F91D8
E6FB8B549C59237133182417395D5C288EDDDE2609D60C074E62FCDF8BE2A722
0021D8101ED47F36A3678F407275464DFBE5AA7D885D0C87682AB0267EBB3BDA
CCEBD717AF3271DD9D078A52422886758D49CE07427C96AEECF83C52A4555178
CCAB44C1DD91C796157A282D8BC6524B578BCF2CA6C2E483EF3ACFE9F163EFE8
4E8CB01497CB50410DC9BF548C02E0AFF4909ACEB5FA29F511E4EBC1B7A6D267
FB65BF70A34A346B1573B9F02724722B9B749AFD87E637298FD7E336087D8EE5
CBB80AB303F36D640C1DEC8136302AB77F52501A7258DF2BA832668C60508081
1AFDF848477B0E6238C712093A6CDDE716237E7C9224404C2DAE933D86EF5568
8332F843A8AF6415A5E7E92EB1ADB8E291B92F78D0BDE5574AA1542D7B23D36C
E0C8966F5D57F0F19F2AC867F6F7399D5A685C48C5F0EACE9F97B774C5B8696D
C4B35FEAD22394C0C92BAB8A159D27F3FC1512ACF21BD0C3015E152C9B9BEA1B
598CDC2B459A0AB6102096CA6E8432C5FF5094BA96C27845EDBA2C9F485C36A0
A9673990B72A07FDFE82010723109906EF64FA4345C7EFE3A8D63D2276C42369
33CA08C51C6CFF8FAF018DE735D15F41F7AA0AEDC115AF57A6320C8F34A8004A
0176E5B4B81BD89C82D81AEC14F68511ECD14AC320C8E2CF17EF1AF57B30934D
33BCB97230F1F85044E95187020BEA88078A6C436A069AF3591DC15C2AFC4524
B8D03916A6529971CBCB06166030EEF983EF33249751146BFE186E0CF93660BD
BB489FB5C5BFD22467E3B7B7EE27BAD29ABCFED7027D94228D330E2F4E2E31A0
B0D644436B6F13A8292504F21D932CA72B041AC9E55516479336E82C0A1565B1
A11ED423ED125E3A51070FF30756B2D8E5DB6F1FBF31ABF448C9261B75BF1EB6
1260DEF86CDC1F7F63103B89A932C946455256DE821247F764D84794A17202F9
1D76B565BC0A760A0DE668232978D1FC43001DD9DE505B356951C13DA10A3EF0
94840AFE537D11F67FFF7EB6CBC34FDD4C97AFC7CE9441475183C822187B6ABB
FE29C193BAC9D1FC83063FCAE5B90560D4FC5CF3EC08F3FF96A492130ECBCFF7
F3E58DE3BCCE78BE96CD00D48817C5E2C69174395C9FAA22504E4A4F014CE53B
1CDCB87E4DDEE77B66101DA85E46CF1246BA88028F3FB57A5CC84D1EFF33649F
E9BECB71FB97DF1E62F179DBC149EE5B4BB37010E988DE77D252A31FA70C6034
C319BEB958A30DA48BC03BE85A5EED2CAA087A14C454EDD950A107C4E815398C
F620966AE79CA2752D208D583BFE57D69E4A1073026518E2F5A3B451290BCADD
30049773CEEF8B1928A3A51EEF5326855C62AC704A6F74249E9F5EB7CA37809E
EFC33FCDBF9B0F7D035CBE9D558E1BBF66C0836F136C363D69E383A1EC1235D1
FB604BDB075D21522955F05157392F77DFB04790905077BBC7B59C5C42CAB2E8
8D21585257A6FECBE5A1590A6EA831635F1E7946F9ED34797BFA3D0A62701D18
826FEC47F867C4FC966D23A12CD1C92E21D5410A7DE4689432A443218F455DF9
8C61566BF312CDF423D6EDA94305616C16955C6FEDAE7B54D622EA174A8EF261
03BE609AC243FBFB8DD3A0044EAD2C6B1DB8C539FB20F08257D40F890FC7E35E
829AD464D3FBEC28C5B806FB2636FDA3EF3BE4F13A201BB41BF78A96582AA2B2
1BB1908D2F5E7345E8891E0BA85CA4A40CB4E9209DE21B799AEE655E61E18CB5
7B8168469C0AD8B3D46DE19C8FA3CE2C27F58B068E8F6CBB6D8120DFE775C406
4934FB530B35AD9155EF03D074AB55376662193E2EA3A0861A653F3F4DF8192D
7A94FD4BF31B1C4642805F7AC940DF416E626B66428A89D6B7629BFC1B57B71E
6713B98776F95D3128349CE319F1E98BBF6A0FC7FA4A9154690E3F2ED8BD1AF0
9AC4E8A0BD65C422462DE9CDCF42546F422F2272A77C7B24EA082C8B2DDB97E6
A583E4ACED15502C9F238548A869DFE590A22C3C935E3203005A55E0EC96BEF8
0AFCC65AF614080C5097116B9E368CC0191FD3EC665A0F563B55F2738B16DA3D
63169923CEB18025FF4554899EF60A69BA10A8E424CBF797E69A82A47D7A44F8
CCA45637E786A2DA5331B37D96CB9256C0CD4CCE3F8060B700822EB157C4BE8D
E18EBAECF34CC81038FDB1F0ED2F297115F853CC86DAC703AF99C30A5438CFA2
F9D3270AD44DC4EB4988B9CDA2014D4DD8DDB484F625BEB57E28405D014E912B
80B492A0A9A65B0EBF2C8F288214125072AE15C467502382ED09316E7C0C519F
68E411E47A248FFDD79D1D00AA769FEB8C36EDBEC14C5256B9940F0800E6DD26
001BE1FD4D5431BD08C428FCE711882EFEBB8E278432D6E9D53AD867B504A3B5
1AB7386DEC1D1553299043885CBFBFF18ADC56615F5C4576F6EF44CBFBC583BE
ABA6A577651BFB70F3E79B9BD4C929C8A03801A388315DE6EEBCAC80D3D3136F
8F3B0DFB89AA1D0FA3717BF3CD52E7FC86C8FE3F80ECEE1C77C14FDF9407926A
6B3467A4AD5F0D63CABE4760980EFA1C84D5348740B8A4885ABE1FC79E819009
CA2FA229D61C1DA78B0DBF62A24D47AE5385477AE95E7677D3140B4AA22256DA
ACF1B9CFE374403C5DCEFE80CD1C1881425432805A253CFEB23C5EA0CDF05C62
FB75C0E758B49BA91CDD5B32B1DC5E7C2ED1A7ED75698C25081CADB630138C9B
03ED2F4592D3D38E10A40C93CC36DCE693B16645D354E54ED6C97ED4F5916236
45C9909D928324FE2647C4AC2955B7719019C977EC66869BDD232025C7D97A28
9538A8BFB71342EE3899DE4C4D470EC2364AE68381B4DD8789E1D35D4AE06A05
1107EA4D91898CF2FFB789F812D0565F4BC740AEF26EFE447E2C62B8F683F2A8
58182EFCF99114F384B2D69C75A42B747D40CDBECE3E39354BABBC6606B1DFDF
91D076228D14832E5F1322C05ECB4357790760DCB4E0CC99AC20DC2E55E3073E
E37425A0C38CB958BCA2B9DDBC8BC0FF14DFAB054C3D1D03E9A3CD593DFDF0E8
A27E608DA36E59F2A4D05BEC3A446F706C62F540E3993BA57FC5A340C84FED09
7983794C228F06268D28EE4DFC8498FFFE101EDBBAD03D1ACBE86A393BB350CA
DCB55BB88D44319FBA904632CD16DF8EA6C543FB1D7EDA23A93106E334C67A08
E963BA57C7E351F9925FB96349F8D9786D8E6FF03E9C4C12AC748EB7607B9877
A4729FC7697EEFE344F7665D5E6B49836E6848549F749658F1F5C0E3D442BD3D
390982D04AEEC16AD24C4603D1BA3E926671E31842C759229AE2E34BE2CA1FCB
EF057DEFE3269A3251B16E5C9371B68DF3FC139EF250FC2A6B8179F719AC6B30
787677BDBE7CFEE37B87EAE0447EDADEB00764A38DAB429277B77E1FB889CFDE
0D43F5248CD7CA2780910F95C394109A615D13F693BFCD7FD07158CECA1F10A5
D75C8B02FB448779A76D841ADED0348EF0A843D0F05CE3F579148DC114109425
415B084F754454ACBF44DCF4961F68DBB0644BD44904AFE4FBE09BCA323D5EB7
F8A15D60587FC7D23BA81A90D104EBADB9DA09321173442805CF8F8F6BA06CF3
84801CE631C747480C8C7504D585BC4A036D73CCD2A794972D0FC17976DEB8C9
8ED2B30FFC89509DFFBE19A038735838A7FE08025B5CA3639451BFACB4AC69B3
DCFC2FD21B60115A395877B1E42F8AAEEB135141C89D833762A41721C04A609C
E77F624BF3C8CAF224558BD0C0009D085DD0908EF11AC8DC936D23DDEC6010BF
FB0A037555EB727B03BFCFC98DC527B4A2A27FC4CF05A5F078CF6E4E652D8A95
17FFF5A8476EEC6D9104856CDC7141A31183AD94729DE9FEDEFD6748EABD96D9
FEC55051D25CE517DBD53CE9FEB02D52615B93FFD7928C8F6D24B6C28C00D947
27B62F28E0D8A1C6E2B1F4AA9A11B291D79C7B371F8B5C888DC44FBA5607435A
619684F502CF675B7F9ACF79E494464447C416FC35CA59D535567B2F749E8644
F23BEECB6E0DAB28979DCA9FF1E7B3A9E1899C5A99E60EA498309BD9EF487733
FAD3B703CCF8812EE46CC7765385D8B5DE106435BCC52F1F278910A7453E1D5D
9220787DD65949AE1B082E3F5B20BF645BD2A7E6A9822D145F3F0029A07BA8C9
297BF8B0B016EDCAF80B967FE852D65125D8A189FBED43BFD6030926C71F72B7
AE8D5279E430CFFFEE1E8B31F501B401651FBC69B8A862F7E66F35E6521018F2
45F33A42CF224F327CCEB361E97BAB198C791870D71E5ADF19506E6A98639415
6D04433066093880A3C18EC4503D3F55A3374474F1D4BE7272A5055983BC0884
72F9AF3FF9E9436E8886ADB7A8C8224AD497E3A3DCBC2A1FE5409E7AF513C214
141E02C646D7BEBCC2D016EF4B68FE6C549FFD52BC02589DFAE6B156BC291D37
2242340BA0449DE1343A610605FF377C59A77B6845BD08FBD908C8A61059B21A
2B3771D04D150DA9735F36FB252F0335FB50B3370C94D0AAFC1CEE5C11820EB1
52C0727DFE340139F3D874DE4D10E363B15E2575DB381713A93E5F02E55EF58E
729E06BA415230C05BDCE98F3D4072572E95531C63E1E76AA34EE0AC72369677
4F3E777B06DF048FAC43FC281ADE45FABED5C979A3C416F026E3EB3CFC4B3FEA
9A6F16870BD097080BF269D86773037ADCD10E8F00818EE88AD2EA98D6B7F1EE
7B944F89655D79EE67D722E54198E66CA6EF6FD2B82E589BD6B238019816463C
0206918EE55F76AB2428202F68B93852C32FBAC82F0954D1DD57FEEEC115BD91
491414D290FC58CCE729816CB5CAC247DDC93659FDCEEB82CC7E665586F5EE36
BAA962D733EA6B1D615D235898F90D1346F7D075BD8D36F3DE102AF8DC9875C2
22FBF9C9285835241D3A427F9B1AD26ECD535E46C137084A835CDECF87DB972A
1991DC659D83263F3BF24615D47A897EEF08AE3A09AE97C63F4B86A143828E66
644DC0B9108FBE93E7E8E0F8967630D03E48BBB796C27845EDBA2C9F4F27B3DD
2C379542F7A9261EA15EEEFBD9C759E6CBA1647FD6E032AF808D30E08C4AF6C4
536D1C9FDBEE7B1B2FED7B9180758CB5E40FAD2BD0E4A563D1C5E94BAC3B279F
BC7A664AB5EEFC7B820575D35624FAA504892ABBF8B54996A8F41B387AE7E4D6
EDC2658A029D0F7EE557957CC9934C4287B17F5613AF6A0821CF81AA3BD93F1B
E76A6CF8DE9A74CA226BAD0E6EC5046011239ED7D6C47D1C7F6D7214981A0678
BB2138B7FF05556CDD7FAF7FDB90B8F56CF48D70FB98C3ED83F7C2ADB01C926F
1F6CD6447885E4084932266C621A42B8A3139CE953DFA96876D93754F89637A3
099F1E6F704C5D05B3DE9003CCB8796D82E90F966623A913BE45C738E9AB7395
8E5805EA03E5F042D9F3A4760004D1BBBF9DB45283B2F5631D37B8BE6164546A
1CD08616E674912B25C8FBDA1D46AE862B97460DE511FD6F899938CEE7A96580
7EA75DE120EE0B7EEAFA7F48E7D337FEC7836AB3E337D1905331FC5180AAE15A
6AC021E852C3A8F8B27BD5EEB828B2BA0301A83E13CBB42150195CAAFEF9D5D4
766BC21BEB95A8CDD992BCB27DE9E8127325C87E3842D1ED01722E836098618C
CBF12912B16B203007F4E5A56534D8FF497D54824B62F837C87BB9F989AC66AD
86B833F24A232CDC0C21605B02B3DB3A00354353B50C9B2DC97AC798D4FEFE2F
2370E216B7F259D4D3D6D1F0B06737D3F368BFF332A752ADA5579692C7953921
0FBE0515F30AA8DBC86356F0557850F87122E2175AC6DA8E033FF3DF0FDC7F4F
675EE1BA3EFF04AFD1CF67018D820E1C9CE14CBF5AD328803D65BE6D336769F9
9E923C38341D5FAF91E5BC1FB3E8FCA0AED317ED913A28706B538D197B7D62B6
143DB7A1CF0C0F27BE974490F2C2A1EDF171B5A5F7ED24B33D2C3F9C6719C830
E0BF310C364C44C6C465F7AB7CFEDCEDA268BD165DB9A392D09E79AF518630C4
F063E876A35D64758EBB09467049791F9C23F4101F3EAE2CF8F223E475C403B6
74EEB14A276935114F1DA253C4E2C6915C9303F2D9F8FEE58727EFA4AB79C5D1
56F6A37F088B4D8ACBAB5A4FF3DAB0438C65E5A1EB77AFE9274CC14073847AEC
354F60F3417D147D88DC59395A19DCF6C41EF3B0231851B5002C519339F0002D
2FD0113F5AE59619AC0E8EDCCC1736E18B657D33C2B9836FB5DB6A0D80E2FFF6
1758FF6F9040E36AA71D4111CB414AF4C3A1FF1DA06BDC8AB8EDD4403C382D29
751340F63D14C45D0C8ACE829927FA2D65BDF65F2F5EE2960A35AEB42F3CD5F4
E1162D9DB46C09BEE67F675948FA33F4D2CBED2347FA235225D0A03F5D63F343
60CEA089E994C36CACD2E02DD5903B15E3444AEC48A331D45080FE3B3DDF292C
70474F1D9BBA817E45873CD3DD3281D71574370C35C4DDAFB83D74310D979549
C7FCEE1F220DEF7CD6F56354DFE69300CACBBD06F880D67F16B316CBB5CDF197
7988257A0ACAEE708028444275706266E620FBBF4BE80B2F496F0CED0D1F01CD
569E5C6147F75B3A9B3DE7E230CC48F8B90155FAF41C2E9C22D6B8FA2AC9457D
89B0D17AAF81C1D5874D56087B5A8B43DF3613AAAD505CCA785EE521B5D53E4F
6B8CDF0871FF84F68829BF1E275B8A6C330DF8E47A15BFCF6E32FA15B53C70BD
06F06681193AF93A550668D42168841D7ED60D954F44AB46FF87C7C9FC68AAC0
A8D96CE7BA643C32ED9984DFAF5F7E5BCDC7F2A7EC35525BCD0421A0A5911694
8B1C5D105C70F57C53A8F04B56D6C4308717B91244B5FFC30C900245D5DCE465
E3CF3DFCE5AF25260F2E92C7807C74EFED2B132A2915E0454B7D71DCA40F5946
D9266E07CBF681164FEAF332C19BB15DD6309FAD7B43340ABCF99AC4B3D233B4
A8C7C5D836375BBEFCA363411DE10FE5FB70E0DD01174663D1A9F5B32AF2DE2C
CEE6BADA0AB587AD0479EBD6B094B14FBEB67F820401628C3994C49C54859DB5
FC6D3B9BCE67153C1AFE4F5C2067E4206F8D4F3AF4B2C7D95E63DA3C2A7F3008
1F251BC9BBCB4D070142743F214C920D15E17D1972234FC2E34143D2C1D5EBFC
031D9DAA06ADBE7FA12ACEE50275E46460F6DBAAB372244C84107B983B1A5823
7F65FAFBE78109CAB35AC2730A761CAAED96AFDADFC35AD9666700C095207E57
106950D839087BE28F05E9C49F9A5E53D1C1C1E4306F83CA58D52A369E8E8645
AB4A13A2B9050D2F3A3DB09C271C773A1FBA4DD1B958FE9067806C33974F0312
ACD1605720B548189D085A7DE570AAB028B22F3B9C80D003E0ABED6CF45ECEA9
0E68E5D8DF68A827AE2AF8E3798F67F176F1BC9F2B67CA60F2553B0B4CAE6647
582C86E8E8FE7C4E1BCF5B686990BEC17D24D34E87E4F457FC7B8E0A12CE9778
1A06B58C3C1C5CC8AF27ACFD99EAD434BCC277A4805E6F068CF2030032CFB25E
01E9F870CA8523DCDF93D57CE57C1759F3951F8F4F3D785A31C1CF5B24D127CF
D021D684AF84AC0164BFBF3AB63819BF6541E73737B25312E6C66A69FFF73E28
D6824049DEA9416A450BE02DCB55908E37FAF3FB2C9B6376843D91DA00229226
A37259CFB0AD3BC267F3EDFB20C5604C70DC9E98857AA358B5F754BC18087970
2071708D1EFC4777B8EB30EF1C7E458A884F75069386FA9FCC70715B5E938D01
ED5BA4A6B60F45D16C05A16EBF5949007FB2D0557A88D362014EDFD3445233A0
3CFE48FED1A401EDAFBE8A3F9F871320D840B1BFDD84BC25958D5A31CAD2D605
99E9024B649B0EDDE106038EFD6BF40073826142850A881648CFF2BD247BEED5
D3B358E661FA45EF0CCFC2AEA3B4E47F70BA2D5AEE9FFAE55CAE6C138292F2F3
BD650E492ECA67D539F5618E25570033ED632B1319AF7120EC53549A80FA0B8B
14AD07A99EB7AF14BA3238EE22916DFC64E9156B8CF2C80FA08408D4A7C28FBB
BC520AACBFBDF74AED0B3575A19CFFBD241BA57B5CEBF5D03BBC3C2FAA19D4E7
C58231807317CAA17C57B8D8BE7938866A90C39F3248962614614373B4E667CA
17003E8130E33961FE59835F21DC12BA218782182874D69A79225397FC863789
537C701CD41798C760CBFF0D7797AF86374130E0E7C7A57F1A67B6246167D3EC
8C2518C12DD5F849263DA8B6B2C38E474121239515EFB1A8D824714345E89DB8
8F82BF737AB469730545F0A08C5E51A42920248E4BF77A7876799B1FD856AAB0
EE4A702D4CF64802A82227ED89B7E927DE87A8D4ABF3AEFD654852997205A1E2
7832DAE6057F694947512D9CBD1A3DA5935F098FE9093969E62EAA9566CA94F1
6882F5F7F808C45A6B480412712C3442B45A8E7A7BF56BFFD91EAE2ACA93FD9C
C374935E92205D6951D9713488E6E8C9227D80449DB318BA50BDFDDCB309C1C2
F9AFCE295D555F397116AFEDB49C98816CFF8817C762F40B633DB9ADDE7AC3BF
EAA85EEE485F5A8C083AB8F412E0E06E2B428600B5DE20E63B70281C01B84EB1
F4D1F403E5D5838961F3D69D65F242D27A7E798518C858C89EA5F5C6FE172C45
36F31F7CF7D9EABCB9960BD4C526766BCE797355450C26C9BDBFED4F5F0D7A56
F0A6E0F662104C8DAA6B2D1840299D659144AFEF2C34824615385C77FF85D88A
E9D16E320913DE0F6F5038EC5FBFE0A25EC6705992CFCE3365B9BA55EA06912B
D6A44BE069F990585122CE098C0466C621CB7A543B33ADFBBB92A770832E506E
1476C324A54BAE843AC553E118724271420F3A3FC9F5DFD471BB589965D59E98
003DD56C3EA32A4A72939A3A826A2CE6C6B1D8C888D33FB02835BCBA561C4650
A4E450F32A11DCDC7CAF7DF143D89D5F890F653500B797E779C5166BAFA92A9A
506DE459CF21F2A254C29722B6DB34C92EB606A5253B84D975177215128B05BB
A7C8F8931447B707260C42511B0BFB3ADD41F6BEE7DDA51187A350CC87F56F6B
8DCC863CA178AFF59E832AD0DD87D648C3D600FFB845798DF8432B3D3439FCE7
DDDCD135F56A12610B4244BADD57DA590509FE5E891EA1EAF0F87013AF4CE74D
D05B327128E40B7852FBD0721D1A90B7633CB21449E35BCDB4FB7E107AC52507
5B9DCC920A5FC0D6206DF1B2B7701C20E811C51257921FAB9ED7F964ED314D50
CDC06341481153D90C387FAFB9A208FD0DFA792028968E84E511B51A5A93B3C3
2286BB3061C215420F75A9D089C7BCDEC50559B82E18BC41515FE91E1433A56A
4B1C717A38CF9C88CB71E5D3F4895F6D1CD6C2A9FBA36545B9F8FA73BE010D7C
4EE29A41FC34FEFB523CD77C171DC673154B9C531003F298AF5E6887463F834E
DD2608EA2C03E0164D07F2F4BAD9FE97B08C44148C78733E56DC10E35ABFC78D
9201248AD48C4C8AB3469980786C5C14F6BD5A62863318B11D4C1DEF699C65BA
2123BB23A905418C0040E676CE4D5C17AABB7F6FF8074B8AD6681E341B8EB394
8E1C2B48C552D344E4672E4A7D11F98A66E6E3E2365ADA5FC7DFD39713C072B1
96FC2B0B2E833FCBA3454CDB8DCBB0DCA3D786412540075F5CDFFC2AECC63D9B
3271A77DF31237A11667960AE5D1200B42F9A94A4FC6960F792B245D1DA41F4E
0A295D1DFECBE39D9FF712C85C748311C9CB842FE5F90542E9E515490079815C
2000B856C14AC12D72F0F34F0EE0986BD86BA865BB11FBF008D13A744CAD69B3
AF6CA7DD212083440C3C61D2BF3B821B982896932E020A58A9BA49B6BBEB3D84
0D306FB8997B2A362028359C59F62786B324FADE614137AF03557647E96D18D1
EB53CB83B5AD4C0768AF648329305600D3E60E0DE681515C45817FA6D09306EF
B9F1A70BA84714FBEE4D2C97A1BA0B7940A761EFF73D2D26D1822AB805ACEB5B
DAE64AC2F5DE86A73EC772750204D83E7477808C44D8D0753A8A80548A3762AD
56517FD21033ACDD7ACCC38E191A96AB4E8ABC3219609CA323FA167BEECACE16
BB485F55F723460DD6C93A05E23ABF87EAE993019B5DCE5BD7A774F8DAFD20F0
5C37F2EB54F2D2E44CC1700E8AC2E1EE384B0F6907DA0232BF5153AD6134197E
A832947F829801EAD65B11D30DF7380AF3BB1A717C0F91FD8AFA989EB8BA0CB3
C5BDD0A24DDC0866A9B296F7AFDAD204076F8CCF230961BE8AB89D792D6900CD
217629286D48D6529E15ADC93E621833FC3E90469A2FE98DE52A0C0D25EFE4A5
2724E729C277E902195DB58D34BC2B88918F1967AA6877ED67D971958F3D80A9
E31A4F95B4D338B7A0E4D265FF92DF08074D6FBCC56FA88F9E46AB571CB1AAFF
7D49756A20BD84B70334512ED423296C2DD2408AEC18D647A6DA9D32B7967F1E
52A25E4864B40A5F3C8A5AF9B192AB4DD8819810B81A804329BC6A5DBDD1C5AE
29619DC3061D4CF4FF2DC1900210DBA095D95418D0AFF67AA8E775BFA51C03DE
EF21F35511126432A385BA76B0FEECBABBC390E017409225A58D1F94831BF8F9
B6CF6AB9F14CBC1D957413E900138FD04725C9942F2AD0FAD8B198DD4BBC9017
9FE9329D97AFDB33B9422DBFC69A0ED01AC4044F17B810E8E46BE9689B9625D0
9F30E2FF5C655457DBD51637BBF25F14554B423094B1D88F86AD0F27EEBD61CC
DC186A88ACCC17FAC303D0FD0E435619DD9BBB04250F5690727E803FE00CA101
663BE05E03263F9BB5D7033EA88E481A9E49D77CD396B35B1966A52D2C1DDDC6
6D7BD3F859879C98012893A2C7C263C1093FB5D95AC18BA50CB2DDDBF7595ED2
CD08168F2D78FFAAD5770E489F3D084F4A2596764231E9E445A03C052D4A7382
BBEDEAA3693ECC7071FEEB02814EE5D641FCF55E618994F4CD089F9E4BC79B2F
C5EAE73A4ACB17ED814D2D2F6C51C4A0713D4B8954D01DDC88FF719FC0976178
A9C056344F5BB869B86ED3D43D4A309C9AAFC4AA5A74F738BDA373D392A4EF83
AB2652A12932CAA2BCAC9508E5190CDA6CFCDC933A8E3C9F3B8FE15B54BD392D
28A779410D614B716E3120CE8B9B6BA439201E10125DB9EDBA9756DC5582D248
8EA3757C4C4FCDEDA472845657D8472935F85E54D7CB47B69D0A6F329CF3522C
81BABB8C9BED90F772BF244B62B9D66918F8D844BB4719549ED1D89041FC0B40
6B7BA0151795A98677B0E2B6FCD41273C62F3ADB985159E492295516605E213D
D2F2ED7EC6638B2BE957C4CA8ED4F9D7FE86319159877F220711E01CE157DC61
68B073B7E81F58CEA2598F628F507640268AEA3DB4E743D5C5174618E958690F
D522C8D61E033D083625FFCF8E69E56F11D15E1E085DE366BC18C858C89EA5F5
C6FD63FBC9E0ADD940B62166FB7C4C085B8D0F10DFE65072311E274BFBF37284
0036E3D1E71C93111F531B0D8E116CE4548F630ABB45723E3858702BA7F0CDCF
1FD78245C455F3D38F79A5FE3C4190930277E997E11F0D68AEC0B1F2617AF793
9353F1B3DC0928C3BE9C8F31D7612EAAAA101F1C50BDED34B8320397B3973838
F95A3A1909EEB7845E8164C77F072860D7715F719883C906177C193FF3BA5E7B
E79653627B3B7DCC011FBCAA0D84469EE1590BAECEDC6A5B1D6E49A5764FE876
B236547F6FF57541CE42A834F186D3549338FDDEA07BD62F4D3D8D3835B2F6C5
4C1ABE7AD98C4BFF998A9E337BD16D600383CAF7392CCD4C3DBC3E11E2D6A185
EE6A8152A311982FEE12F22AACF2D33AB5D9FE7BC6838B6D167DFD3C504C0B8F
1FFA5FBFF226D3739A9150AB31AA85EC4C4EAC4099ABC2259947EF4B9D3D2344
66AA947AE16F3EBEDCFE68BC4A837EA5D384918953ABD7E494B789692B731634
7F93ED3EF0C674695D8EAB36D536AA25084373DEA70C9E34003237BF6CAACB58
165C52D7BC0111B3D40928CE09B55671FCD934ED720DCE84DDF59C8FF437BA02
ACB50EDD96817E78C2B44A81AB21C8AFCF5D4BAB16383FD2434B55442C4053B3
0A15215D33F5288EC0C893046265D95850542E62E27FDA4C634927E05696B570
307FF2A067A4DECF5B9CE370D696A8BD01C5787363D1A787CE51F66EC9E1BB77
B3DA156165CE54F83DD7528E48DCCE61563926241D1CA1B8A3689313EA9E1D81
AC3D2E22980F984F7AAD51893F4C66986C2EE9A510A6BF0D58C8CA6CCCF94195
191D6520100F30115E728F1EA994AA5B6FCCDB964058FA36239A4953943B3A2F
62E5C88E6FF3E88A207B5473E0A950449C3209C18B3957600D3791BBDEBE59E8
F8BF3667901817664C9AF4E931E92BAF6FD1FDFD827163C51EA8F9A86382E1EB
A75607502A52AA3168E74025B41DEE6930F44F10F3A2F4EA31540AE0E13E3DFF
624A3ED426EA82B9B746C9BF7D75231D8C95A8C0D752C1B0F86BDE60D7C04D7C
218132B4D36802741B73E44218A69F41A55F3C8296D12EADD820721F4ED8EC2A
32EEB1A68DE6E3D2647E0B2F16E12369CFE5B3526E19FFA8C8C12AE62023CC89
984CCF8A0C281258F197780042B7A0DF042A7B1F7F617CC30C26C2A6272E5278
BB0323FAE17CC54C4766F061A01331F559046D5C841EA1B97F7FFCF4829B5CF5
7B898ED0146CD88C3A2FAC47231E7B1033B4F51FBF490CC397E50FE4014D9E34
323FA1832FCEACE287FC9DE3577B6F8E78D903BA61F83C2615D159B75A28FCD2
FCAB7284324C74341671A155CDB579C801450DF46961D35CC15C534E164049FC
A47081286E24D449CC9BEA048F4ED5E6C355E60C03DBF8FF5D5245B72F320953
768E77405B13927742515F7AACFAA3737AA2BA862D04F67D31EA5D4BF669B48B
CB3B858251438F05B3EA1F9824A7ACE3BD8558CB9B8F1B7796AD730A224DFC1F
C158110D710F453F1354E81A34B22C8288D6822D3E7555DEAF21A2F235564C61
015F3B74E85CED7F03B14AE42EA309E4250FB52FBF306257A1BBF5DC15487D5B
B9489CD0AF55CAAAAB0BFE5251972EBF4F499020E0D842308DFA9A991E0BD574
848C85BCB7F3D74FE0BAABA30A31E9D23CA5F76A5B51AECE84C5E04B6B5EB9E2
50F75311BEC3A447E6C906E04EBEE5F8CEC3FDEA36B201E774592CC407CAD7E8
4ACC429FD2D2BFB9BB504FCC2F01B128F18E12C7063E1EF8DA47CF97D4BBA006
4B7339877DE9B4D3E2BB65DBB47C789C795E97A537F013BC2BC786BDA32DCACC
ED1075100D53E3A6523811C0725A87CCC25FB9212B4958D716DCDE61AEAC6DBB
9F5F26C309EC6AA6E4BDF69B047587802F6C66C3BC6E9DF45A22A24877E4A449
925A787E96D7885472A1F3180A5D75CDC4B045FE299485F2F767F875B4722D0D
4A5D123AA93B983AA070D345E15EF715395E7BEF91C97ADB86AE079BF5ACD30A
86AA96179239E77D5F90056AE238AE68366A59B63E74FC255C671AC108F029C7
0C899E14087CB21C06846054DC315ACB48ED0AEFD98883176BCDAF26DC90DF0E
743E68ED94A55F6E31F6DB5E9B326B106DCF148383AE6A8497FBBD03F8CC3807
6680EC6BC79D4DD502E9AB44346367E74133FCB05A7A4311247B3EAC80E2C8CD
A0ADB6D813890F9C9E1A4FDA3B98B13197426A1A86E9150D3A1EC4F892A2F092
A3E45EAEA352FF07008ABC73E686EEBC2C10645F2CC8E86EFF15788A6DD355CE
23F77BF90DD88672ED1AE3C262A2065EB076D05C12301556F56D22BFDB991288
2ED7CBFDA51C01843856E07C23ADAFCCEBB1B8363D1BD37BCF8FA1CE1B2DD377
624B0BBD2F289864EC696B2ED67A8EBF85064D6AC36253D3603163D4E5F3D2B8
918B01C9BD4C52AF3169CD882FBF71988856F849F9414155B13472B51A20A649
F4AB99E8207FFDABC084BCDFC2A202F15B5E590EE4C895279F0DDCC564D440B4
FF85F92448D42014DF2B2753BBA65090F19556E5626735EE984D75D6C088333D
5C692FFA56928987EB0BBAF4DC72DA6B4EBF8B9D022DEC897FDD3E0DE35AC5CE
15B36401360DD1D3A7ECF49D9E6A9354690EB370F940BAE2395473B7C2F70EB4
DF0E9127D715F31D64C36E7FC9BF48ADB04BEE66877A7912E169DED6EF3F8244
9781640696B74F41C7D5E32C525FAA2297C4C22A42A4E9F9365D91CEFA249A03
9485BFA31B40FA4727073E848B2EC0BCAF7A59308F505DBAE59B489042D1BFC0
DA272517598EEACE52165D8D04ED952720D4F65CBD0EA7805A438AAB424675C4
5984BC321B833546D85801A9A1822013C4B64C9BFD510200C2E03FA0515E53B3
655232E12A5937209B8A96BC02A0A3F6507D121BAACABAD9EBC22A55727BF40C
AB44696D80CF4535A0F85E5EAFA504BFCC28470D638D007C0A84FB8D0F4A7F7A
CDA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1B79EE11B6F8C699938631B10
B51FAF536FB9508C5F7EAD4AE0D3D567DAC691669A4AAC7360F8B87013B37DF4
23972B3E41A33F45DF6684D3DCBDCA5537ABC8C2B536D34DEACDDE328ECDA5EC
2BE2BBF6DCCEE85F7A35F82467EC195ED6EF893FC514308BEB097A3C1FF486AC
03EDEE305285EEF705993EA37E0CA2D9BEE0AB4AA71E488096183D84CCB5E4C8
DFEC0195E99B6E47CBE1D39D16881CF619655DD5CBBC96D888519734F9CE5336
AA67E42AD973C3DC1FD13D5DE9B840FDD96372799EBF4C9FC600AB39B53EC722
CEB29C19EF05608D01D55454CC24DE67F37FF40FFB2587943DFDB4C6864CF1FC
7152CC20860750ED7688E183809095E88840F703E9BF997E8A6666919E3630D9
076F46FC88E18E019B8E51E7EEA199D39C2CDF87077256FE68958664FD1D7AAD
1025FAA42025B278EDC5C8538DB8CF06364C18D0B14473491ECC44B826A0231D
6E4AA1598B436C0190DB0806D6AB666B48CEBE7997186958CA2178217879909D
FE3C012CF2809984881E54DE920A0B4E19ECE69A17424DDCD560B19D89D9F437
A3DC866FD959CE669D97E45834FEC5C90ECBF4DDBA641D8B23C75C2244A81801
9BBE81399BAF61865A3684B6E304FCBC879A3A7321FADA299277D8D09E8CEE82
38655912EEC2E237091723377A30F50EE2D9C8C41FCF68538BFD9A927C88E4E0
6BCFF708B6DCD954019B3331D6608CB75A87D0416009314232BB139FF3EFA3C3
0D7B0B18C55A5094ECD1E0D8DFA69BCBEF255546970B3FAAC4DDBC9B34927DCB
A6210E155E83ECB2BFE513B16480350E7FC50BD345516D6CE611BD64085A4189
1ECCFAB5393A5A224DF912926850354E460C7B23A75F8791EF3D26C67A6D0738
BA7D76CAC8BB3E00D44E58BC2EF4DE13882DF23070BD39384C30B3DDF83AE423
590FCFCD5F871F03C22DA4FB17DCE973FED07CB86786A6D5E41428143181B7E1
827A03486A3CE03FF9EE1C4293A042586C7D5DF306BD03A214E802E1EDA87B8C
246F89A0EB22D1C6FDB17142AF03449BD01E4392612529D4FE44D2C1612169E0
0803B637C1D558022E494E59FBCADFEF7FCE07E480992ED9BA5695DCAD5CDD9A
B000AF28EBF668BD3AE4E60778AD5AC51DCB571982706F101B216B4AF3523974
378A0423533BE20CD562DB316843A0AFA31476964FC582A426A10C16E7EFB311
32D4CF7A04977EC62FC963C937E810D88F88A2465DC6ECA97097E5BCA184589D
F74B4EBB514BD5B505457A6FABFBFEA20AEFCF5301C6E03B1AAC8C7642DA07EF
2F28988112405F80F2BC862110C9B7CC36B5F2A08764FEF3B2B548D2379F1F28
2163C1D11596E1FEB5082D14CAD6BD770E15BE2901A24204D129C86166CD167E
327C8D51E5EB5D7DAEC7FF5E9D7BF4B154F446F8356105E43968753AA079E9B2
4F0B04BBF7A4EABD00CEC74325D3F73AF5B70421A92E73D5D54557D8894876F4
6A2A4BAC73AD3C0FD804C49181CEDE095E0E4AC3B8712D1CA44E0FFC78679BCF
C1B3B347A65E172A6051A76B2D60E7A7ADD575F0C13222E00C494C02D3C011AF
F14AD7279E49BD15B80326EC4D06F41CE182311A2133E13689A463EF6E4105BF
577029D4F0FEE8731D378810ABB204A3B51AB7386DEC1D1553299043885CBFBF
F18FCADF2E16737434C5B5DACA56859C91356A47E901AD5D7DDA6B774E1ACBF2
A59249A4ED17141E8776F8B18AE28DB8B27EED75F22A4799C741EF0E366457EF
C5B4DF8C054B997524BB0DAA770498539B0212DE3A620060C06A5567EC82C0BA
3D2AF8649CE5AADCD3CC336BC012FD28735D33E509D76E0B21B5D5A252757C4B
7893DD9870FFE8B42D025086C7C485152D775C77F7F595A5D18853316C2FD379
142BDBF2005786A34AC58D500D42728C710A5A41A27A9AA8A21F616EC20C9183
4AAC2A80D5684C567B67D5A523C43FE8BE4C93534D92A1F7EE43181ACD168511
D2B983EAE3970CAAD43ADAEE90F3C443165E311B6DA281E94CF64E71F6017DDD
85B0F8AD2FDFA0AFBD1185BBA5CFB7BFAEE46118DD5939E7E12A4DDBA73D4ADC
AE37670E7C5D5B06BEDA9990729C75B5BA3DFD65E2AB7EC9202729FD3E48D7EC
7516E263C79D6A97268DA46B172CB76606EF122451DD2380303854FC141326A5
EA6D7521F1173793087399AE2CD42EA3950E8C685E163315D6EB2C092E3FD9C0
527F9576C940F46A834EC73F7A38A202C0739772E108E44C21C1B4A6C208AB0C
4B434B1CFB59EDF348CD5DAD3990FB67C6F5451F816637181FAFF537D47FDD18
0911594ABFFD7C6573996FFF0E95F59E04FAEE6653798941795B253A86C73164
C0B298ED35C3946900C72DF7CF454503703E08CFF94634679FCE74F6333A5C0F
5514AEA4CC65C257EC4A6C0F3441CF781431192D23878E807AE0D523F9925477
3C65920E5E3ABC46DC2794D4A9A330C3E2E57C4477049B39331387623CD07A19
1CC377126A41EA96394170A5BF25824F78F627A1F0BCE47E0B9CBF4A0605D4FE
DA3366AC599496E69CA1C74FC929BAACC1D9275B3C3CC4A76F9D5C43104760C7
11C5DC5DED743A7ED41E852DC45BCA016BD815ED86D1C05E802BB138DB3626C7
3A540D2F4F23F6F7E8A0BC718A0E50345F764B36FB60C10262CEAA93B5088950
BFE30173D395E1D941320BA2A64B42C1373ACFF3D54A04D8EBC514E2F47D48B8
4F12D985E504CE2F856B29FC273D1BF479A3AB14A1C202F473887563600B8B8E
3CF07D96274230E39961C7BEE93A3E77E9261C6E4CABBDE97CEB9F2CD07EB064
FA0A0F0D5703414F5C73718F38A4E67EE1E6AC79F554C94EDF2E1AD31C5C2DF7
9A9BFC371F6D11CE3059C7E388FF26ED128063D2B51A29B2785F324222640274
A8457B12F3D607619CB08AE72CC5BB3A34201B31F262CF0D04C2C97A7301BCA9
2687198B725EB5B230A18D4BE44B8F5E92D2F88DC8BDB5CF53E44C832B9BF69D
9DA1C3981F3B8A7AAE82B7642C9DF1E1024D89E14DEA94BC7AE1A37EC827603D
8470B05A14C8D3F127A14A056F422A49EF8453EABC2064828A2254F5568A8D9E
0B8BD9118016374CFFD453817EFA910EDAB011FB6B42CFA331C2D87F64E60EAC
F906DBD17BD9A650012CF963AD500132BA2112F4DD121C8CD578C33DEF377CAE
F216A5A2A80F4EA84D0117290BCC7C63376175ECA2FC62EADAB7488BAC8E76FA
F802C174E1A50B703B5A9586C03FC969A5103E2BED41CE8DA5C50E9EDFB70047
B6D2CFA4ECE95C399F82169E5FE0D613468676A21638730B3AB6349901D18D1F
EF5CC6EDDB55CFD4CD0A06926C9D2AF865AF27CDF45BEEE5589B032954A95CF4
0619F380BE06FB9B5328053B3633D0B4E162061E52D9150613C17086CA6D47F2
8C20CEB5F9D2E39C9D5C62A298B8BE48AAF79E7C22E2D14BDE2E51CB56601474
FD3DF4947137BDEA68BE33B1C86B31E526126B997B7696988A9F2B3AC897A107
89DA53D2DF646DFDEFE6156927A9E59B7B92FFD7360F9C4105ED02F75AB48A32
F936F46D9BC6DDE9CA07C71F602C5824D169F10B7A4C7DBE12C073C6294F2D41
197DDBAB43904B9BCD593D8D88008E689AA26AC22DD822E75F73A97CC8C165D4
7371FC14E56AAAB01F70AD759645309E0C406B9279FC9194E2846613F34C6CE3
53E9858B94C09FA230FAFD91736BD32BC2835602A02CEB8C76B19377C79ACBD4
1ACBCDFE56786286D731513751DFAFB66310F41FD958229BE2183F4BBB5E7D38
EA83166314C1E79FE90A90550293208246E7CA384F311F23DC5A7F7DB374E0E3
D066C861BA7E6882D804A6EEA79B7034C1128484ADB7FA41246F7B4DEE382685
556E5FC2A8BE210B248F50EC7289112788829B757D4563DFA8FDC2A66E45C96C
8FFFBC318B6E6593DFF6C5C708439E4EEAE16EED2627A072AAF76F9177B6D9C1
403EA94C9B96CC5168ABAD8FDEA9A92B43F3C096FCAC962C6C24DF5B892BE187
B00481144E142B083328D1C70ACA3396BB25213A0F8087A08EFE3C136A1EABA2
3D6D7EA98B4262F9F5C1186772E4BB26D59398A7E144FB336DF35BD4B32289F7
FE8C66A6A82D7D7564281254B17143538D29199F4F9E35E8B46907F061765B03
F55424EC1C28487B7D93628E039E14526B19E4EC13FFF72D950DB053BB719CE9
B2D2F75106CCA90E75B24378129AD7951383630F2C6D55F3987F3F66606A05DB
1A15E3F5A8D2A836F3794FAA19D45FEEFAF8B3CCB3E1E8BE6592231574718C23
CC9AD1A901D6705C0B8ED3F0313696F1B71E662120CFD5B69BAF5891402BE52A
4C0B13602E392D96DFDA412C5A151BA8685EA40A7E410F3EF308B8792776E2CE
91CDBB0B03AEC4A4A1155CD932A5D27518EC1912CD03730F90F3A76DA1ADF692
B8DA9E38967795F8FB86745E202DCA4627B630447A7EB79F0DBC2F796EB28980
AA04D5FE473402191FE96A25738A5FE7D15D283886D8B4550D5216AC371C4BA8
9C1547A41B767259CF565ADA5011FEA13A7BB48C61D57DE5ACECFAE9F3CD33E1
55543275D8C75FF907605F551CAE397EA2AD7D021875710C654D9E9772790830
B7AF6043F860D5D548B166C25921D8DDAD33982F49D3B8CE3EB223DCAA3F7B01
6EE4B11E863C806CFD64AA76784BF9BFB36B2A239400D1051FB0A4979C06C317
A6DD48EFD0EB462DA12B4E43A5317829D6B8C4BB6EFA642D7D9C2AD8F2766451
5F3C3B740183EFECCF29E332538BB7DB5E429B806F318C4F2C98932B9F66FF1B
74B9BEC948DB8FE7A03C5CEF1156392DB08FB514934049165605AE3703C3F096
A04154F8A7384570B8A0A5153702D04DE8A06DD65D6909629F782FF974AFFC81
0432C32A2614E905203DB858BCF75E95321A7131547E0A2C56D2746D826FAB1D
8A48A370774E5FEA864234DC9D1E26D718CBBB89E9ABF845AC69F7A8AF2FE726
24E6CDD62EB5BE6A5A144A9A0BD2A9725B047F2104126F64633EDC41FF0AC49E
7270A7468011420DBE03CD2BC96338B0D37DB51162E4533BE5094C0EC49AC61D
5A402AA63EE771FA86C4260C7CF711F7EC2A4AB0DACF13EB16BC299CD0A4EBDA
B7168E12F52CD52BE66F7C48F312E43FBF677426C6D0EFB0138C184CEB4720D0
667DC444D6342205506A827D26679278E07A3969715EC491033B3823CFC21486
8978AC8DFF7D9A4A08F4BA36665A80C7DA15AA557C55E72737C444AA40EF5C76
09B7B8A5E1768FD239F48D4050677518269F55887CE8299F546BDA7F7AED71F6
B5CD27B12812463D1E060B20BC8498014FC6AF9154768BA86963EF76C4569268
606D6A522632D872DCE712646297F9DBB90E71AC08A9BC2BB7783E87F35E9752
D76D9E7A10EC53D320D48CCF3F5864E1E2B38C83022B58077DB66E401D11E617
DB88E30C42D4BBB3F889B169C966551150795FD326B5F5FF47117E5E9AFBA783
9CAE44964C974F08DED18515818D4AA1FBAF363B899827711651101B499AC77E
57A74C206BE178320D01B4DF145D6DC515C88CCA36F88DFE7D7248E7D337FEC7
836A331679A6FA4AAC8C97FCF4B15AC464C8A8011E28C9F138B6CFD3A13D2D1B
A728ED3DD18F57F16B0103D116CFBD51821884D526E8D615308B25CA3F74D5CD
2DF30BF1DB8A6971E1D1B66B2150E43606336A2FEA31E90BB9752043F3A8E113
ED7AE479DB41A3AF946A9C7D9712D9756749C82CBA3C63DD91850416C4D7656C
3471DFFB7EDBEA862C963FFC22430F50B55270EC8EC62F0BC9FFD1E42DFDDCFA
617B71D6ECC5C8AEB5F4DDE7CB0296ADB848F3BECF84096DFB178D6A2F1E8B93
933D2C0C9B6E55C8C9C18D026D6D6CAB0A90A6891CC6A139CEBFDD9230934A52
820D3A4C2876F092EA5477430693F2C076AB623992C85AF60AA4B210562480BA
0819931393831F1DAFCA07867333632DF0689F1A97B9D3262AC9D1AED22C2EA7
26A39A6ABA0DA27F8DF4AF87A547BAD7095BFE6125CBFFB28CACC47A4FB2C2CA
4E89F6F38E7B40F2A910667B009809CB2DB3D14FB1A8D61A3B55E164FFBB126B
2A850355A4796A23B927227E51E1830DD789960A8E2228BCB174DF812C2B93C2
6287A775F7FE98DE2420B3E3A28D735CDC6DAA8E1A598B5A1515B615C416D00A
CCB2883C2384CE146E963EE5EB69F6926272B6A97267F4C63D4093BEA8A34B31
5CEE932B40A1D8E9A6E8C45BA8FB7D7D91AB2AF53C297A795976B7A0BCD1D215
6928CFC8EE865A632AB4A611CAD82809B72C190BA8B0094D7548BD0A4FEBCD4E
D01809E0CFB48BD6584E912C929018D4C3503CBED9CE6D260DC546841B2A008A
D224D4E8FD6F8BD3255103D823B86B712CD58FCB3B4B85A0222594D963206BE3
F0DDA325D4D34B30CA2684C61154D17DA5BCACC3DA7E5AA1062A7C47D32240D4
FE59570A966383AA9F7CE59375525369CA6A559BEF0360A3ABDE837B551650E8
89285442AAB9A29D15BB665A2D1632DFDA1A5752B5222EDD9012B45CF0DF0644
B2EC18AE1F6C849635FF109BB34E10042752C0B839FF9E5732279BC0503A5AEC
E79BE575FF8B14999869877BDE3F4AC7FB5EFBC771FD1CE6C57981689D4089C6
B147D97CA5BA7FFFEE3BEF3E46AA957F5D1988A3D8F64CA95E221FA85B551ED3
3D19A1FBA979FF7BAB06B1AB21AC051F138B3DA3C710044C03A37A680D1F8062
96BBF9424282CA32EBE7430237F1891E70B91D9DFA630A0087ECA1949CAAB2F2
5EFD3C034065ECCEED302F06CB8CC3532436846920D4D1B6FD7600696818D3D3
CD78604674650E4B06609243E79A2887FAC7A3D8CAB54D79BB7FF1573C2FB940
5DF483929599A0F81B43C52F5C88CA3242F20984B44BB8F488030C516E31813A
FCA02EC2AB68D12BB1C15565827350C26C11D123711C6A2D19F38115D6B386C8
099A92A9F4D61D9E03581F22C0D366590BE5F0147D68C3AF62C61C4E76CFA1DC
429B4EC14006AF6BCD223548188455F292B595949C052C711FFDF511E0F97AE2
B7914DD05810A02DA76351A047D8D0C0A6E8D9DF424556BDEB6D667270EC9913
D2BBB6905704CF35D7BF8C3CB2AFBE30987DF28AE000F3E4E56446467C09F885
630C7E96643BEBD675A36FE626BEA809DC1D7D0AFB52BD7BD06B3C46451C4394
5E576DCE2F0AB9A32B63A95CC91EF41B8178D50EAEBA295200A2222E49919A20
1DDE448D6B0B9DE5B32AFA61BCCF0EB34CBB917A02D65D8C449D9A1CCE52D8EE
CD52AFF7322BAE688DFD73F7F4FC344B6B0332C4717737516C7B93715AD4E5BB
7B73EA16A1F1976A8116D4170BD2F9696162D5ED8083082421D6EE28D15083E4
1EDC53EE7F396692FE5907821470D5B7A0906CD92658FEFE5A0ADC08552CA63C
99707192B5A2F9860B20D5214B61CD6B1DE194DB09EA16A4442709A31DF9148E
BB63736D4A6896BF31686640AFBBB6338D8CF730881326E27BC33436A35995B5
0C42FFE68DB5E710CD843327B1F360133AB8050418585EDBED76033A07E9A06D
683510CEA1CD89A67BCA5F06C89F741DF661BD92DE482C8FB5537B262AD16ADF
91382FDC263EC82A20141142A591459C18817D1E2258EB8E4A1BB57431024DD3
9C3C6F3862E1DA157FD3BC5AD0D08290384E53ED4DFEC21F1B21DAB1035F6D01
4F224436F615E966E2500D38BC502117466FCE1F7924228A89E0645564B42C4D
7890DF8420A589993F6D8F839808711285E2E91360A6F118E90B180B45D06B34
D1A0C76B930E62B73557460393B143D807E35B8CDC1B3E1DC2CE2D28AAFB7600
E624B24D44ED1E3D3F761928CD2D8CA7A1B133AD7D9D5CB596CE9A764D8FB115
97FA64C204AA8AAD5CABA0C6C14796A19EF175214EB32A5FC96F88FDB8F030EE
E0FAE12DAE40F0E80F7C388E7F4D07DB3D4F16AE2508199975042A9C413C838D
BAE11B315A3B6B5FC1351BE2F705AE2DECA9ECDE88EE04FE636A43B6B361AAD7
9CCB822777BCDA74BFADE0E3863F1193839C6B39CEAFB6F2691EE29C2B47F338
1EF256C0F1A4490EE2F1C8DE42DA35E678A6FA8FA13E04D067B55F84954495EA
3D40E26ED4FF548AB5AB1461702C16DB6B9FC7A6BC09A67527F455DD2CDB4EF7
D6039F6115845ED202CD425B81565F28CCAFA6C04A712C56B3292045E81C0EAB
71EB22298B42D203330B32AD0163D66A18179E474F825DAA128745E877F39454
0A8207487D434756767BC43CE3374061565E9085D389DDDF3F2EA3132EB84619
047B37730FF25D8AEBC38E33C3A7E0CCCC8EC2079FE957F3BCDC08661BD7C7D0
6F2FE778B4EE8191583295487D9AE31A044014D35FCEA486C89FECABA5E0E177
CD82934F656134D4B983C41B1B2ECB82FC17E22A1784C351A4935749B7970162
F16CA75D4D5D0A73FCBF133103B3355800BCDE88A6F9699D5CE084D294BD4418
1B96F5F3D8DBF2A2EE354BDA3863B63E482B0A816D02FC22B7ABDC397EFCE846
2AC769477330219D885E41299C3CB2CF756A362ACF997626E16D3FE565257451
3BA17456537B9BA4B9C5C07B1B63757EE51258936780574A6F3F9E0965491932
6515107FF0EC0BDBD570CBCF422086DF361547AFFC1CA1B637F76E29552364D2
246FADD828B53AE4CF2BD952539F99EE3D81563D60618112F967AC6CC7F7894D
4A1770C7128A684EEFDEBBCAC4DB0007DE940059564927AD698C6166A81DF855
61DFEE1239CE3571330116E485DF5D7A4DF09EC8C79304CD7B55AD991F578037
E09962E46C25B92C9ACB8D16A5AF352167BE6CF93ED4E6F03450E611D42F4001
E763D9A8E4A799A0706A9273BC4548E574FA8E318DE0ACFD073FAEA08FD99ABD
AACDCFFBFFEED19F8E75D401CE973CD33F3A9A888FE0829CAE6B00179347DBA9
F2647B87415845FD547577A0AA27B65B4B35F6958AE0311F140A8AE274839D5B
7ED1DAC77D3374CFC577B420EC63FF97C2CBDC7F63CA49DD65F6F5E1390FC739
FCA36697536F0D43CF7A387C834F46FF41C080CB2EE822FA763DBB525A095611
9DCD3AFFB5F17EEC8D8F21E48F41F7F876C80B6D72371D0AB16A470A59630D9A
85B109F035CAE5DB83CAD3608A77567F706A7250BA77253CABEFD8AFA7B46A59
D75D8496E13603343C626974348F8F5F7072DD97CD59274C9A05DBCAF09B6B79
7A22C2BC88DCEFA36A3E21CEA81AE8B437162ED7A0A7400D0CDCD10E28B6DA0E
A3472267A836268AD8063807B096300A2A84D1DB63C6FDF28FA577B390039FF8
D756E04CA52006A4B03F104309E33566AA9E6EB8B49AC2F1B0EC0E2B221FDCF6
C10CD9688A302AD8DA02840FC01244D6739A099DD11A7D480B017207BE9B7F46
09D6ED1AA5F9B05F3D9E576810FD5239659BC9FCA37E6D76B9A0C7E18118B2D5
52B2E6D7B9AD890D6BC646FB8DCFEA759238ACBF3202FCDEA96BA7A93E1BA62C
2CD5C22E08EC50BA7E5761451AC80F08C2D2557A56E577DD13A2A832E7C8E435
FE0432E1E873643FCE3B50F0179B01319872FA1BAC9EC7D0F74F9D85C0876E16
1E1E0C822EE2F4491899540B30F28B237A19C68409B03932D86C7338C80935CA
0AF4C02E763C16AEDBAC807A12EA1B906A30A7667D7C59A5AF91CCE6714252C1
F38360506CD683F146EAF011D14F63B29A917A16AB20AEC7568351CFB174E8B2
2CC3A6AF7C089B7EAC05A929F62791CB1C464424E8E836E1793D9C3616979E58
E9E574DA7FAD5458B21D4821DD03215A44BDB55A5C7C268357AFF5243D204AE7
F08CB6F956B7B354226FF57FC7F4F3015E1BDA8E130CE7A4191CF8A67C43E40A
561060B6A5A4468B2B2519487A89AF2BB4067AE098830E0FA9C848EB6BD33638
4EB4C71C681447DB4E3E2635AC6DA43A7BE80B4C689372CCB23B01E300AB0E38
70F33501BA52BC5EBBEC554C305006B035763CA4CD867D413EE26E6BC3782CCA
06FB04BFDB2C9CAA2BB327867F1987017F003233734E806BEDA0EE28B4274A6C
06CEBA7C968D77F2C5E77AD9C8B4DA413BD5DC712A91527CC8A0785D6418B151
CF1C499A29F27CA8945A6C8D5C512EE59DF93C5F85C9003E48804880D649C114
D8F1690BB9C66F6BF79BD76DC543D5E17FC3E87BAEED0B8C3FDAFAE92587F5D3
3F8FF7AF17156CD320B23DD265BDE2BE15BA500520D97DE5BB8CC374EB8A5708
7FCCCD803B9119AD221D68ED63096EB704C4919FB38BC6E13EEB7EFB947F6EF3
A405C1481F2A9D89086A27EFF6A6711A26182486AFA6618501C817CFB2255E0B
419AD233DBF47A48BAD62DD3852F5563AED649C329BD12E47C001EBF83071DF0
72C3E93DD73B6963AB9AD2FC5791EDA8A925EFFA77BE804FE11AD56720D7DA1D
13DD9E9B8A4E95C80B3303E821123FCB0947A6DC7271E8F4FDE6F620359F7723
0D8ADA5FE8AF48D8FF16973C6729435D998A79F141B86BCEE3D34F80EBF8D058
3AB7264FD2D7190F6415551A520B315F7D6B2F66EADA71524DE14A0779E8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DB1749576FC52C627F2181104E45B6D90C4CB7ED8
92F1A55E037EC28EC3EA1E403EB80B85A444CC84F8DD351882D81CF6D538B644
942B6B97679E4B3D29C4CAA8344432F60E76A279100D53E3A652381140A60AC9
E399D564C91C1B998EC74BA4DC0AA1B54D55FA959DBDB3A3D59D187984C8B19E
111895943C6CE54E4990F54783F3F12333238AAFB953188F9C9B88B7B5A19F81
62E5D8454B7DB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C48C5CB2C644DA
B026162A499787D099A660B6766CFEEB7FBD3285F689A85B864F9D252EAF5F5E
73E8BB70E64EEDEF0CA24784A1DB7F945DA3C9310C929E52E7F1E520E0F0F50C
287A850CB8F474F37399F7AB451FE1D956E1254970C706438805E25284C7CAA6
EEE7810D69F2428045CD609E23CE37791362950FB25AB2A10AB693413B1AB7A3
5B65D857089968DD4A6A37D5F26E8EBC016257E8F4D3BDBF3850A455A4BF834A
C254FBBBDC95998DEF2EA825E3BB2AEEACC0F30846E22536AD74B6819A058C9D
D483677E091DCE521CDF390FEBC79E7F50D3DF9F3E5B6EB1E7F5517A860224B9
ECD544CBE2D7C6FCEF4143E50F9A9079DD2FFFB1672751D8A658C45E07B9558E
776E94EC0991B31B7DE95F23639AF5C05AB13D5A1C28A17DDC8EFA3F3BBECA06
E09D438052E27B75787AE81EA98B34D8DAEF36B9E5DE1884D783C1E2041480C6
862C5CD0D47E24A2BBBEC8AC451239E34711ADD347782194D0FA7B8EA68D5671
095566DBB3F327C441B2392BA948E1EC46435ECCC3A6CB7A5F2F60CA54F14A5F
F3B3F2B3A0D09C2E80E84D859005B46DE826491E802DC10AEC6FD0AE1C3298FA
99C53536EDED25435CB78EF0F4A8EA38C1F73BB1572F7875CC54AE4EDF1087D5
254167A21EABA1D8287E95DCD5BF08A1FFCA11B8BD493853D06B8FC46751A568
9967512AC84C42DFB2D9C47204DC605EF7BC00D85F75BF5F32B350E2CF46BA0E
8D0120BF165A428CA13FCD6B0686B1A34F221780BC3FBEFCE27843EBC897ED2C
6EAF713011776BC1FCD81EF9A29A807BE4300283AE5AC540D464771454AC4CA9
2840DBDA7E1B7B1B1505B3F1266FB8568E4BFF0410C0775643A871CE8580556C
16A49C4B4E8851D93331FF3001E75D64C777FBCB70707F4F0F088114534F6D36
E4D76B65F8774F02A5CFE926BD4891985D68CFD7AD774BEDD19E816587D025EA
6DC053011212523A5C86E50C82C0D98D851C9629B978FA10CE2AC0425C783999
1B2DFD3164CE25F9A19F120360F93E7BE38AFBB5932C564E85513A94BE894217
DECA2F18BF6FA92CFB8D535B2D1B67CD3CF5EF4349B3DDDE8CBDA5AFDB246485
6F531DB9D7ECA48701B5D4511FF86644AE56F46392D9CF48393E530139BE17DB
6A1EDE43613759B68D109146C4433B990B0AB267D3837F53B0DE93BCDA243268
E89D1BA848F9FDECC6604E7D488ECF152B694939E28D488E75BBF597DB49E3F4
2610D596C1D91A878B4A2648506E87CD85E84C54E47C448AB0EECCCBC6EC8E82
6AB2BA27088CCF6A8F90D91ACA913F1D146B2E267EA777FFD62509810B87C552
46B60391D5CFBAB7C1B86F3EDC61AD43FE9BC177C7DAC8DA44B2655D8EC9A13E
235F1B8C2881C0B52D16CB8A3B5D19876C830FD788150D82EEA9530D185C5A01
2B4AF8FA0D43DB3CB9F83BEA96C9925A5BA00548A3141A3981955A3C282A4089
F04CEE35C0B41847C41C143A8ADC78D79BFAE3A811F2D67B799250CAF1112087
3098B51384447951AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0D339EAC1935
F8964877EA22D9E5D4256F3134B7F3A62C11FD1710119FDDB6C7098134D90F8F
B896D5153F114629439E6B8AB2B752FBF5AD056EF2A9AC6BEAF4358B6F0A756C
A29721D6784A86F3E68670240CACCDC5124B1D4E67DF3C21F1D051AEDD11F65F
E0F14DAC46EC88F3B6577184B17C8320CA028F402E9602317FEE444EA33B01A2
2F873D195661CA3A1BBAEA7BCB4E465DD4B94E0C5EF66E5F4252E5511A19172A
E7E16EFC2202318BADBD95D136728FDC1F3B174E3596DB82865BF5053CFB253C
24C65B5AA6221F458A151C340C5A2F835F9D0AC73865D83810A3A6B72B91DCC5
B8A85AB8E16778C4284F21B29864E26D31511F85D2D2809806065D2034DDAE9C
7B38F502A82A0D35F24B66D798F61E9D66510A1A86F80719F3D684436EDE35AD
601627B61F029D08D9A281520C4A3B4127C06741F0F70E1A55F20456933FCA64
CC1B060E260782BEF6721C7F108A0C2CCBC094031C7139367941CA39AA6DDE23
8ED59B3BE653A80FE9B5F613D694EE004270B5FFF26BFFC184A3C6A182563FA8
F8F6A0A210405C9B5CD8796AADD16EDF3BB714C5A037F58DF43A39DF4F494455
37B8F67721883BB280365F5DA1C9A7DF298B8C2FE351292F1C935F264BC41873
E40028AA8F3DD3F0B1A291E4A62D5AF6B69ABD9CFCCAE361770F7112D35E277D
4D3FFD95F32C14424A2B5AFE307C7807A80183C5E50DA12BF2F08521A17641A2
F5541EC84195149F6D621C746CFEAF186B9198AC674D0A76D7A11670C954A449
EC4E1C006ADFE2CCF08EE40B2837B09EDB5A316F841806A3EF9BCEB1A196F940
1A0C475D1D047809FB018964439FA7B3877858BBA8A26697C5929DF471071938
6E4581BF1493794B0660A2DE342E973DCE4F22F58D24B4AB1D4492ECFB3F7AF5
C3ECA837029A45B27572914CA4189749A74DBB0EA1CFAFCDD853C87668F76D42
0E78726B258206004BA387FAA821247D20ED83336504E06A82A194C7BD042EE9
0B6808E249327D58E53663421E0B1356D7C73FF4178CA4DBEE8AB7684BB471CD
800A378306459C022F4127F2E2207BA5EDA5BF150E373526CF55A76CC97FA47F
FDD7D89F79716527B77AA521C155CE3B0F52E354F0BA788AC9BF66C3DB5DEBD2
71270A478AED9640392137548DAF2D6476ACBDCDFEFC8B7BD24AF41D55196DF6
FB2F204F9812F73D55BF7E9EB4330844CB6AF35D2AA9116D7B649FFBA7CE880F
D80F40C3AC18AFF7308E78F05DB84209A2A06E998BC239F96D24325048BACC9A
BDA9206D0AD26400D878FC92B08DD94FDD0788C9F699187671D845C8C43BCE9B
25CD64E26B57F1DE47D6F9DAD18BE66178622BA86B74865A45D3C82058957883
B5D74BFF42EF404D0B72EC09A99E846384818A44E541E4E108DFE5E1E97F3BD4
57397797B1F5E1DF730CF36E7E0DA7F98056197888148E53F04D4CA153663EFF
8A63016F79C7D0E6C9026B336804C9D88F0EEB0C993216CD336AECEC76C0FE3B
7D5966A35557DAF14A4FAE61403855815D8F7983522486EA3FD2E3D8B66473C7
4888BB0C5CE966D64204063C1676C3926651F5B3F8666E369D50682A921BA05C
82DC800F7362CFA24BB2F3D4EF7D39E1902C53053C202C978749A095671A46A4
D8C410705B100FF1033BE014B7CD8C2DA31500445B3ECF6C6035F883EFC0DF2A
A75EA95E9E898B13ABCDE7322323B3A2A02A0BF388E89B4DF41069404312289E
AC5B98F664803DD7D474A5E0C3E67E8FA0B18E7063D7748945087CFF16DD1DFC
964B4C27683FCCD1C14AE308A9DE8E06E047C76391ED93D9810851A03B9CA089
F7320D1B9BA214E43E83C1FCBECD573418C920277639390ACBCB6F9C5C70E555
DFA1D8EF22E7BA06F33A32C37D7C00D1EB61E25ECB12B1126317F7ED54C97748
1778614D372B043761D928D66FCB9D760D333DA34E243D08DDBCB12F26FBBB8F
9C43DD7BF7665D5C87EAC07887EB84556F43AEDEA439FBF139A16A55342EEBC9
0033144207DC526F24B186BF758FFAA8B678DF14C6FF92CF8BFD11AC59DFF36C
25AAA8C771A83D9CBB7DCADEF7866486665CEDBCF387F67EAA68EC3C5832338D
9BB698487988764781797E2E36F85B97FB489A5D5A12D536115F01BDFFB5EB6C
F214440E4DCFF294E01915AB0165004E47F96B61BA0F88E99544E109918AB0BD
CA908DF6E9A1CAB183E05EF9F3644BF2530CB119078ABB982C5CFED39BC18430
53FB2909D78D0CC5BD0202C8FB9DFB22D48FD50D1EE2A9FEF854CD6238126A0B
323E6E81B31C557A7D64B43EAF4ACBAC482D06AFD458F0DC3F4133EB34835C7C
0E2FBEB1656E6DE0718D62481CA06AFC73449B22937E48C950802CC7B24EE992
477BDAE8844F739EEF29A005231D03B51D3B5ED98C6D02341ECB3E8092A4D59D
6E77D53634C137AE6A6E83FC0D04CA55D14265E0FDAD510D721956F7200EAE8F
93ED95AE429D7CC8C0EEF48029DB6BACF364CFE0BA0B773753BB577FEC7FBA4E
48F13599875048DF2F55ECEBAF8931ADDAA4018FBF2C3CAEC235BC863688B43E
45786255A4DC7DD81BCB713697BB4AF64F4D308793FC1B34FBF5A82D9A43BF12
78F17B4CBF6DAA00B960B965E9C7F789DD05BC0945446259B8B0A4B09E56B245
38CEB6AA2DDDC988D12BD4E208610DFC26A600CB272F79AE07698A0018620539
FAF5FF0CB60BCE7A4975433D1ACFD965F3C47D22B2B8E48DD5EC60FB40476AD6
E7850D0E405AE6523DC0CBB3604510D14FDA13B91D0B53F41B0F31EEF6E5CB36
F29D51120F1A78999867C5F0970BAAFB320F87FC5D14039580BCA0C820277639
390ACBCB6F9C5C70E555DFA1D8EF22E7BD90C911C42005B99D58516FA232E661
C7AC66134A730C1BAC007FE16F87149E876229B1D9D79B17F2D3ABC764266F25
BAC550C282E77B265156DF6B789ECECE188354FFED7B26992399F7151E5B56F2
25D5F360452FA11A8A4A7847107009B163709687F03E8904C670CBFF1BC3FB7E
81230D0F8A676B928A8884081996FEA9AEEF4208C6BF8A2279E9B01C3D7B00ED
AD8F622B8166EACE5F1F7E95016F858D6608F304E3C1B9FDF97FB541A598466C
BC731C76FFCDE3DC72DFFBE32D06D800F52E0882EF078AC20504D9C77E08FCF1
01D33E908A71B94B57A71E9D0E75B54A0ADEC289ECF7C91A46344E619A84577E
90EE8158BEF379A1F1FE5E41BDF8E59075D83082AB0165E301D00B20DAAA10AA
02B9A6E6EEEC07FD93D19F9C0A6B2EBE3165BB4DE936CC3A4BF19EA1C5D6C0D7
9F9DB3B7F0D34576D44A44F108ACDA4E402DBB7F245AA757A20B573E93B7DBC1
3E8E66984826F1301300FE37C74CE4097E1C142088443C22628E66F9D36C8B39
6B58282342412B7EEFCE0EEC76414116026BC6FC01CC7AB541E85B3C974C1E0C
593449E31AA562B4741A6B88834D87621FE230CFD21CAC6764484364FBCE6D70
1FB389257B8BC394FC2BCBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B0D5B1E
F637F2B625D3A4C5717F7AAB0EC6DEB96170BC42E9C0AA97AD291A3032F4198B
12D0D7A61B06D63389A3DE8DE54897E8B9F0A0E73300686A2EEA2E5002D7CC42
9119063C790D6986F72167A7B5FCB735BE5857F22DD9BBD6B1916CA2E00321E3
409DE3B9941C7165AEDF16E014C1FFB37751AB5F9D5F7E685C44F5AFAC1CC00F
6CBB2D50452F80C93A84675B71AF94DE6734578EB4A5B62F0BBA64443EB7D0F6
C3883D195661CA3A1BBAEA7BCB4950B83A0773D0F7BDD47F29D25A92DBA2AF88
984C142F296F5EC44CAFED396F68A43C26BF138202E62D84800765E74119F5B5
3CCF11576A5B3D14BC2AB8ED858D43F66DF0CDA1BD5C661A4788A758181C6C21
3A2A51EF5CE647E9971FA87911950FD65E90E3CE3A2F684C07F20223EAFA0A96
C971445D731DF9B83A7A1136A9CE87477940047E4EC37FAA311671BCD21B2926
BE4C650BD6D0D1ADC7C4EBEC25616CC076DC7279B83FA125D6DD423540BF165D
4AC10B712825A46A68EB78AA3D2C058488C29EE7524E942C90D9FC0115D85BD7
B8DDE271A0D13042DBFDC1FCE6C5279097919A2254314FCF21D618A11C8FE5D4
0D30BEC350358D62B7B015A019679B0B8E742902AAFBCF4D4AC975ABA0286FC3
1EBB7B819AE455CB993EFA453C94914EBA348614E3850F73A8B2C5B0AADF8AF3
E1CE6D032BD2BB1D80CEED73812B66E3738E8F677979A1564BF38BDB031830C2
A5366F8716DC33D8AC9B5BF5782FFC1FDCBCA6456FE76D34AD5D4D314FCC5389
84EDC70C0FC586E3FB319F985782FFEB05794CC8977E665AAE5AE150D961FA70
CCF2A9568E3A47FF5923031E7BCAAF3A0E143415DE40C492F1036351910FE6B9
3342626EF819845D63ABE36CC2C0C7204BF83B4F7349ECC5BFEEBEE4CCBC754C
D04E4FC6B1E3DE635362BE899C415584C1F2BCCD0BFAF40BD9C5A8652C95246A
640E9625BCB3CB6C9D0F6AA91AD38D69132BB3CDA70EDC5342656C12DD50C531
6C548AE06C27913E3DF2FAB630C7A12F545533847B233CDBCF7C83ACD62213BF
6D8A8C77FE8B2061655020DC0A92111ECBF02129EE8DF16E063B7BB9D3460685
F19031633A7155A83360304FD4175BBC50F3077109A450059DBB3994AD63D63C
43278C28FD1A4F07B8B0680809F32670C2F1A54555FFFE67565AB5DF23A71731
265FC524075ED47DD6FE8909C387D8F02A88FD24540AD7195A850948F76183A8
47F202D77815ED3E8E7869950B26B528DF4B5AB8E1B0DC311FD77D52210EB207
3CEB06E5DDB36E5A8032FCE0B50CB70D4F7E3E5272E57DEB9A2357403C2477DA
990FC58E46BB65AB0676A40A8130F05B1B0E50E6BFE03965204975859AAE67B6
7B37AF86DC4A75FAD4A862142B7A895F9DB67F41582D0C817460440E9E04977B
DCBCAF0CCF5D22E677FF4BD649053FD293830C4EBD3CA5719BB456D1AB80B6C8
0C550CDEC09BDF5FCAAF5F4DA7743A09AFECA6DC807448B48C85E46121054F17
F4288E56438EE91BC7297A8469F567938D322536CCBABBEBD4A514626C26F052
A95D65D942ED54E36A6C2C3BB0D89232567FEF3D544A8F9B896303A47E29FB09
B4ADDBDFD0CB0D5516F615FEC677A6D52BB7D6B0C6BAA0F25B2A9F922A4995E0
83622B36DEFFE1A6AD802B4FF775B6DE6FF9635DD8C6FD508F211931143BA01D
7D099985E73099943D762D20ABC42DFCCF4ED0E151DCDC6D112A08E068177852
1870E80CEA2A87AAD5CC5FB7E9D3D3D31B8637A7FE55DF98DCBE9015D4A4D35B
006CE68B3D19FA3B61A759C707BD7DB9FADF6936E97D67897C643267D9CEB295
39BDA71BBA7E79A8A11520BE2B47FA59E78C28F8C83803992132E16AF8AF6D02
B1B53941ADCC68D6220A1C15988847BCB5B01B04F5C3A01B3BD2439367DAFF1D
47B7EA53FD3D3ABA9F3CFBF0C0DE305E7AD2C9014001A032465003A5310E0401
6C3AE50698C63E3356C89EDB5D5B8AA2D56A311120976314C02C4D84CA61D0D3
F0C0E7EE52EC5A8A0AB9A574039A5B0B9E2065FD7490C7AEF418EF47ACD12550
68A21969742C55D97F1DC437E05F76B3DC275C95EE5FAF3A6D876536B55707F6
850492FCFC8615892C4304686401B0AAE619F7F850A966E7BD19641F47A05F49
CA2A65E0A3E935AA652C0B7305FFD0D434E7C0F668AF758C46B5E53F46EF2081
22D8CEA87738923689F96FA3FA86AA4C503C7CA2D05701B6A0861F56A5C5F8E8
DDD7180F306DF16E79A2D2DB98072CBCAC6DCE622EBFF358E63D9F6000F11FC2
357FA3A8BBC91CECA3DEBEB081964C6150ABBD5B3A4B88B8F2141AB69CBAB904
43083A74742E895C8B2BB07DDA99390B706F0403DAFC454A30381E07F915846D
BCB2C690161DD5A7476AF4893C6475A474561B6385530D40BAFA9E409C73D39A
BBC2B58D97BFFDD887380109216561C53A75A5FB859F2B46DF97AE05915E791F
1CE849154C53C4403B43AFDAC96839397CAA9C23D0F483D155FB93C29415A779
57BC905B9A03FF4E214C11868573EF080958074403F52A37C14EF4FE416F8FB3
B918C454BD5774AAFB265AD654FF066474763370EECC9E1E60195986EB4C4BCB
3CCE9879E4C129CC139E86E1BDC3F13FAF7100C965DEE0BC29EC531D24870365
A38AA8C5EEDD3B4748251058487B73E9760C57EAD7CB37952D1A0E9F744FBE80
41D7F80AD445AA4B08E97B5BD3466C6897065446F7653445CEB58FC5DE5224FE
992AE7CB66C69DBE7886D7ED3F27C3617B84B6EAB895BA6138753EF23A95D41A
8069B91AD6161F18BF75E71B5B6E7022B99AA55C94130C7A4AFF9878DCDA9764
F56EC19382F2B86AD651CA2B01DB899DDBE0D0A526643E1D0F81D86CB8595D09
B1A874789AEDA31E71A915FB663A04001D43A504ABC776456B69DDC90C6D7DD4
C2D071F1C8E049E657F5F14377D75506A96CEF9417BA30602EBDBB815DB99556
9B3E9E6F95C41DEE629A189E9D5FB2A75DD37A909F53C828A653E838F10070A8
A262363543F04DE5B6F611520DA4696FBB73F3CDD7BE198EFDB35B3317308967
A00EADA8A54DD0385F305D14E32638D350F86FA328363D1B4FE236DDDD5D327A
B239D9D6D92DDE4B0DA61C03BF4360FEA49064FDE911D77067C20C6F31801F82
3E6B21EF61C7E869CF3B0AF9B350452810F9349B099A38501F2314DCF08578A3
0A60020A6B80A374C5060D0F0776BD7EBDA80080E3B3FC14BAF82BFDF274D3B5
576966137E9F90AA3CBF50D220AF7255387FF65A63CF2A927E5F2D7313EA2C56
10209DAB5B6A9150337127C6068B9C79A4AD5C1991F7977C9EAA35431625FF8F
D008BD4402918043BEDF77B840B2BE0E5594243F7D9FD8D8EB4A878F25A58C92
0D0FFFD6FB602792243EFB20D792FC6BA87AD98A0BAEC9D3F17AE9CD0CDCE693
6425CD45C0A5A4197BA038ADB36BFB0B0C531E479A988692F0931B645389DD9E
EFA606C7C16504F882FD78BCD95862F2884FFFA17C26969FA7AC28A6FF2DC4B4
7B3B48AB7AB10734FA0475D4AA4CCEA042816BACB5C7A0775CE1A0809D5C2979
D409E4D68BB6DFCA01368E371454CFAAED3C30CECE4FD7CFA6E4BD0ED071182E
6129ED82B2F9D5CB5D32B93F2CA8FA546DB1A5A2BF321AACF862FA731D18CF33
BBF61F01565E3C825B0D6146CBCF1454CFAAED3C30CECE4FD7CFA6E4BD0ED071
182E6073FEE4C6B0BF4F58336B495790F2A96F1D10C8EE6ECE02DCDCCAF5DC69
E296AEB1A806F0222132EA46587E2AEAA3B904112140552E1280DD31317A2394
86A2278F0FE2AFF4DDD78DDA83C237AF564E874A8CC6004D041C55CFAF405F47
77D344C4ADF44538F045091160DFD4AA29DBD79382F68E3993AD0B93A7C03D10
20B9FE9F780E3D55D993744BC84E03D6F2E5A5B2796AE96053CE2780DC7750E9
7BD02496F62FB0778169721B3F1714B1B621965F59F2054FAD9A3878CFF50032
C9215ABB00DB8951CF82013C7CADDC2C3309492A3DB33F8E9EB23EEB04AC45D3
4A294115CB01446379D93A84DA7DDE692830CEEA2D544889141651A5DEA6262F
D54F422E7F9553C125FC3B9DE248268FBE788A4214863168A679D4FAD134E4D5
6178F717E6E7FFF7B1BFE2E98D872573C86536F65E670A06A813D9B83BA91C2B
1EA4B102EC16763EE0F5092CA5030AF4FDDD9069BEA6501105C9AB89E142758E
F9A36F77FFDA9116B4E8CBED2FB8719044CFAD402ABF220653833437ADBE66A5
3BE748C4E76934D67AA367955FD34BB7546652435EE004F57D417428F2ECC729
EFB3AC2543BBECF09337AC26BBB0E45CAEC8BE479279364FB841F44BCD49BCCF
B65347FD1767DFDB6F85337F7B399827B86434053FC7DBF813A96D33773AACD4
000D71140AE06EEFAAAC0AB3727E59F1642789A1765F02944B8E689AC7626485
E1467125B7EB3C9EEF561001051A26F3196E2238683140701ABBD926BB41B1B5
31E491065D57658A2845522035B2875A44EF7DAFEEC6B06D7DB4B3BE25BB29A1
BA5921AA479B5B48F87B63E0A3565639CBD91D4DB48EF838AAA5C53454E279BE
24D3DEAA67D8ED7A01FFCACE2EF9EB9AD584935A58676976DDD2B6E118FD1D44
E863059495BB77FF54F014CC293B27057DE8158DC15E40A40D03D5DB93CE19DE
B7C60644ACCDB4EDEE8DBECA784878F4D0643460EC9526C92A00ED348D40DD39
B82DA68451233CBF49B756D42FA0CBD862C56A5046047DDA8F04FBEDB4CA29BC
51FB2BC0C62CE1B3FEE159A7BD1F296CD053A5C735EDC975CEC40A46F5AF536A
3AD35E6AF31702C467B05AD7A7A7BE352CFCCE52D9325C8BBDEC3C3AC8E233CD
F3BE813A9E2555122B46A03394E8950F77701729711369CEDDA424A9E19BED13
D137DFE3F01D46DFB92C897D83ABBA76105BFF7E7929B8B36A0F3C383E41D33A
E8B2BDCC9705D1EC8848293ECD9599CAADB70331F694CC96CF93B817463535EC
7FE247A0CB0AF5CD770D3297414ECD1FEF73532047FB1478F8554CC724500DFA
E395E68FC891329882A2639575674B2A47C068A119CABECCB9206CBBABDE8C4E
5E6E6B61FCFD3C2BA11D6C86EBF5CDB65E8DFA20E2077404B83803AA3A4643B5
F81E0A22131DB04E222FA8EF0F6A31B9820C7AAF7C7C9780FF5DF5F69DCD8FB9
2B332FB6509FC3FA395199F80BAB0C5F04DDB4B27952C3745B76EE5B168F047E
593066E242C394C0B30C2D8210846A85A5E58EE0E7270BA2C6CCB305D9C4587A
C495570DF9C4F05525921AFF53DAF38EB59E0F97561179C2C0F08E832E2DDBE7
C66ADCEC06F5567D31B488B661F8C45EBD2FB0F0EE1D4A21068DDFB24433BDD9
1BA70E84115929BB08D42023B94C5E08A7C457F254438F234303E15D8F7E4DE0
09307129C044539DEB57AA3DBEF8671AACC34F3E4C8B7F07ABEA1BAEB58FFECB
7489DBD42DC2A12028ECAFDB6CEAFCD1246A7E4314E83E34DE35A5260384175F
C38213E84E11690039F50C12725A14BDB45D92379CACEA43CE73C4B7BE0ACAC3
35EDBFFDEE3E46DD584F04936B53C3C81CD9E76B3AD9F8290D5915969AF272C2
205E542ED8737891E67A8F5DD2C3154FD5480E88E9BEEB2499BF34A46C864A46
97B0DBA695DE4E68439B79B33FBBD44312EBA9063EA631195BBA0DDA3F3F7061
C15460E3C1BC8E20988FBC4701BFB8BF3EF2C1C6DB56FDEF4190263A01AE737A
CE2AE4620C9803C3D031ED3D5783185B69DF809544F529194D26EC7B74F1E8A3
69DAAB3305C440A686E566386C4E57F619FEC839F4D48736977F5B21F6961C8A
9ACF420E7E30E44365D3319C2134B46322F7EB16708D2BE2CA02AB8E0D0C3E8B
D00B108257F92AE1869430C6DE57F020DB975DDB312011F19F94F8BD632589AF
0FB8C8BABC8055031363EF056B5D65444578CFE08378B1DF7086315EB2163A26
AF2CEB9E359BD9E5E92EC8F6A19066B51C2FE1678EF11064986DDA53A77FBE2E
DD38E22689D398BB3667E4BA66F7844A77BAEC87EF5053D888D6C101B6CDE17B
92E526BD45A921C4D6D0F443215273F91C3DC8707547AA2DEED29B985455F21E
95225D7DA4780BE7588842D575C429AABA86C5E24DD1A399C71785CB889E27F0
BC2DBA726B307A8EA9890962512B2DE3CC959848E590C4551EEBA36E8B8DC122
B1432A6BA9A8A674CA2D5F3F592909AAA8F44A6BB4A34F1C35114EBAC0B0F263
ACEDDF61DD3D0917C1539A5DAA9AD34E7134BE594B65D76B173700867E2028EE
56949E915B81C56CD5055CD7F5226685F558D0EDD67F350C9C4105F867E2AA3F
10C3D706339772D69BC62743F758B67B1B1C6FDF84C9B2E9E9B298B465EADD6E
0378A1F7D1A254FAD9F125B2599B59AF47877A82449559F4602627CA0932C2B9
38A071A719E64DD2A0A2F32C5D52B15F9621BA9E1688463FEA43F7297131115B
4AF2D9DF46E1E5B36E223885BB7E1E8B28BAA3232595A07CBF1BD05B68870AA4
FE5CEAEFF2DCF00526FE36A64F79091E373D27C0B88AB5F039A24FD0F3180EB6
F316B59E7BB99EBC7521DA5BAEF8AED3B848E230572F14524F98584ACA795863
2CECDFE1ABA0F78067D00115EEE8DEF5E7410B896BB3E651A8C015BE75966177
9214401C2C0A05FFFED46A72C245F7529B8EA55A038A8A1E77BAE6D06BB1AB0A
EA89B6683EFB7343EA55CD37FAADBFC6867B4BAB0208DB3C5DD474D8829CFB02
6CD35422238CB8CE62255BAF0145692EE3B52643A0DE3E672F294230B9826E63
22C4D6231EFE10719E907FECF47A5C6D76E2B23333ABF27FE159FEFE89CA6E88
F43E2C8E5DDCCF48393E530139BE17DB6A1EDE43613759B68D17753A29357D3C
3A6403B9A7675DC69ED861AA0478A60C96485883BD24D106382A82EF4900A178
29C8A8DDDD4AE47E5F846A44428053C6C606216322B5CB00EB11973241CBF09A
C718F307E80B29885BD8B971C8670EB6567ACA29C72235C37392697AF95FB4F1
AFD8CCF42255F331C4FF7FD0FC8962530A98376BD26C39075D9EC1A987B85615
7952F4DB65684D6CD4AE246EA88B6567C07522C696589828D6CEDCBECA38F7FA
E8C1363A6CBD8AF8B8B82AAAD74A6B73608413B8369365B495E9EEE5FD08FD42
4F1E0FDFDF3F6E03A90ED01EDD1A46782159CD55630124A2A344AB66411C9853
1B2CCBE9FE78BC1AE4D4254787156300D914119D59CE53AC7B8F718013E92256
1CBF76BDAAE575B67C26D06A35A0D394EF1A332D55D8641DE53700800271FBCC
D9DFAAB5E93F903A8FEC0119ED18B7C08EAA7D1909D5833FAB8D6671564F796B
070A2B371E3005BFCF09E533CF65B356A8D902BE94A449C5EB8A3B63A4E70BE9
D053F69949A8E464ED478A8E037FB1309B7A6A7FC778190DD5AEEBEF9B6A034E
133314CB5127107DEA1344C6E44869135113CD900AC1F0F5F458F5034F43D570
1AECD409DBEBF0C9E95509BDD99A537F5C974FC5505CF6EDCF2412B0A9382D7B
9B373257AF837DF7C393F64BE99AD5D15052BE4101EFA8E39744C2315DFB588C
F4CB885E940AB179C9355CE53FBE5B4786920842A92DE5D9D36A9AA32C283B25
D9E35BED54243580FCB2E61F1E46873EDDD6D5EE7953B988399A6C9857B8186A
1963F7B741344010B345394F22199DE571B5E71F57DB9E12622E4A7A73B41920
BA2F51F6627DBC1F119BA6B22248DA2B391A8E87F2C6E50D86A356603A8642D8
BBA038A739145A2BFE6D055580AF134B7DDDBB9BAF94774040A003EDDC21219F
392DDBEA601D6DDCE7A8645953235A1B19A9C0B0BB98EAD3B5ADABB830C68513
A5DFAAB2F6E691099EF8CEB0036F32181F4A5475392B4B1F92B247446CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF3376A38AC8D43CDB3A383FE182EE89A49
C28C2D635A28DFEED16CFA4D5E4A384094A1D84A98A21BD69CF349E99F848A4C
95D7EB3F7FDB5E41BB1C0A46FEF16EBB0A9052013A587AC9523706FAB55BDEF2
D9A3B50D9F5293BE9660E920F82C8D6C46CA36C01CECA219E2EF410CF4A72DDC
3DCD6254C0BD756210F38F01D757B83E2090337859341376112BE48FE6BBA3D9
D06A0C77112AB99ACD73EC7A7C5FA2A0EBCC7E875A641694AAFFBAFD9547DFB0
345DD1B984860123DB51D12DCC5FE6AE3B89F87E115F5DF7BA4AF93B4D5944EE
FAC690FF1C17DA3D4B6BCA8CC6A2941732B8C31799B4E67102E1628592D5D67B
C8114CCE47E44D3355621E4291E8B19372375C5DA4CF8BC684D59F65F460EA1E
5927D4524FCBFA7625C922AD1FF0D05657A77F77AFCCCD82CFC289D46552563B
36DA5DAA33C9BAA665D56A05FE6A270625DF8ABA04200678179BE71EAA84D69C
E8C6203A71CB424C72AF75C1818F6A18C9038E3BC1299256E1D1E4EDD740CB6D
461FE1CCBC3D60567E9D3EF7181B20F534678934A4362DB20B0C8089BA79E701
707CAD347208550DF890CF5924BC50D349A73787E125446E5CCB325BF943C3D7
F32D49651F5744A767707EC61AA529E09D262A841CC9C1CF25413ADC7FEBB158
0922A191239DE0D26635EF19DE46063E625CE2919ED902D587BE6EDD46E091C9
5E57B5C19979E675BADF2FF5BD15F19CBCE5F93259A6C4A8CAD50B9186BF1464
B59A6BE348681CF88CE442026AA09F828E59584BF2C4D75E749EE3C9A2EE6055
14EC228BB66A22545962DDAEA5BFAD178EE10572D29BF719BC6C31CA404A9C2F
3980136B4825CF63C13B40CE21656E37A0FCB6836AAAC07BCFBB26B2A8CFA3C8
6296F768E749F3AA8A56ADCC26A31FE2427FCFBDEEAAC67F14F71B450BC562A1
95E9F1CD42E7EE23AE4194F920986C6CF3A993077C0B2501E3E95B9672042C54
3338449065A454F82E6DED15B32E690092EB2420B6D9F5E6FA1855513B7131C7
A04B00038E4F5E8E26AC74EE09527348E31E31545F0FBAE0813944CF1A81EE3A
4373691772A120BEE77098BB898BAD2174968488B406DCB59972FFBC57BBBB49
3F2C1B5C38F173A377099E99F717FAA635DAE480F40B36D3154B85F978280E22
7A1245FDA84738BE165A609F79CBF49D51AB8BCCC1A672B2BFBA84A84C9BC409
3E2151EA61F538857EE9787034E207FD3BEBEFF03973685DD97F036BD60D4E32
181A0EFAA41BF0A7F27D2A274B1D654C2683E8F0DF6444233BE72E4B676F7A21
1F72225DB3DB146BDB01C7E88F672F6E37605D7BE1D821C67C6D1B7D6DE18064
541C2185B57B67071A8CFBB6CAC323167D9D96DBE2AB5428094C37B2C25CCF3A
F3E0E78A42FA0F970C9B27AD62347BF02FB21503D2FBE78C1B07A8E09A3BFE3E
B5A5B70EE00D8ACAE49BBA679D9E0D06BB86BCA7E5FD3881744B08F6CFFCB789
4DD565CCF14EAE6264E06D391FEAE0D9A6426BF0FB5A606F7A211F72225DB3DB
146BDB01C7E88EB07218D82EC626C936209AAE5D9735BBF8799A87D12607D361
FE8C805163A6957DE6AA4AF7FA6963E77AC9A423F0333E981166F8F5DA8E7B44
48DC3FBB1B774C324AF6862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57A77E5
046A4A17B5C3E9DAF063B335EECF830F146463EFB387A53F157BD60FAD744915
3823E9F7778158B67FD318FA6BBEF386127BBDB53D25E68448A975CD56BE0A96
A497963436F1B526B5A4CF3AD27EA5CAC1BE4E5AD2BF141E24BA210DFCE1D138
8FDAA040A900CD88D739CAFEEA8361B68F6D0D6E11B3FE268772307DC168E01E
794A180B85422DD886BB8C53B28E48E232FE7D29562B3B0F2F3C9005DFDBC7EC
DA793F537AB616249B0358EEE0AA25B669AF5703F015A210D9182678AF5F984D
EA53961E820CCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D27AF3D0B4
525D7DEEE210A4239DA49D23EC2BB5EC926970D31963A81F3099074342B9F995
4221EF653D3EAE803DD1D270D5456DD52043ADC089C9F1CC96E65C4341491984
C107C8FD9285F08FC3C879AE6D42023BE0EC35E3584D0670E527BC95332D13B3
980549FA02073BC15B155E044D8050BF7C551651FF922639E5077C139E3A837C
35A8D8A8E583D3B87C35933A35DF08B512C2ADE26B7A2E77207E6022E9D50B28
2B1284DD9EA66137C2960AEA8257076676FBC638F830426328CF13180FCF1524
2BAB9381F5E959095F3F1EB907D1413F647D905576F1318A0DDD5C6C2F44BF83
2E4D54880BAF264A44318843E37328644C3FBC75583A7943ED882DC2C6ABDAF3
8CAA2B19A756CC045D2E919084C7D490D88689FC1180B0D18B9D406A0635F4D6
0C3D5A5D5AA54D4566C36A1DE47C68F80E54D3E6F6B2BDA855EF11E75D72EE35
A7F1FC8FDC81666C72993BF21DA93935F90595BDBD4D274FD42F121A21B8EB08
5BAB7D12B3B5F1AF9C403D65CAC4A7A0CDBFABDB4D358E8B8DDC32EA172A2DE4
E8A25320223B96228905711E015CA1115B60CDC9EAD5BD6FE180816127DCAB6B
9C8810A52BC5F9674D286FD002DFA5BB313F36A362D3FC884E32841E6BE12817
A12E65BA65C7CE66AC6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F522AD
91E52759DA17CF323880E5EE7E183DA41EF7DED6C7F61AD6925321D4DD76E461
E79B1CC4A0564E9D7A41C3BDFDB730DA86C9CA2049211DFC67FEF43680759C50
8FC6D79481D91814C47A0A3BFAF7465542D6822F564D169726BA926E6A7AF094
A1F9CCC08D01256B7CED1EDB959E1D48109C2E5D22864BC6AD983C2493CF1748
613F298E07C3D70161F0724055E78899DDF3BCC34D14196CC4BE07D3031D08A9
591029380209D4C769FD636A4A1D08039889DCE822D58B48EFD185C651E24ACD
1D0A7FFAD264D2AE5F9560C3190AC388C4D02E161B1383535A429D90276FBD02
0EE4F28EE492DADDE9A7DC2F40FF95BAD9A9C17907788ECFD84AC599CF9C38E9
18B17E14F8728BD62E45FF52188FCA5ED5CC9D1A8CF9027A5F84AE683086D34C
EEF0FE8FEDE01A7AAD5D667300F07CB0251E2F245297A4BA42AC9083F142DDEA
2183744D33C42E540ECAD829C4255C893F7749C4E7B6796855E211E6751305D6
9561508B1E19EAFA4C676576BF1DAAEDE320A0520B3B46F772B5E5698FC7DBAF
51DC2CBFCE0781919E031A880E3767D8880357E5017147E5372F54B764A8DECD
0CE7B6FFFBEA22D61456E974626482B4C2BE49CDD56BB91D4D1DCA305FD1D602
269C73C8B107D49B98E5E0C4E46DF62197B85088749F3CAFA40A6A3223D4CED4
95D2E481273DF6CFEB55341D3FCD1B53E15238A93F53D2E881629E37E9038CEF
C41BA172055892C47614A9035E7D8D6115A4CEBCCB7E1BDCE1C7CD54907F2ED4
CB1E9D646712495E7F26989BF6328610AED78D0AC8A6526EA144E946A63B5D92
47DCC59E67DF990210DCA0B584944059773DE69E1FE68FB06FBD58BF563372DB
D30BCB727C36153A1E8F2E42D4D0358B380BAE915A183A8FBFC7A569BBE3D2F7
F6618C375D1EC39D0B866481D723779B3781C52E3E11D3AAE27591284292FB1B
F22EA7654C2797615A7F49FBE31D6CC6B63FC347F5E8ACED4509C0A4F07878EB
7D8E64D01390E9E92FB6FA21943BA9C3AA45E954E7F6CB68063B65B26A95C303
711943DCE9AF05FCF282BB8B94E2244B800EA15AF8C16B9B8329E91644DB1EAD
A03E2F74D9A26F35F91D61E51829D31791F1D36CF69DA3337F945275CB4A4692
393F561AC3395F6D9B8AE4F9CB71BCEE0AADCD191C733C695B8DF0163FA0C03A
3234BD65400C0D43F4A0999B39D1D5F9EDAB9FCEE3756BC21D32B49D0C265EC2
511211833F8C475D7BDC3959C33343C76AEA8C43CE8FFC9D1AEB97BAF55DA23B
2FB4A86C886709387253B0851D0ADEA63D9D5B91BB6B95C298D1E77F1CDA031B
D6C638971FF77622866062969131FEB0AAC8DA96F7CA93B7288B2491380B2F4F
87646F6BA4269E6436524AA186982F47DA47525569C373B4B066BA73F9E3FA72
97AB17B4D2307FA2839FCE196D5BD93BED41582931E78F5416F58A9AD099D024
AE7F293E55725E48A97C62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAB55C5
3D979FB64C1924B9A869DFD9A72C83D2DE423A5AEA2A9E72DFC04B7B823C551E
0567C0A543A4B01D70AAD9B650A20BAC294E4D392E266D5F57CB4C3D19DE6FDA
4BB449E97F6C22EC02CE64CE9F9DBE52947CAF49A78C17F38F9E167389023CEB
D2F0E3EB90F50FD11EAB33A8CF611F0AD7E9C1807ADA0EE65BF63372B9182E8C
E9964F169C29074B680191367ED29A5A7FBB4EB2423B73BF347B4247FC0D40A2
C3CD57E796482600AA5E73A63B50D4E8774D50DFF8486F20890332071C3280F5
71B7450BE821B91FA306BB15DA5CB7FE994C3506E6C02DD94BF37C93A17263B9
F0369B66BA6CE4410896ED9356E725FD1523F5B849DB16DA76D4B6E47CB8C03E
730F739778BBCFCE2FD2B999DE15BB9EC58DEAC2DCBA40925D29B3970E0582EC
823434BFCFE218A4B5FF0264F1EC9818FC87436020E36FF2D28374CFAD56A12B
00C3D409420B491AB1B0D595041D0FC126AADC040D9212923F8948E5A8CF7FB7
E6E3FE51870FDE1C24DD45E854C664AE533D0F945638E4121441ED02D5DA83B1
A7FEC5FA6E23A2EB89320FE2FA7297AB17B4D2307FA2839FCE196D5BD93BED41
5A8E974660D500AE32705CFBF7A153125927FEA078069D87113A3322D17A1640
C5887FC7E9178CFFEA9B1DC86BE23378FD4ED2A2D4BCABF382F9031606F62303
F440409002C3451E380D7C90B8425A9E6215316B9144F6D28353CEC8A399AEF6
E7FE8923CF79768908D223E775A47414D55A9153B72861AD8AE5DEF55E9FDD07
4668ECDC206B6FDE05F22EED57263AE13C30B082311D6E233A7AF8607F194FDB
4332B9C474B75AFEA18EA3B3E1CCAE874D2C37B6AD9F977AEE65911469F5DE55
D0282AAAACD9DA3B1559BBA47E47D39ED61B57E3EE12F10AA1FFBC219000419C
8FCB2F4D4F5C14BB5FCA67D1E215EAAE959E27A01DBA71BB6226B5E7C7AB5E8E
17519BDFA50EAAEE490C76CD606A0C1B8FCF2B4EC72C1A62821E2EE07EDFB52D
D4C818EB9DD4D5220B9D12A4FB00F763274628831334E1E727FEE86197E91BFC
10A5D5010758C6BEB975610A063D6DEE058E54E70BDF616FA010BE479ECA5B75
29BAE86B985D6F2F3B4345768F4A78E26D7BF1AC08BDBB8351C7F5C1C16E775F
61423DD2C022E5141779DD5793EF2D2F1DA1B289C774EEE28CFA47054DC41A38
9203BFB3D601BC9A45F40B562D560F713E39BC1555E82FEF5C3D35EDF9B5DE69
12CA53F78E8F619A6D4BE86F4F67B2BC065A56AB2EE8BE0A00D19CB9FBD855AB
BC9553CC600A72701A3C8659B62186878ABAD0E20B2DC4557602FE6F058A6045
9050045F92D50162CC8BF51020AB411A3A0AB79B9C0732597D73ED2DFE552E96
EAE73E7AD80E3341EF23D94DC827E833AE15F8406C71B2405522123900F1EACF
0056E7F6E11C4099C3807A01337FA4063B87047466804D6AAF4FA758384779DB
29211D89008139F24666C276AAF9E9128731554F4EA2D4B57ED13A8A07C06F3A
5AA58030605BAE5C1FEB683C95C33EE38356E67716A643DBB780E3EF09BC070B
8DEE5D8ED323ED64D790560A64E3B93CE0DB600D22562673FF855FE49B1BBDB9
6E0838DA6D952A8D846A305D2D24AEAC0EF3CC8BA8B612B3B84A620C53EAC9F6
4ECA7B9062AD2B39BE666AE99CF08BA046A1FB6E13D9D504E3FF92E61CCDD194
2CA66D69E128376A2FA318A4B4140BD4212C0A6DDCF510099F1D31CD11606710
50CDB1A6AE7F952008C7B6B18B1D29FAAB2D7BF038E6DEF96C2F97BFB60116CA
AA4EFC7C0C01A3F0B7FA898E0B9DF64E8A51762333614532D92CBB9508E79962
10F99DE8BE136FF0E53B90E7578853D181A975C8858BA0488F5C263CCC7C67A4
E9931F28981F8858E363FC29E2A0828656517A3187F0D3CE8BC77D748684E324
23366883598AD6F4E56AD65CE45C893FC5A9037A4204067048177A67C2C2A2BC
209A93BA3552608A61C66A5FC069894F891AD31B17424F0D3369D2449348C0EA
807D652FAB46BECFC728890FB9B683EF9C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55D9AE658358BDB94F8178303A63EC8E7F8F7A8AFA937F2
137728501AD5679310B94D83730E6A42885C6207D74BDD52C3231BED6F014A7B
FC47CD1D9074CDC40D332113F62223847A31F2E6F7B83102B09A1F5B83219C8A
F09C7FEA6FD7F858CE686804C3F119899F5BB3DC8DE39690B59AFC2EB8EC45E5
F326A3FE4769199872A70259B37674708B95C16BC0ACB213112B9E6B2763E75F
ACD58ABF58438D5EAFA88FAED56846812277FC08AFA91EDB84A77AC0ADBE695F
365835E3C5F9582E3BD4901C01D1FB2F383414084419552DBF048D62CEFE6DF5
E525250725A95D15EFD0B5EC317437135C58CAA9B7B8DD2F0B8D82752DF19FF8
5F3ABBCA8FA903A99050332212CD062A6B96FB18552EDB51B9918709BD5B55AB
8B57D38DC282390E735CDB7DFD57D62B557180CA45189BD8A3B135FE7050A6DD
93D6CB6FECC60F43B4FB41D054B08B9AD11A194A138578A3E44C8367D5F58382
F73393C5D6F95645DD488001527117E5D7F3D493ADB0893B9B9EBCF093FEB908
0B34BC41402E298FCC6B03034F6A07BC7C4D6FF0ADF40AA957171B383AFB2103
D97A71240B1842B36700F2B3148682FC7FE88961E538A9BA7CB0898B651D2E45
D8DC40AD88D23C7443E7B690315453D02D69F06FC20DFD3E2A82C7B6B6A6F274
E6CDADC9D4444F9BA6BD5C2B6D5B95D16A4E4C3ADBC2A294D46FB4612CF07A5E
A18B1DD8CFE431246761AF445C6EA515A6252177B90DA10D4B4B1C4900FD2123
08F47672A423BC7E5EF34B3365DCC70AF809E30004DE3F0A3B6431982BF284CB
3CA8CA72439A28E479555D2F2164B59E64A0DEE7221B07A2E6DD84D591D15EA4
7C1EEED28C35D3A53B468042981F2A1BB23C46C0EFDA565B0EE04D57689553B4
4350D7EDC967F120F0F0D5F5388238DF4AF065954BE2F3AA50A9AA9B6BB5972E
21EDD6533063038B9F0D02AF4117D089D13D3E6C975D06C599DEC7043F778143
FD2621FF8C5E9485611B5F4F1F044A924AC0B0522FA2DCD2193E3B766588B34F
12901F0221D82B437539DAD6FCB30F6C2E031F6A57E9C58D142465F9DA8285AB
2DD499CE04CB91BB0AB0DBD3CF48815F104388F2A51661F1BC33957E52A4D00A
DAF25A5FD10336F71E4FA6C5B8D8DB23A61B7FCE84D987DEA749FC89A9052C3E
113F7F0D00B0C41FC25A53DC4C0F8F4F89C3816D3C039F6E357A32A2D0B3CC9D
25AD67B16FEB67E91ED756E48CC2A2740780399841DFE937295F23C0D9AA703D
7033BA8A3DF7A0418855AFA4AC58CDB118336720FE4BA42C47A0991A53A22BD7
48C6511D49C7AC8CE16FDEEA7607489471B2FE6B0A6B62B84BFB7AFD85F4F9D8
8FAC5594FCED92B794C6FCBE00AB38DEB3FD76DDB3E7E3E28C4F82ED30658116
EBF1C89DE3A8896842040DA1C634CBE5EA7B2E7A54D080E48BF90ECC9B347235
F271010D9ED229D2F086
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE51213AA578A8B93C301A831AE89
3172B7D2FF24745F8972DF419022F6B4D7310D075029554F2E31FD6843FB2454
1DC60BB39BB060ED6495AE98F6798010F76FBF63E31324B0F048C2F099F9085F
C2395C8F5A89348809EE005D206688D0DC863AE9D671BBAA034E8C32025F984E
69BF65497EDD146516938637D1DDF0F7255864D2C4C8834BE9EC41F48EE50AF6
797489236880A9CBC9A305ECC299FBD9A74AC0CD41EFED2D2CC5A3137F136AE6
76E52680371D036D1801406A3A5009F8AB7638A1926BCA7B7C3F049E3E5B235D
984FA314E9F4555AA5F99198A39BE62AF7CFBAB277B8A66C8413AF546739AB46
30018BE647C048D9204778226D706C55505A06D4EF01D9FECD5C795DAA94A1AC
AB3F519B354DC0198F2957A103CB2F0D1F55AA122628853277D0FA20345C143E
B8F2A289EA703C24663DD7C2033892919E4E65630EE03681A62471A1C035932B
6545FA5D6F2A04D26899399FF91F4FB98EF6E228ADD22D093FF7C07247CE5236
EB13B7F1E8A15AB9B0819C35691AAC73AACADC529A2B37845CADC5D1C00E2592
7E8523A776A608FC51751104BB96EAF8314E2322C457EC61961583124324CC49
1AA909ADDCD2D038C3174BB48F0E846DF3CEFCE0977B68BBEF34E03365FDF696
30AF010FCC79FE5120FF3149465E612D95316D7B5C4F86F1DB7BD35DA951CC34
EED54A51926CF3F0DC1CE20D4262847EB62ABE8AF75C2CEAC3C38975D901C9EF
EBFE00F6FF423C887D82BA3E1D557A4DB151F7EDA49916C0031F415662B8F9B5
F093526894BF4A34FCD2A8674D1C9B1655E83CAD32A3588E6A907AF195C31A7F
80552A353CCE50E1E3D665A9CCAF247C1A705A84EE6DB91C7C0A0100F19780DA
39DE075AAB0F3F214029548ECB03F2BD47F248430EF5A7A32378F3AECCEB7EB1
C17662616E14D4D40D4254CF1D179AC05D5E50D244BC4735C9ED3F75A15EF4F1
8F6046189BD0022AD86D661BD0C1B7AAE7BA549C5CB7CE178C529CD741BCF3E1
9A3AD3094F5C09C043A5C6BF3B08B16454651ACB0649BD132223FD13F1E47E13
C4711484075AAD24C10874C856F4FDA49C6CCE80A39E4CBD884D4994A7EC9407
F5280FE5690CCA2361975310567A38E881907F483CFC9E1D0D4D02CF7789A750
15AF81B45F690AFD82865D0FE2D708B72D7260AFEACE72D47D75003B5DD518CA
905BCE5758C89D19F7D23F8A75F6D1464A7A8025262B1C95F281ECEB59A6FD62
54E9EB5D2927F8DD71C97EB8FD9C28D83368667D61D91219C131EE556BCC9C43
74EA6B2CC20E595662846464B25687240B575A6CBEEF06521A30347E0C0F1BB4
57048ED47325A221E91DC93BC429B0B12E65BCDA0274E62FED8EDFD2958C261E
B63108DE7D8A6C525F6F3BCC8BDEDF77C8E12DEDBA491D5C2C5B907AEC5BD2E1
49FD142E435C908DF2CFA784EB155F51797C4E9E14EC72010DB93C1EE96A8C4E
A4856E4ED2607D60C5F1E0C78012268AC3B7A4D74466964691AC6822EA8E529B
40F6458AEF4157279C6E9CA88408E74E8428BBBB487D799F17A28722DDF48A51
82F77E270DCD43B21860B734DC01663B0D93C5C6A15E5D0581E6DFC27DC13B8E
42E450DA982FF3AC62D4E943C558175DFCEE38C970B22B6E51EB375632C61484
04D295984D81E28A7E1B43265201F1B4C49A4EE76448D1CD1C2175B6A97267F4
C63D4093BEA8A34B315CEE932B40A8BE2A5D2E086709CAD8F9DD76D2D48C104A
BB6F15BD9E212B036D912963C9B2584CE149D19B7A91044CFFE3D56EF1EC01FC
6EB90AFBB290A63EA7FC392881EA2267D92A8CCBB1075E9006DCAB7508430357
FFAEC3B795E3B99E03E117A0417AF1772D3302EA7F05E76C01606F04DFA20CC9
C9A4416C87CBBA5F6E999DBD4C2AFF9649145CAB06C329739FAB9FBEF852368A
2AEBAEE24DB8D1C842E89EB7737C8C10BC252CAC2C775B6964AED138CD4CA87C
A95CC6B8FC607D92DA9CC397EF076DAA6AEEAADB72DE788DDDF003B691AF0984
63FEA55FE9F8D56353106BF69922B662DE05805DCBEAFC5985067ED28606969D
FB379B7A3F00E21C72DC6C55F36DB35C15D5A480A1C9B2317D93D9BAB1BB97CF
D909531C68EEFE20CD2B55EFC840F84B182070AA3A421603ECC1623D32353CD7
684A1B069A26D8FF7AF6E0E6E181AB858313D2F697474CBE5649728FB1E1ADFC
BD642AFA516A9906D6A7CA92FD473560021FB266A553D35D8400664F1F2E0C2F
488BA00D70F5D2474272828623E396AF3355F932557CCC2FAE2B15E274304F60
092DC6D54944FAB3AE6F055641C5D505567FE35FB314649E1B48EDCB3ECE7A94
8F758BAFA69AFE70DCF46BF5AAE5D2A7A3BB79A5E1D5B11D75DF0585D684D8C2
1A91E29D6A6A7C4C82362A11CF147E4C100FCA2A1DAFB0A95A5445B5800D0BE0
378909AEC60F544C3D4AAB4C0089676139B95B6170A1856367EE3FBBBB321734
84F22C0516F4035428C0EF58F14444986B90C3319AA792B335CB8D72947883CF
8E6F26741DC8FF8BCA65FE975556FAE701332D240AD80A9BB3570552D74BDBF1
BF4D868476766FC6160B5FCCA0055D660715F15430E5E1A7B589FD5D6F981D3F
6198000FCD8216DE36138B22356938E8367A8ADF99A3187B95BB66E9002D608A
921B85AFC38EA1B17D5A649336C1E2B485259EA075F5F659A379B03CD2B29D22
72D85BAF94486568DBC601E03EDFE139B0FA4581782A24EBFAF9624F3EA0CD03
080B51C7B4240705C19A10B53830AD637E14F8AFB20A753075A6CCFE38AC9541
D2F6715901E16C99C139BFD6E2DE9634CDB5E5E32533B70D1E617E255A4A7A43
966ED1B30EED2F504EA1F92B4D96DB412E5FDDF6355DBCCFF7696F430C0CFA1E
FB2B4F9BEC48808524500F3A6571A340A37DAB38EA66E305A8046E2428CAFCE7
E6EB689A0B13234DF89B6FB3948163350E034A3CFA568DD26363ED07476FE804
591317688C32F948B47DA046070E46E4B8BE11619A92A04A4332AE7D030564A0
EF74AB93B42D6253C4B70BCD5F437BF4593B1BCCFCEDA9577FB496F376773A7C
8537A5FCD09950C59D0B79467CED736D9EE1FEC40146403C4312EA23A04F6D25
1C3D36F1FCA9535231C7D6C485614EF00EAB92CBAC252ADFD97A9C8F3DC835B5
742EA85FBB1768E547FD7025496738EA0E3A81249A379B7E10ECA06B51C2717D
B5BDE8E80D6F29B33E9D004E9FB5F327842B7C07EDDFCC655BC55C28705A1140
BF62FBBE740D39ED276776306F8D5D3805E3CD4E8ACF4BFFCAC4A7034BD05D83
CFC244D7DB0CEC691FA2A16BBA1289BC2DB1381ADB11431C97A8DBC052426E3C
95409BA880F2F719812D43D7807770C927143018447A70FA82D1CB20AE4159CC
FE773D9A5EF6627DBC1F119BA6B72928B464D0EAF9C69AE053F23E8D6A69643D
A5DA936EED8A6CCE78CB5D59BFF85288F1BEEBD85C8A2EB58347FFEBBD1EDF88
35176F3154E8757A1C21857556EE412F47456DCDE3BFE23BEAF3F65E5A78E0FC
7F23590031DD549DBCCCC3950C6C443E1B2AC235EFF70A777E892F5B7BD352E3
55DE386E2A72FB0264EC8F64D137D888EA4C020B0F60CF50A8AA982FBA1F1118
E5AF418B6ADD311C9EE0B282AAD6EBA79E856FC84DE7A34F7B469091B4182B33
BF1DA6FCB815622C7FCFEE39EABBF38DDFA77AB23C7F16F5BD0A9CCF307F6FD7
7CB2E9E3FEBCE28793C40544A989869EB84A01485681C3D6B20CEC70058D312D
3E154FEE43CC06FF89A82B2D0AFA58811EA445A5651759AC0725FEFE75845628
E1AD3C9BD6F22B2D5B565E7750D4BC8D39B5C7C390F436CB4C0DB8E54FA44214
D9CBAADF8EF93A1367353EEF5DF73197D5E40943CCC931956ED3C019DC81AEB7
40E73362D1F9A09040840FD9778709C322DD98DFA4776E5383BD4683DCBCCAD3
4156E56A9F06566377D2DE31C00D90FF5DDB509F8ED134E1EF31347807DFAEB7
D1FE2901AD5E7B28EA4394C45D368A519148EC8E8B05282FCE440A2080394DE1
A64FFF81C400FAEA98F62F02633E0F85A780A61DF25521247F85E184696B5676
2B938F289731E6155BE79E19EF3AE645D22FDE3B37F6BE5F34FDC155EAB0B7F1
601B29FB50B78BEB3E44B78C50316C61B6FE484CE582EB7FB48527075ED47DD6
FE8909C387D8F02A88FD24540AD71A0D080961CCFF80326873EBF3F736035F6A
C83E492595369213E04272816DF9B504269EBBFEC5622CB52386534580BAC749
EB5E781AED1350BEEDA285C96028CF9526DDAF9B52DB3F3EF6FD6FC7B65F13D9
337B1F410C19A583BFAAFC569580B22876B6BEC3EB1E7F551C355AF0107000AA
D14CA2DFD883DC4BCD7869BE0292D4FBEB504050FD0E50AF70AAB831F5C399B8
1236E42B64F1DE8F7B8246C840F68A08DFEB68B61A6C3579C9FF815B7E04662C
BF7AA7CFFB1F54474C29E6F849CCF9C181540243E36D59069A6D686DED51A3C5
5411A7855891FE38AF4673CC7172645BFA492CDE638D83E421F2D9971412E29F
BE30049247EC92CD5E359499903AB49C8BBA2F807284B877DCC78AB171815A8D
F0CFDC2DFD30303273748AF2AFD97E07A9C2A96F4EF8754DCC201BFDC4E34068
475EF1CECC81F0CBD9533A766C23DFF3060C5081A47B223BF13C0D6E72189EC2
12204E94680F83C684F7A17F8ED87A4177E1103949CD12715E4FB69C0CF1788B
15868B905E535C3073F81D368B45A06E2E9934CEB9717C549F0621404F673D42
4112ED9EC735139595D2F750BDCFCAF1E66E95CD51FD3CA7793F8CECBBA69E28
84079464CAAC1E8B607F9D37332AA4BA88CFB8758E533A2C71F469930F296766
4F0D17A94A65D60D2AF88C8D76A53677E7150CB9A33D3DFF3946558639A6D669
D2AF20BD41F2F3494B8EFDE6E198E7EDD8922C0D52AB549BD550F5600AA8036B
C6094AD5D0C723C2131E8B42A3580AD2166D5588B87953B6F26F9A59A24C0962
54E856AB00C6C757576EA0E4C8F0F14614231A2758331EA5C7DA8C3E0D42D357
AE25A878133A558079225EA3EDC15B4B7668B9D71129FCD524AFF3FCA1C73129
BA8305FE3F46CF004AF4D76C8434E66ADB72B6710A1830B3A923DDAF7FD77CB5
34E74F590AC18F55EAF42B6D05A120CEC9ADEF90506454D1D85D87CFFE8B6BDD
781F814EBCD1F6DF1DB8ADD7E6A17351F41CCDDB48903150D095EE89DC590412
BBFDEE310FB8C7B744C72513D8A686434121B7C09C582E1945BF8D20CABEF4F2
F5A78A41E4BEA94613F1273293AB153B6EB645F0DFFEC4B6B40F8BB4279A95A1
B189491EAA6BB8999EBFAAF4EC4224F95B80507B6DDCDE002E74BA03A2B15E05
29E61DCAC207A71501B50476F65EA74CB0A90A62A05E0E6853A89537F385C885
E4837E1748F28CBE526D90C97CF974D7A985CCB4DF1E80D7599404708C36F0C5
D2F886A721B27F9D52B092CD05F15786376D49A7C17C1C149070025A12FCDE30
D8A25AC442E687B986BFB69B88607915D3BD7A526CF6AA9267A7ED0FE10B3FC8
13D976E6E54C8EA8AEAA179727D335385BBB400940D12507B823BA98875C0023
32D592429720978FC0E56BDE223615AC1316EA2FAC998F9E08DF914F74E565A2
B8163CBA42B126909DEF1519A72244F96241F58F9EC9834A8D9C9B376D9B539B
EDFBE4BF99F37746E08B7DF160EB87CBEFE56A4BA1BF3141E88B83E331DEA77E
537227DE9FF96147F750256CE1DF6441DBCF2316BF3F3907EC73E5B4F9B71156
B357F62608909B7E4C5E3412EFFC2E3FE1428B2DAA1853FEE27EF30CB0A492DC
A5A956CBBFB8E3BFE0248694758D9BECBCC9EB81EE46E369859D5BCC5C0B83DC
56E6B235EBF3767BECF1C47C04E6F18324317BE91DD624D2AFBE7711D8D1D7B3
E45662AC654D322DE3779FEEE6F2E653010BF94890633FEC0D13586AD5E371AF
164AC39E7412C49F5A4D5B093C97A469BE32DEB307102D23B0DC99B2AD1DA3A3
5E032B8E1D2064BA0B2EEE00A6841352350D01A294276F86BA1443F753A7BC8B
7A60EE36A2B290EA1AF0A8EE76D79BE9F2C07CB7B9CBF2CC3FBACF3396FF5DB2
18AE2CA8EE74F547200678D6AA96227EBF0288B81EE909C1C6481A61401BD72C
146D133AB21995481F52AE787815CBF0CC562674B3264DF5FC0C8918D2C8F689
39B28C0A8D519A948A5E54879DD21E4600F699BD2D073A400E7CA0B870EE6EBF
02A0707CEABD8E79EEE9D850E8A6A969DE6310CE224B6C00F8F4F6193F937692
1083B52C20CF7246DBA338D269EDA4D6177ADE1E99AB94F4AB4F1298FFDD2766
33AE882A540B806AB192BE8FD848C2A52B31C0E5093AB36A62182A6A89995583
E0242C58C6BC26430662D2EA4F4ABD625E32FDAAE204A453A6C102F1713208C9
9AB6CCB0BB3E50A70B6A3BC53DBB806B7D1146CDD7B5AF2FE2AF7C8824D32872
2BF4D9E20EA61D28475F515B0D494B3B9353361CF3B056D2F18269AE2919D5FE
CA07384A40154AB370C7BFE814B5BE5B502E769850D291C9D92C0D2394B62F50
D84301BF415B8CB5E8A643BEDF77B840B2BE0E59EAE67A631E87CB7684B4B2C5
6B9ED7390D02F6BDAFD58C28B1810AB8F74AA464E1069E47D65414D629B139C0
B3C2BF3D2905CFFAE9EAF0BD69B4ECFE3ACCB88E5E52DDE2D9118A1747917E6A
9F22CE79EAB06747625E216F8AF60EE132FECF7639ED7BFA1A642A055394192D
922641ADBEDE3875523CDFFF0F3EBE2080A9DE69E7B499C26BAEF2BAA95ED2BB
89444615496A3011B666F4148991C353852B4CD283018EB513BA9C7CF353A022
67E55B1C0FA3C2263FF9FEA39D7FE05BFA7080CA45189BD8A3B135FE7050A6DD
93D6CB6FECC558954D355E2D35E33B794FD84C274A4D9C2643EBEC124D577FF3
BF07644BE345E1989F01BF6F95C6BE6CA90A6CC327444311964F88706BD4BF54
A5A216F2EED84DCC90AE13402C3D640582C972655ECB16686869E6DA6415F268
7A0B5F072E7235E9B1BA19B953CE9DE783BE36D2A59373CFA7ACD6ED9F9174F0
C5658D20FB0D8E059A9E1A9AF2F43AA3B9AF63A2DDD3A44E4CF388DDB70D0536
825B2CF67DE36BD013A05DB41B01540963159E3EFBBD3E49017E6F499E15088B
9DFBDC9E1DFE1E8C51F0F4A2D76F3F9C1062927E36A2E4A6F34E754C8DD8EA25
71CD8D374623503EC814F522E81BDAF02C8A76BD7CAD08F5FFABC582C8329607
108080263EB92C9DF6DAEBA5C2E5F90A5920E486BFE64013CCB6B421BA3852A7
0157310232EE33D99D2B61165C824C1AB174BB19E8202B7688880EC6CDC0A0A0
BA8A818FBE3E91B0105BB86E0EB1BE0FBF6695F97651B42E0E7DE9EF9AE98FAC
BFE3367E399216688F1B02C9134BA366936CDFD7FCD6257906262C8B1DAD2B8D
5AFB7AE91E3ABA2784B9B516FB6272363D29CA99E2FA9637DD6898F67884BD71
EA0645F89E12CBDC9BB7140202A964893A4F7E03021E2F291F270C8B9238C76F
0DF3AF3420D94859E53AEFC9D1DD75BF4A02A4E56A8C52043093DBCC03FC0A02
2D504EF495A6B5D5A018145B2DEE739597A25E678DB4EEF59E12753142B463B0
4753FFF0C3DD0294CD1702C2C331273579ABE031581847B1B478FE28C2CF6A1B
19FAF75CD5004EFFC1A2FC48EBD2582B4512F333AC8462DB98C784359FA67C62
80E337011B923C12A2F2A748BDE8B927C96B265A7FF3CC2582AA9FAFAB0ED3CE
81D63F54FC400D56F2B9294E30885DC5F1A7C010EC1B86BFE8B4E0C2804FCEA9
ADFB56116FFB38C388F96143BA870537CC8B3E5906E3A9E4027A59D6FA060716
8B4145A22A5CDCA376CC766EF108D352F1A909AAD94AF95A8D62FABB241DF40A
49FAF374AAEBFE99BCDFD32EB647D987E1423804454A5A043A8B82FF19251B1D
3735B67FF464CD57295728AF785D6510F607A4139FF20EAA6FAD50724816D76F
E68568733998E988F4E0E7C56C93EAFB9C7745EE9FA75E2927D42FBA7F757259
A5D32A90AD3A6AE9463220934652F023417D9962ED08A7961E7583EFF349B5AA
436EFD8764ABB3262724F59B94B56DE90283762771725A7E2D8832256DBCBB8F
3C63EC967AB33A8BA1A97F7FBF66B79438C5B4A83F47864D1624747054CC3E67
4581B8E889670F8A5120434FE0179E9020062622DE064EC1424A3653254934A3
A78F5B436CF000514A8E7BA6FB5B44EC192AA45BA5C111311744B77AEBA5674E
F5FCA770729FEF0AFB19D754133A2722778B45B63E3700A128E7BDDFFC284D04
7C202CAD95C87793D5F78FF22EDE240535D6E3D991C294A227F6A94321C8CEA6
1456CD63C6917E6CD3E7EAC0BD8008943710FC6052906D3C9D2C4B706A00CC6F
C0C6FDC412D1B1E0A5985AB4939318FB977CE1D9A30D98FD23B10F40A4179A63
0AB3B66DBB9F135BB2480E67D7AB86535C7CB519B75FEAA3D98D00CEBF2730D8
12FDDDD016B803C38B892380B29734CDB5E5E32533B70D1E617E255A4A7A4396
6ED32D515A07564A9D3C2275458700FD01CB5E99962B8E8CC06512C4823D4715
6B6B2D1ADFE1C36DF0A81A5D74DD7A8D14720C008F4FFA8D3075910926C63221
841035980249CD4CF20CCD8A05E35B39244A23353BDB0ED9F3B8E15F36F4A5E9
4C0430A0400E3EDDCCE5BE60B3AEF9BEC0B600B2626E27CE9E77ADECFE7A35AC
47B935BF6B0579535D0309DDE3FB4F9CD60DE0BBF96E3A6EAC0AA836BFF80827
DBBE528FFC76A334AA10D12CC0C35B8399330235BF13206A3DA1E2E6721759C1
BEA3DE43B426C5E175B059005BF2911E6A39519DC67E8DFE3EEFA96E8ABB5CFD
28CA18CD9013BC81ACDA05386BEACC3228335BB67811370645D5A389200BD713
B8FB1B33A25F4BCC90B6ADFB4DC714D6D08322708AA610AF85E4F3CEEE61BD96
095821D9B1E85677D3FB8C06EE909DE8C5040FE630E1FAFDB99DFF29348A9EE5
BBA8AFC4CD1348704810FB580525AF98AAA049AB1451B4481462384D0B6BCA5C
7794423931DEB499C71ABBE9DBDE6260F4B0C4032A9800E5888A245527E79C94
D5C4693EE8E6192E8598D13746B031AB6DB7538DDFCE96216828CECDF3CBB46E
284416D53C0A0FB5538245F2C7E310527BB2894802F6E0E5B3B0B42C4E29643E
C14B47112F3D8DF4024EAD5CBF3F5EB4F2B352F6A9FC7FBC2F75BA3EA8851808
FA65D21C48CB36FDF606B81E306AAAE1CF40430507B2814046F5F211E16EACD3
89622F0C68CAA4EC460941BA4064658504CFAE58C074D92E17607D5EC55BB7CE
C0F081877B317766DEA2090316916B563D8C2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440C8E81362FF36B049CC836C975870BFD49306F07C03FFCDC347C0
491ED4208F2A7E2311CD90DCDDDF2859681D7980ADB1BD18A3F032DFB948D077
AC495C5D85F5543B1DBD06BA7E5A89408B4B0278013E81BF48B8D0FC7705BAA9
3F544EFEC21F1B21DAB103F2ECD03C45978D34A9AF4D9D4FB7B037709082441C
1FA1051FD258535F8DF45FA5ACA8C2C57E58F83C85CC39E9D715ACEEFA264993
D23A6499E9556526F5E5F2205DD641EE39A4BD6C8EC208550CE40DEF001C0EF4
39972F57369290DD3D9879EA5B1D6F3A171196E3422408601C926B58765B8698
FFBBBF376A0D2D8A19212E5C66E0C0DC03444C23F07B048A3FB6919B1C5F1946
460795E0B5295B835DBFF1DB3688142DCA2FAD15FE866F5836A00A3BE60BE777
2482920510B1E57D89F6D60C6E12974DE347D8B3E4C85105D879DD73EDEC0864
080FACFA56E1FDE940835580087C603271131F74C5AB5F77B2C4564899F5DF9B
A49D9D26DC2FFC5E05C381C6793D5574AF08AE5A4FC89880D4A8DB59D1FE12DB
5A078C9A2ED39DF9D18B3ED95BB7437C84AADCE24419800AC8ADC2206AB30653
430174D252E3FA2075BD559B2F44BA14C61A71691D7B1085F9BFA5DBD78BDAB2
0C308A552D55DAEA683D36E075B0EB14B7D0A1013E4E3D4E0F6220F6063DD3A4
4072F1D24EEBD0E9D5EDA8C343F4D2FBEC5B7F4C7EF6B6759AFB2EBBC09D2A62
1B0C134255165BF75291EF6E74899AB3A9D824CE570B0063FCF217E907C79DB9
CF3744EB03FEBA08935FE0779C6C16F1B50E1A916BF519D9CB0181018FF1A73B
7C1F174A6AFD5B8352A969A72EDF26CFAA43F084DEFF1E8EF8B908041B711C07
4A9C05A17C014945F08547DBB905FDC3B55B31026B49433392C8930BD9661B23
C2EC0E0BC5A4B968B588B6BB4916556446A786B66DC30FBB57A48CB859F10EC2
A5B36B8A1F0C6CADA9B905F3246AEC0CFA5CA880F6AF3A9121D8EF4BCFCC80EC
71F78908BDA220E00C0A14F56ED1959BD60C7F7F5BFAF8497205D4BD5A7A4F11
DF91C6F3D21FBBAAD00FDDDABFD9997F399B54A58654824B719C8B575FD784DA
7688FA287F7069D486A09F8F9760EC7B1C8357BFC56893182C034354025F56EF
647AA14B3C6CBD50988936ADCCB5EECAF200E1F8948FA7101223949B0179CF7D
E6B550657C91BF3116EE79D10D3EED6CAC66FFFA0F1795731A69860E393C9CBB
CC33080FAE1CEA92C44BC47BCD66C4D27AE82463D640829F25B4374636F2E5DB
8CF80B65E415BDD44B433185E4722F99F8F271B2B1EC80832C40E532FC4AC9C4
88F12F629B9CC7C00A69D770C6CA0EB548FA1E4795007691A8D8CA5692DB1534
BB3387633A09B4EFC4B59C3BBD5113E35F69A467ED1223C8CF29FD813EDD931A
53CB338FE15EA0D8AF8F15E122C28FCA6826B096042D18A2DA41F9C1019071BF
2F6C66C3BC6E9DF45A22A24877E4A44997461D3C70CC0055BA8777786C48E71D
0A4EC6220EE0DB2554F5924CB1A96482C5BADB4B2261F86791B443AD9C51442C
289B000983EE6FC9812487758BEC50CE0C7C1DCD0E31B97B3FAF26B96747A8E7
DC923BA8EF6C97928285512AEA1F90A4930F07F492EDC0148725808E9CA4328E
3009A3B18B4BE3185DF2B065FF2F04A7FBDA01C6F36F7F5896921AE83116CA0E
4E86E810471D7AA69FE081AF6CA273E39AA72250F7528842FC37D91B86475F3C
C68E971B7E2ADA50A6FA842125360BF3DC1144957CE059F4B722282F1FB1F986
A5E62DC37AC584AA74172816689D0F952C8F3DE9FE43B77F8D7ECD9644E4E719
6013924C0EF5A7A32378F3AECCEB7EB1C17662616E14D4D409795C87257CFF06
51F978A09800A142DAA73B7F1B157F4FFE0155377D02C00E0F07C97277B173AD
9F901D26B25542A02E05B02D4C6603B5D62633D4DC6CE91B83AFF4206DD41567
10F4B18312D7422FA8FD72CBB746750A9C7CF9AABEAD2039060F8B6BB4C28AB1
B9A5AAFB7FB94F9482E0C284F01CD52E27B685371C875A6FE35B2A7ECDF249A1
D76EB088B8E6123958523931DB4FAA798AE990D63DED89742286B3620DC94A51
4FCDCB1CE84BAD177ECDE41EC89F0A6EEB2AC5F91494F51D54FDC55115DCC4C4
5D558E6D4766165D19889DCDA2AACFFE7F848D35BA06EEC9076225CEEEED76D6
19B0F3264E153925BAEFE155BE2790D8A7479D926E7CF5389915DF462574F4AE
EBD4DEBAD4BEA1951EEE0ECF5E0BE575C26270EB3CAD837205947BDE778DF7ED
7C91AA4100A493DE953FA6A61AC10BB3AA7759222A9F55EA7712BB03B500BC04
C5AC8DDDE3FA790C5036965090789D4F09309A682485948E71DD95E309EA2AF7
D1E5EC95BA6DDBA393DBFA8C3C93DA33DBC6DD416A1BE2785C542D471983F136
CF48AB206F0C50C5CC2218FB71DEE78BFE969B575A7048B6086DCCB59811725B
143F935D3F4FFDB31FDC40C05D38F018C2B34104DEF3A43B137D875DBDD15F05
B2612654089FB6BA359C2190DC1D987F2D63018DB16A626A773D24526AD454E0
1B0FB8C9090B966119E09CF0F2A5D79632DA3F7B0EFCA99A425CAA465C3DD484
429CAC1A913AEBF55281BBCDE2E2B35C58847F36B887EED1D629B477018D54FC
A41AB1B4803CC515471D4FB80DF03D2BAF5E8AA096239FF89AB4678AB6609423
412969FC1DECD51E5B3FAC3EBA7F12425CF626FADD7F013DBD6E18D63CF46DAC
BEC3A03941A65F73AED95051BD333C988C2585BBD1019A9E5C0BA822773DE757
26823FCE87E1943876B8DC19F4DD080711801A166170FAAC32275455BD7B6509
29791305C2822EFBD2780E3A78CC0F9EEFFF109D3B8A2E27BBB2674D02C0902B
167500C2538273D545447091D9D0199605F684E0A506ABC5E8D8015D7B38C7F7
7D12BC7D6AE95538CC326BF63BA1331B9C1D9CFE9B875E8F942D6385E2B89059
61E7C6928B4A4802EE340B1BE67048A14D12863180E6B5584FA1EE0C760AC016
8ADAE8A1716BCDC29E8266F18F7C2B8810D01F7456C58AEA498BF279BED060BC
02D2BA97369F2AB531944E132484C3F2C2638DE187FF8FBC05291063120165B4
379B1A4DC9D967DBF1A67AD385D9EFB01B024F768B5B88A93A38F93B29D9CD1B
265101FA3EEDB73500B7AB35DD7F93E4DF60BA32132AED3E867FDC00EC4D156C
8595AA55147A388E68FFBFE0B09FD42494D5D2B9C1ED812F3CCEEC1BC079E837
DA10F73C10E021ED66BC5B7CAE57D0905BD24925C8573CE09967F242B92F7119
3D204C1179E7E5120F911D26FBDCC71C4E4DCC86D3C62FE9E069A1725AEBCC5C
B1F7A93981B8D83192711F973F0DE96B4533F5E9B79231AFA5021C67DB7096EF
B1F419D84A061BF099B8FA36670B11AE1DC3309EB885CF0BD48D1CC0DDB015D9
A513FB2A760769F683E0A69FCC925C5D25BBD041EDA5DD5659A0360C1FAD665A
DBE9C5032A6D6EBB105FA5656E64E8E61B4D3C740D246EB15EC2183F1CB76553
76F5FE6469726A1B9871F12B4E8236238980D919C3D1C16788940C2E96A1E0C0
DA907A17868AACF3229C176FC26BFBE255AD677CBD1B75FC1C5036EB454C8FE7
410BB44BE3BD2F4302D284EE57A865FEC1A4D1579782B6E455DCC39BA86A4E48
64C874B4E7EE3A8A30DB997012FE16D28F724FFC7BC8FAACF79771B4E47D07EA
87335F94152A9A489FB0D13D5ACA4B0231B33AA21715C2DB4C43CBE3080F67CB
175882857A4EF7605B82852DF995296C3156B4B5722E1F7FF335F225882A0334
64895E2FAB48A10DAE7D7255DE79E4BBC352BE2CDD01A6B2628A48571587D75B
1E1BBE1E97BEB1466E532F8E208D5E7F5F2158B3DE9E17E221CC213E41151456
78B3E1DA267CFD9A7398E6A8E824981145261A3868D4250A18470A42218EBDF7
B90241CFD3563B4314B3C4B93CF52BF89AC53466038C05C05921746598A9597A
CE2FA8F5AAE91606BC8FB9FE50103F01016AF2161C8AF4879CEAA37352D16401
3DA9C1D285F15F7E2C5BD3BB0208A83E16FD4236560DA1C968928FCD667A90B4
B31F53AD21C32584A34DBD8A45BBB0B9CF8EA664CB6BA826C19DB24FCFDC97A9
2D962E6C56A4B495A995A60776A74A77D10C6C1DFC91DE62C1AE05CF60692A22
91829DA93DBFD4A001BD6BF9E20ACEF6C80D3CFAF6C9CCF976502D50077BE9AA
1668BE627189993779AFE5A97009817055B8EB3707429558C69FA1F3B656410A
F0BD49E77188271A42DE0CD89406E432FD56FEF121AFD82E8A03DEF316E12535
8052E874F98BBDA7E4D8F38D8E88225C958C053897ABA5BB7950FDC9E0867CF4
C02FF87F464B8E802A47C2278F2BD50DE2A806B0D7FAF79147C741D10DC21408
FCEA6D747C1997953D2DE0551410F289B4064FB7945535F2F9C287D971BE65A9
828EEDB4EE18567E9D4B958FC9C413E5FDF7E3F203BD2D3299DCFA1075262BE5
CE7D28E72B129E947AD593B48B3DD05D0BB624656B80578308ADA3B73C7D92DF
FA19F1A79AC9BF48D35B400620E9AF4EE88CE2F79FFC9789586711C651D8DE57
2DE33AA0A7E4A4F64A6E5C39382501F2377EC5E6BAD177DA5905E8B396E7492E
95B9E76C94149A3F18AC976D3B9EC53E7FDFA26F060FC883892586428602BBB0
460641116F61594BDFFEBE4B49A1DE68B5FFB595A9613A378B8552DB87DD0D88
3AF60455753850A637565B173751ECB1A45073DA24B6836FC3CB317718EED131
9CBE46D5765620314119629F3C11947884D1E3DD1A8970ED4C6B456D189245F7
5ABB8BF578BD19E9047E99ADA2DB1FF03A41B814B8DDE80D46AEB4F109FC99CB
F5AC6E9D0ADA6BA8684A5D1DEE81415796E13DCF906FCDADB6414636588A4234
FC70CC583D630C563D9C33FCE5BF704ECB173653E1733940CDBEC9B476678A7B
CD0C6AACBF63255A299C3D4F7F4116B07F1625707CFFDEDD5CD6721B2DB88EB7
9488C53490119121DA14800F157974494B51735D837DA67C38A72371E2CB78D6
633DB9841501614465ADB6CDB1D99C3077E313BA8E797060F15E4CE2B91EDCAC
910249AAB3C6B8B6B0F4DD4E7DF8A02417BBAFD79C541192CDCF361A7078857B
A0BA7806F281B62615BB16A7F809CEA0D148D3E500500D0E4B699F013B5930E4
F74928C8315FD4B0D2AE37F361F6F8D4FE43002AF12A15F01E915FAC9CFB66B0
540A87A937BE61FBBA74441A2F346AED224B7249E5CD6D40EBC44BE29E5C21F9
C6476F02E285DFFE7FFE1D2EA0B340F5BB512DC3333268CFD27950889B7037AC
2B1714D2CE1EC2CD75D5C9C5D35F9365E21014962797F2310153A0FAF654A525
7506D7043DD782C86B19B68BB0DAE883840507CE1D10E3591287D1266EB202BC
FF7076D4F12416CEAC5D0B2A319C9DA8BDAEEB856F64068921C3B4B14A63EF20
506A9F6CE17D18336A62B32FD2745AE8A80D4AD76CE767CC9F1EF7FE3326748F
CAABDC3BDA3EC60E18D09E5DCAC83EAC8CFBBF16D1206AE5530D55F5D24398CA
F72A3B37307525C6A5303047B3685950F31026032A49AE241077DCA3CB87122F
41D6F72A707CCC87C43CD58E4190656F7B352E24890560FD20035883463D4E48
4684C9394BA9313FE3EC851B9D085A7DE44A536095CF37E19AAED47B12F78EE9
7E435588B749CEFA08694E754D0EC499AB11772920D2A8F40618C86DA935A0A6
7ECA9BD0617FE232A2E93EB515264F3490C3F46CB5075904E7B0FC7DCE6A77C6
E7E89CD0F7D33BBE1C1DE1972693260F5859AC76AD8AA6807B0B80E6614D53A0
EFB9A29F88CC058A67E62CC4C54F43BABC47EC295EFFCBB73A2AFC47CB20CFCD
208849C0A71B3D95BF17755A793D961B4C7D6ECE605BC5FA6C5AE0E93E254733
9825B2D0AB25AA6DEB68FF03E0F9E7B1A296FBFFA32373DF9A2A08DCB1239785
418B737442C7956DFC6DE32BF7F2E4B1F0633EABD93E2DE0972705921EAEB8C5
516B4205E2419B5EA3CBEFFCF06FE0F082834D69A043327A588B8C5B1CD69375
7C3A5B86E2A334D29235C7430364163AEC6E911191B06F159BBBE9A6330A43E0
25D14171FA920BEDF8462A59235F808BFBFD34CCC4277079D25627DCD5E40E3E
202D717693407280013FAC1895E95D0E66F18703E0498EEE08878786250C8A38
71D22426F200FB8824E27D3B1F736466EF878BCB75DD1C4BC9EFA3BEE0D63E0D
C4E6F253A60B2B187AAB2A6544904AFCC4FF4BC074370AB93855CD45405C5A11
568768A5E986B3C401AEC31AE98C6CBF5DB8F608C04EC9F26BBD3DD789619909
A6BE5CB9117199FBD2373596A166624DAC2D7EC2710E3F20C1197BB1BE1B3D06
1FE14339EAFD7052364F9F78AC54CAC392381DF11B270B54D1EC56C9D91D1078
FD81EDAEDA02B9F63BE34B0613B6033B0DD89C8E1EFCE4EF30C3CF602BA6E330
7AF2549AEDC600057DC6CB243BFFCC87BA9BD799BEDD040B3252472B78018B2D
E5B5A6B1E874BD034869D4E002B50437353167E6AE52DF77C8EBA605E7EC8342
343EF68043B862DE5D16A4A3A2923B569CC5BD3208CF6A071F5E1A54529F252E
7CC538FD5043DA695C511F534A3BEDD69FE0B1FFD51EE19692ED621E21DCD5D4
FBF1320C845F3F37903DB2C5992F25C80B32A38F72831C12A52AAE64EB28B620
A5EB34CC8E514BC64224723A954072436EDF60F30CD8AFF952E9BAC600B76436
56C1C3A3C34064F90B5E8AE4D53827603FC7F0D3750A4901B32D394CE9B7BBA5
80D567AB09DC8CD73A93BB9F6A8BB05BEEC6BAE3EA7E98F27D6DFA09C2A5BEBC
262A2B104AC436A45A9F1FEA4B1B65EE1794C5785DB19800D93FF9A8CBDD089E
7CD05362332559EEC1AFD84D3EFC3C37FDF5FA3F59048FD6D180A0BDFEBF16ED
33449F74C1407FB4E20EC3AB0A797048667DB18FB113A3E347B579785B2A186F
BA718AC1B8BB3E45F894790A6A21C29CD5E2ADBBCEC3DA77562DCC9B9C3328C7
0D7AFC29DC7F31DF2EC5D0966F9B4479F351F366F696269A598EAA99CE3BB246
71F6A1118649A24B4ACE34D3CA6326B7CB9615DD894C7A78848B40A11018E493
063F52236B499AEFCAF7E22C3D8698D1F27F9BD39E7AE32E5E256AFF17F7CEEF
7E536369E647DC066E3BCDEFE3928BAA8452E64FE2DAD4DC0D81B177F7241681
D3EAA0C81B561E7D6169FB0C68E5060DC686802E49EDA9528B7D8F8724EADAB1
EA2DE9F08798F55248CA10A4E1CEE9AED9F9D335CBFD42383F235615B5B3AB54
1DBDEF5881E2115F485F158FA8E62020A6090EAFC46BE6A55696B10492EC979D
C3BD69A87104B7C2C7AF556F344133B641714B147EC3B86EA6361DB73332E770
4F7375F51213FFCBBBF4F530839752DD46DE77E72A1DF287A49AAE00598354E3
6B2F815CA954894CB4C5A1CAC6FA95491C2CD9E15A2FDB5D2EB99B45D87018D4
F17E60D3CEE00CC979AD410F813119C73A509A60BEEEF61F7273B23833662C05
C23C5D0B2DB204D89C6A6CD59834A853BBD985B34755F069B73264629A607C2D
9BF139C9AE75C932AB97EBC00AE1A2260C9BE94F3864E8AC0F394CE7BA861E4C
1E9EB7DC11D6579BC67B259B56DFFC008CCA4106A9AF77D72A0D2ED22E326ACE
959F46F3FFEC99835C3925BE0A67E48E804497955B2F235FE1AAD24686217338
A79309F8C9962D02AC7A2BF5BF6D684FD9084AC279F5EBCA452889175FC90DDF
336EBE5B16E0E9DBE671311648C07460ECCF0CBBBC51BBEC379CEF4E1179660F
9ADFDC046B9F7C8C30323C7AA8FE1E78EBBC6C56A8E448153895A30B4A82AF59
46FCF73C9946F115492C8F03055C82927FFAFA6E43AB2422FE29C72D6106D075
3818E3D60C609F3509EE55639B93D5AA20DA94B1438B4AEB72DD3680CDFCE400
8A7DC06ACCA240672DB84C88C8934ABD872C1EF0C4224709375E1651938D1AE7
1FB260331E1CDFBCBF5F1CE81CDA898E69BBA63865E47B447B173B018106C8E9
02736C4389858335715BAB820C39B80FD7387248A4A0AD262183365DFCB7940B
572F3A1755C3179CEA728D6BF2127F3EE54EB29684CA6F037B6585341F737AE9
A70E444C2334C2D0E64590A42BD5DADC18411DFC4649C76F725697E699B40A3C
A81B43CFD24FA7770BE6068F5403ABE805AB2A81CEC34D9FCC565E940A10EF9A
7C4E085759F390036755C4BFE977A50E83C1C9B860B740F2B4D53A8656B4EABE
3095AF28A12C58D145119526B2C3D294FA26FF1D3965B4AF65641C5330E4D7BF
1E656CF55B9F5AEA07AC8015D417881FEA98A98E8461FC7F9A68707004D825BB
BF84FD9994017095838A87D6ADF80C755BB866B0536E9D0486EE22E3A8DC1153
D21A5C6AF7938C40C48F985EC1325B394EC36BECBD1AF519629AF962EC95FBA4
AD0D47AB8E11EB1B19855F47C5CE2032B198FE1574A1EE1E0084956A46B7F1DA
521D9CCCE5A13E3E69745D25E7A59E5190B40E7CC11872182C83F258489065D0
01D4B897D16D462B2610BC0A80646CFF827D8F960FD80D79D8D61F4834BE90C6
7B69203A4A57135CE1EE3D8A6F1F565AD1447A7FE4282BA1294BCEEA64B7B3BF
DC1BCDCE738203BF43CB8103899EA8518ADF8C7E96B736B3A8ECBDA73E606907
D358509933E54B8511A3359E8B04480E614FF7AC2A02CA1F43F9D78D8045B311
E981D11068BE3872387D9BCCFBE278E30153A6FEBFC1EB9B7A51197CF72F92CA
FDD74778E1C4F6C1838BFDFEBA9DDBFCD9023C35EC78BC14657BD1420555ACB4
E3E205CBE8D2CD22B1B00C5F181A41134F6E19AB6FE2B6725D8E51932E88F37C
75D26D3833EA53375D2927C51CEE40731AA14857D70AF4579DAF40E4DA38F705
DC603A73E80BBB367378AEC71FD2E6A16EF84C708B2B06E47BD93A83896A9806
BDFECC206E7E81A831E5C5E294C2E1A179B0ACE60B2EA02E66EB1A6F3097A653
0D2688EC21591399E11F95826ACF8A22D3CA0CF592CC564145AEC5A4F77FF510
6FBFAB395086F3A8BF485BA7C470AE1822D8108201EEEC83EE0BECE96BEB8779
CE7FDA1D75813D3EC7D3AF5D3332519EE20166993B32D7A24C782DDC093059E1
F19DC7286BDE84468F4762BFEEFB41A343AD66AA4D2FC6AE27B27A17C510EFE8
9DB279C8B85B91B03BBB90B5C6382C805E7156B84BEE973E5B95CB176C5A7915
F938FD59ADD677B5093353A37A34A955C7184C9866576206367F38BF1B85E744
69C4A60BC76745366A06C362C3D652D93B16163FFBE3370B21E0CF46FEC77739
437A52505EB645502B99547E91CFCC3AB0DE80DB56E28E37B8A1E5EA3A48801C
C51BE0EEE89FC2F11FEE063BF60EC48ED7A31FA35DBDD6CCD7D6CF847FBD0850
85D8BEBAC637D3C1CEAF96B4581E1C938A9F63693D20446633CB481DC110FC14
AAB8E9264F5A95B392EBDDD9C64292AE5E1BADBF96AD2D61D9FD8AF38152E4AD
DA2288345BCA78F8790789CC6F4333C1053419E4DCABD12E424720C865D7A52B
18F8BF2308A2BAF0C66B6F91FFE9834FB4308B5728BB3242DC1DBB39C1A34B62
B72B8D4A26909B311CB4CEEE06D5A9F6D8AF0061B56C2D45AEA4CCDD44255B69
73AA160C89D04928024658611A4B7C9261B611808E187EDFE472196A930F7E56
BF22CCA646F2E31995DDB0BB2E889A6FAC9538432CF5CF5B7612C3D0B921BF13
A563C224051FFFFE13D9494E304989ABEDB373C6A2E1738516D81C3F8129E31B
8C32D00339336C10142217DC71532AC5E1D50A6FCF3F203A89648C906439A91F
0769E30455FA2E39A58EA63476444B5DC41E3C021325819B74FD231361D7AB70
E43EEAF0E1EF8A9FBF8AC342D6CBBE256A1DC4C9873BA487A6CC0991CCF884EE
CF8210333F176189B86BB052D9703C1D311F7F0C543AD71B37040AFDAD514EB6
FB98087F4F36857B72D846014D513A899E4912EFE1B93D0A7492BFAA2284F02B
D11FDE0E5BA107C68B49F80BC01818A7669681D8058179F67449AE6584B538A3
2295BC5804983F45CD82E6891224A5614BF4EF1DD2FD31DDEFF8EA7932C88BFF
4EDE18EC80DF2A54210D9739022860C603A40838806C965228715A35D8C7887C
76374C1C424DF9F60734C14F8F8D31B1B2C357FAAA44467CB2180AB6C3B1639D
45D5A0ABBF1FA44FA6A5D7779A5031AB41EE5AB837A7CF5B0F58B4C250F283D7
39C2D2D12DC6CD0DD22717395D5C288EDDDE2609D60C074E62FCDF8BE2A10CE5
D7A8D371E88ADAAF69FB57099F5FE0AE25E73862A33DD43932C02CA9125AA09D
290C96D22C17CD43FFA4402D5577F1642F97707FC865779AFB6056DBA877CA99
0F23303DA3CD71A95070A9FE43ADCAD26A4C0671097C4ED524F053A56FE4CD66
6050B4554CCED753DB52D6ACCF30DE3CD408714E8E7C016ED719D6A4D045FA24
AD86EADB8D1E7A627C3FE5D8F062D7FCBA5245B38B7B7C852FB30F54D334C1FB
8CE7C6CFA4536829527A871675FDD3B05ADC328CC3AC493DE8C2F022EBFA14A2
976D8E310A55FC86D328500A1BEA9D3128504CF2131FF06AC9A8AEDF4BD1282D
0003D149F5A121965CFC7B2CB60EAD2024A0C25EF78B6F2C46B77A7D53B3279D
A33F642F5DE17971F38C194C67DE0043104AF5E61366D0E9E9307B630BA0F256
24CCB6531AEC9E3572FC29CC7319733165F4AEA898BF029299CEA838209B392B
22761F4B31AE2140C4C0312B030E422825AE97E638E539D1E22D2D4630442882
A000941FC5F85C754D5132402A0A94EA3D0E37D27FA0E24D1FF6B3A5D9FD92C7
D9C43A8255D0B63CD275FBE83E8050A97238F88827E75E2F51339FAD5776CBFC
A3917F0464EF0894D45EEA552A3C566D4E931FD6082669BC4F359C1729EA1597
0A599B5AA145CCBC10C28C6D7286F5AABB0B6CA20F471D5880DB01D08FC4E43D
006E734B5AFCFB1ED43C5447E596BD2D26948D66EB2C8D17C29BA9468186FABC
86B5C0D8EA20EA384D74518F966E8FCF38DF99682173A8044B0A9722E3C31281
5E4235AB996CDE46503FABEB8EED0C9176842EBB8361C203E6C662C229C8B7CE
8F110BC54C7AE26FA0401C5456071B3EB1BB3F89B77292DB05233DC82119450C
F9056011CF0D1B9910EB4B40F86B92F45DAA30A59D54EA09C0E2FCE8507F619C
DA4BACFA4A9326AED9505AB06AB808EA664CA9F1913F5649AF34F265D9CB3A34
A45E59D1D51E5A94212F7E51FAE541F3A3FD72E652A0D32733B6EA08A261F936
EDE7E4745E67F5EB274172141881665D08232C5A14A7EF671899B0597C5EFD22
ABF7986DB2B81B6BAF0E22877388980DA22019785984E21E924E15E480A3148A
7DCBBF61ED7769F5DD2362F47D9A4A08F4BA36665A80C7DA15AA557C55E72736
1D0E28C29F0EA24196A54A0EDF39BB8999E09B53EC91C15121C8716EFBD51FBD
AFE1177E614AAF343CFFE0744E352D3B72E0F78E243EC49C2C475189A3DD01B7
C3A03B95364BA46737C2A61A3B8F58CD63014155DB034B8FE450DBEC366C096A
E65B56E34A583A0288C1874BE8C308E1797BAA3658B8AD58435B34B1D7D501B5
61D3E1807AC996F2C10D4575E5CB29FB0A23F9C53B79046EBAC519B78B016B58
E4C322B453CD516787E516422AF0642436BD4A63AFBAF673B83A89C8BE6B2C55
65027A5E6C405012D7835669581477FBFD614700D6BC3A1C4E266C110BDAF8F9
2AFC1924FF85BF0BD5547FBF0ACD890470ADE4CB87C5AA0E1FE82E76C8512472
A0185E2043DDD57D2D93B31BFB24CCF6AD366E01662F1F8632DB01F4E588825A
1AD900569ACEC8623C166172A1F73B79FC0B41C85483A47C5E99A7BD7243045E
F3BC63F882A9D566758887D672CBCA219D2B5841538FE1B0FE8490E1B412DC0F
E5F0495F54931E74E8794276F856200CAA402D7CB909954466C7032C6FD3DE6A
DE20EBA3FA90A30D793109A3B18B4BE3185DF2B065FF2F04A7FBDA01C6F6F010
5CC85A4383F380C770AD1E44970D66A6C473EE1E1A5153E11A2646DB93A34C60
58BD3CC61F8A78367108DB057DEC9503683C1A4BA8F0E198C1FA196607364E47
E4C1FE51C7BD77F2CF715543199450D4DCF857A8E875775C081EA69D0A80893F
EE41D6D455D9690EF3AFB4D3A202A03E65FAB94E5374420AA9E8EE344233F4F9
17DF59DD4FA596DD4F1FB73476024F876B1A10F1494CF6987E16B47B9A7775DA
6121A582E0FBF556A012D4309177E06FBA2A0751435201C1F4949E614A3DC7F2
E12FE532F81FCC3F7A732E61554E1C921474D7E595EF496C10D54AA0A333C414
816835F17CE3FCD6FC5B6542D74F177EA0EBC1EADF96CDA6EE4C53703763505B
BBB40C3AA704BEA3521ABEBAC57E0BB6721F8351D548502CF1E41C94D9928885
FADD5A7E59CB42872E6AA782BD9B30088EE814A6B79361184933C73E766FA2AE
A132DFBC88D4CE1B5C445288723EED9BAD9866868C1C7A17D2B00C7F2C2F00FA
C343B051A51A04B05AB4B002A7E263143C971BB63E4BA2B2A24BF317BB025850
00AD6EBD2BC01221F7E40BBFEA0BDDFC44213AD960278AA498A967D890C29575
08E76638778AADBEB1FD0E5F80595162691EF7A85BFE2D94F618EFF432ABF363
4C8ABE96901D4DC836B1FFF145A029B2195F29379C4B88C50DF01F591763F16F
E1D636A3588E6A907AF195C31A7F80552A353CCE50E1E3D72C18C99C4FD0FDB0
357BB5233F3D0F6212F013072DBC1D3ABF45575C388368F9DBA8FB12D3CA4468
368EA1AFFFBCE8BCD6A49B8E7110D1B232242504E29410D4D4AD6169F22C43CC
5EB48945994E8C642F9C07E1C3290B2D156588DF5F2653C608EEC3D845B12F39
75C5EAFB917F78815CC640335575C69A9EB838DAF9A2E8056EBB39B6BE2F29CD
0570748C3BBE64AC88813A2339892CF290B076C05EF8A7BB32F7D29BB5955814
EA226DAFAD36D8E13AAFE5721689F6CFD5B1521A315DD9F837C6799F8078C5B4
7AE6446BE3AF3FCBDE28D0DC17365CDB51FA564956087B5A8B43DF3613AAAD50
5CCA785EE521B5D53D84B5323869724E5B9B138BD1ECD3D5A132DCFB75BDBA99
2174D3168C7EAFF2CFF58C61C07CCF01EF9FF989CCA65EFA4EDD38DB5710EBFE
0078093EA47D0DA522E23D954B017CEBA3A38EE6BA2063A650CBC87EB9D1C2DB
C41A86D3EDCA1E3718899444E81EDAD669E0492887D072EE234EA42F5B675738
91636ABD12855410B403F16405D4C6F06ACC5E251F3DACB7270C13AE3E99AACB
58901EB391EEE38A2A9504D47D4E0CE2EA33AB92CA36C6D06E8D4E51000F60EB
69CFE87036A19B0ADAEA3372171FD26DC9C4A2DFC815E36687F76BB34DCC2559
51E05DE00CDDA4763AAFF2692126B4FADB00B25DBD0D8BB48B401A0860DA7D9A
1A42782A51E5AC0109C324B840252750485AD8A5BE240B63473C5E2AE67E0FFB
B10240A344C911FF165960436A8BDE59944B00C229EBE880EF9BED29CEAD50C3
6E0D63B1294A5283E2097ADF6986E65209DF251EC42728790C2F56DF13D40B9B
184A68141598DEB130863434670C767BF8CB8EE7E0A553ED1C167611B9852938
9D46C775EA17FB4F09737CA349ED48833210F42FF993DDB9C8BFCF31733E06EF
F0FE425138A90484712D9F38D9366BC72170BA6FBA97412BBBC86A1FE55FA36A
2A234D73A70EC760C8618454B74615158B734F89F47E1CED3DFCCD1F86E82B11
90B1C8957CF800356549C1934F3A844D66DFAAFF475C490B15E5CB1BD87A6107
46B72D0B7798D38091A3CEDBE91B068D1E432A2C5F179E6EE10F7A3EC03DBC10
45CDBCCCC3950C6C443E1CD8D4E9A9413FDEE39EDAC35F56A3644C27673F40E0
28C6ACDC335FC4B589DB92B21ABD5F4A1828236BBC63F603BAFDB730DA86C9CA
2049211DFC67FEF43680759C531F435ECFC9B42C21EB1D9BA4DD79569DE87FE2
3F11E16850A1ED000029A07BA8C9297BF8B0B016EDCAF80B948724E1D422DC5B
6D2629ED8A93225B7A50361D743D9907ACCBCC9086AB4D09E359B41CF74AED5B
75C01085ED3F6F3EBFE3D06CDE91DCFC11A626DDD13FDF59442B6A9BF854AB2B
323EEEF6B2E7E91174DD06348E429DA20F3FC1276B5B147E7C0D6AACEF829145
E21B0BF87A7351F26E99CEC1CBCA4B0B8145D8AAD15EF38327EBE4A4D7107888
1731C0445AFD7EA2048FFD79909FC7385149C47AF9325DEC3C47CC8270B6B6BB
F61619B94318A5836D68D56057D4BC3D68BC55CDF541B4B10169A9A868D47FF1
AFA289C5790133499CB7B637A84BAD294030AA8C5AE294E8D7193F90BC0CB304
DF4D689A954C944916929089A9F3213E4AAE753E34A7C120CEE6144744E50AD5
BE22F818ED3D21E158EDDA88772235D781043CED8B0AE9DF9658A72802D8947A
4232D64CF617A8BC26876409E0B70F6AE8FA7C6A8DFEF294B4268517F1857924
960D62016ECCF26590A7894CA6F91AC2CF4A142069393597FDFF021EF6562F86
B2E79436038BB2D1B4E72EDA18909B29173DB318A73402A90D516197014D29BF
9AE7F58CCF1A1A3160DA9E8C920BC5A15FDBF8A087987DCE3272503BF235958E
760B692E3896BCA6B417E1E5B727A71B84639777F936CC6B9222D3D13C1BE387
AF8405815C5B5497FD0900A840A22B15E6DAC8C7C0265723B1A7D6779F08B823
0DC2AFAF4C19766336E62DF817033884FF18C918F7956F817281F619F322A363
594CE3C8F352887F8DB03D70F9E692F0A5A3160110CD4336511BBB62B8DDF0CD
885A65F27A37E146CD6181C423C7EBC15F79D3C45EB5F8353C55A5FE5BCFE16F
81B25EE3DE1B577661ABB023DEDBF9A5C8D1DE9085E8F49B158724947CDD08A6
47D93504EA067D21563F33124B63BB9B448C74F8C0EE459510B9C7E3AB3E4530
0D17BDE9A6562BC110F8CF97E0E1A56C6BD18B4213B96626C185B62F0D6EF6D2
A702B6C8B370A545567B2D7D0891B23BE34962EB1227A0123488E56195B04061
E73D829B4B0496F9FCE549F4133677FF06C973F989BB2DC8F8D2F0BC865279E4
30CFFFEE1E8B31F501B401651FBC69B8A860110C7250CFFAD98DD1C3AB3D525F
6DA70A332C616238CD5D8BF989377808FAA8E35418AC833780EA85DD29EC6AB0
D968F0729A5A1D1EB41ABB67B9BA1735E4E0555A5AE4CDDBFCD51A4E1260CFFE
758ECD59EAE9ED878D0282D3F85BD47E3C79CDB4AD769ABB374D1B705D61C42E
6E986BB67B5CF26F8C6A61D41E773D3D0004057BF9DA581E848795C2BC29B689
EEFD40F525663D0225B4FC1293B4BA2059ADDAAC725D06E4441F403A9D105E47
38D099334C60F518EE6B939CBCCA90FD837EA47FA3CBBF9D42D9E81FC2CE7BA7
77B592888D38EDE68FFB3EFE83815163DEFDEB96924B4E295352F5600A85DD33
9CEACA9EAB2968182C3A9674ED013765FAB0C19B7B6C6A3BF8EBF725E0B4CB92
0DE053CA8B70AB72E6BE676B128D327F7D0EB0944693E0B9D18A14E9DDD500A5
88EC97AB57B24BA235F6F3C221A21FA27814F2945BD12376C76381C00D6CE2FA
6390D4F9D3AB952D015132072BD0F374E799FE99F911253F86B8AD32D29BD44F
7E03E099D4A15B609E30614F19D39204AC35CA6C6957C87931BC96DE8BEA1505
CC677D873C11E9D40A2414485EE51C916E20BAD2C45E515D18922E16CD2FA670
101359376A5587CB6364E90F8FFB60B391DD9F3CC8B68DD5F343C14C3C7AA45C
67039A23615C3E746B597150AFB4994E8B0BE065C440766581C1F89EB50246E1
D3C022B0C181F21093450D19267E378E6D5C3838D79475F488283E17D379F989
E79E2A618804C69E7412C49F5A4D5B093C97A469BE32DEB30710283BED5695DD
82B9077118A042EB52EB7800276E7502DC0541D05D748319F29DA8C996F2E8AA
30ECDC483B22A1E972E7440C7E19B41E9365BCDBB6E58DE12947D2B3F13A8553
9ACCC87CBFE7BED6E33A9B2B23DD184A0643CF7397EC2FD1A3676A2E5FA086AB
F50A7068432DEC0053CEC7BFED397F59BEB40AF34E870E0961CCFF80326873EB
F3F736035F6AC83E4925935608E04ED65CA0335AEE2E38537138BB6A9C5FFF29
E19F347028F74294FB777078BAD84FE0B9E27E5EB32D967BED5A55ACA65DCC2D
70D6682DDC8D06595AF02DE1ACB6871887BB13D0DC1902B31D1DC2CF9C9DF2B0
7BBE6132660A434525B5D3F83B68A4A45F428997E2A731A4F186B21E01EA99EE
04EBE92CB0E8CFAC3F0679CB4C01EBD1D97E4BBE80618AE6B86D9812B7DCD557
FB92419B6902292875ECFF84EA5FB1D26743416B6D20BA817AB49FFAA67798A4
C6128164F916E3BF46CE85562F2D44F802F512139FAF321A2AF2256EA0675264
922F9A98E6FBC0F384237E6B40D3A97177B97C04841CDBEE459B73A918ACE434
3E16C08B047148E29DC5E5EFF4711229E2CC5F2E8F046CBD032205EA85DDD9A9
72503511D86A08E162DA361034AE5A4971F5EA766B6EE55A0255EAFBD3CB9F0B
A6277BE4C0167A84B609C2D74C253763AA077E58DF0569AFA8D7AF4AA457A9C9
9645B4B90713B2C595D6936E1266F0F31DC65076D830BF747BD823183BE32AAE
65DC84BD18585F82E9D4AC9B5424312755C4B74383FD094BBB22218C2FEE876E
C79521622318BB6960F7588E6392FC1D64E07F7666DC78AB35AB252E997A735E
96485E6D35BA47BE17B33A66CCFF19080C55E0BF551F3127591BCAB7E74DA1D1
327C3F8AAAEB5790D9DB3C8E9EED4DDD03E9EAA7B6813DB5D7FFA4D0D4CE6389
1BF0A2BB9F3FD72133EDE1F32E3F90B51313D7430BE1825C90D88DF40E7350C1
90E0EF638B210931772B298BD43EDDF7277EE29784CFE802732D4B23AD08E64C
D0EA508DB893617833C94C1CB6D4808E48F40632F84C34BEA6BD6B76592A8D60
E934B7AD283A44C701B0C5803D57FAFACDC9F059CFDC41417F14C359AFC59257
053072FF49817CFD5784B250C350C269524A169249B307AD31B09FE48E442E0F
C5578B9B61864B51F4953A418EC3CF8AB2222C30BEC2DFEB5A9335A6FACD8A5F
842AF43D57F70718498FD85E7A99EAB7423DAA53F9B9056BBD534984BD9B8D74
6C1800A4C8C647055A09AC2439AE4EE4F16EC3A864D83891785E765B51B47322
B122C1797C72762736AA5DF6200365CDA7AEC046E30F75E8935FD5869A7BF197
73B66A92B751F8427D4AC3CE5993E1767272BF0225A75A1B90B73079E26AA33F
D37B81F7D60DE9BD07806138BF547EF45B3D8111AE4E0CBFCF1D5B4E085A6CA6
36A9B0CDA1509D95CA8A85A9EAA164A4716C55251A2B0891085C832DD6168B66
730146AA18778921197BE8AB3799469000B23C8E5B1D5724F999161C492A4C89
F6D89833D8FA824F73E37CEF5B7B63DCDED18D6B7EFC6C08C55795337D8A456A
F592730E8722A632641B214741102A86D9482DAB615591731CE5AA2C88B3F79E
F69A617E3502691CF790EB99F57B180C4BC71579F931A8D4A20AA6E838D5A0C2
E786EE6B4293F66525C35B1754B11267DB235577B68003BA14073E2702296B28
4F80369E250A3F2FA1D88A32934AFBECBC8527A737E27EFD904B2C5358EF33A1
62BDBD4D908E3332930D0E1BFDCF3B85DB70F22F8738FE52A7252C221F88F184
6293F4F56B0DAA588FEBE93512B86F05473C7E82BB2E21934F06539B343CD1D2
3D5C8E17CF1B43A482C44FE52E57AF48D0467CB3CFD4E356064154DC618D0031
D66724E959D8FB6A3A901C95EB37B5B9678729BE8AA4B104C25F14637D92FA7D
4EB766DBFA5363F58B2F25D117901D017E0A380E34F5B153D9B8820A39858CC4
CD4324737ED9957FDCC59AE826E8C364FA71301D51FA54830E23648C1E0DE47D
24CFBB094848B0FBBC592094E92386152750B09EB78689E3700953D590A62AD8
AF0F977CD9FC6A5B91EA807D7959F77E4972EF4477EEB05A4AE105D57F922B7F
2EB0A0E7A942DBE072F2BD0DCF8346DE27FA98D21C0F6F5F62D36CAB79428A2F
246196AF20CB4A1195C76A6AD1D589772567B5B1997AD2FE0801171A58B943DF
0EA5A9A9216DE21294B59BE135A88195FA65AB63641336AE1363748B23F9CBB6
56BB32CB7B55EC602E20FC9A8BFFB2030E37F8659872CDCF4C4A160F5AD9533F
491025907194B14529082853A33FEF02F2F9B16137F7EAD5EBE278397E9A2D1E
ED4B36B3D0F2C4A1B33528D1AF77098424004666BA74D6750A71C1481B7F6F97
01DC3FF46ADD2C84E9D49194054B3709508F2ADD0076E3C72722EFEC6BBCDB14
7C44CD81D680E2C7BF8E39D704783C94C463379D0109B362BC944BDE2445C5EF
F77DC2A50CF2912FB017E760AD9AA7BDF6C978B24253C269BB1AC6586F1CB3F9
0F8FDC8BA3F64638FF8261644BF2F64DE58CD9FD66CF6A0699A8C1DA23AC1215
54E0FF394F74719FF1DFCF1CF2B53EF6CB25A10D2A5B307B94DBA4D248DDF9AA
7B42492001A280EA28D426E01408D4C13502BF3FA332F08B7FC37622599F7BAE
1EF4C8D0B5600B4F9948F2DC83A1C94DAF122AE4052A639AF351AD71CFE19BA6
0EB7AC1BACDD06BDC1B22D9EC1C2899042585D01A53B84BFA646F7706B6163E0
01BA3307DA837CB9EB9473C6921718A5ADB7CDC0CE28AF7F3009025CDF19C6C1
AE043AC2F432B16A287F5D6D1C5407ADA3758018CDF098AF2695C8ED96CE20EB
AC7F921913E0E30798E4C9045B71B9A5326D7BEA432770DEF48AF22BFB4F087E
147AD1AF5B893B0805E554D4A4EBB71779BC7595403809218C1F8C25D70B7781
8530B044497138089BF4A687703DE8A0E2FBE67F684A6B5291E6B4BC677C5FFF
3C255C6E544B6A7C97350B893EF62AD4E9BD60398D27494C794BFBA9F607566E
A37707A3FF36EDB6826DAC3C85841B0CF6DA64F3A9AA3268CF322302B53E5462
501770B193F980757BE09AA540513CDD9C719A5DAC9CD0B0EEC72B00EB46C29C
40EA6FC624D76C4BC13394688306DD6901B5D4AC153CD1FFB7DB937354C989A9
C30C65938CBAF83DE9EAB205DC3DB0B2C69A0ED01AC4044FADD1627AE67459BD
E324038D06F240AAAE6E9B681A60A22AA3E631B7417F21C7C82F324402E26909
10F8C861EE220E5E704A621B69F5AE1DB0265630E5544FD3942102DA0DC4B2F9
19B8D2110E82F3A855F900DD1E292E170278B9C05A5B6F7A4BF2CE2473EA9132
A8A586FB6DC8AF0041D3CA7A92368D75CDFC213F652E83FDB79FB0CA9553B1D1
ADEDEE3DC7A79E278E02E470E09C532EB6F0DF349E9B9764FE6E063EDADFB55F
D65697FF0B855C28F53ED95AF51134BEDED564DD37357C862BAB4E82E9D4AC9B
54243127BF5674740FA074147075F097C66902DA2E4B54DB3DAB617CA8B941DA
D35867CB5FF7FCF7082C5774EEB089A80A372DC2D74D85D67D37602FEB4122EC
BA0FB3047CAC25CE367A47A7480F3A04A25D2115898D337317282D14CAD69C2C
56547DEB4D5A45DF8F260D3D7964D678FFA1C30FF75962CE8C224FAA69C966E9
77C6714193C23A8C30FC12C67CB59D2E88804B3E0E4C5C2E494008EE82F1DA65
7A98B02F5DF231EE748166A9732DEF21A19FE2E86EB3D544FB44362CCD2365EB
3E12C565585C8678DDCC134AEF09B44CD88A65AA487C7C4269DF023F6CDF6429
205754A57D4AD837907AE879683F4BD6061647C3BEEC3BF194E4276EDA9BD754
ED5AF2ED13300696431E509CBD8B1DAC53751D86D2D9A47AB6C785FEE47F8510
045342DC96679F73853FE870D5E58E3515583D4E7B763A3F967B2B0E003899C3
E485039A53FDB77357A723FAB60F82D4CA822F2EE9438BC7151E19AD82AFE9F7
D2D4BCEC1B48651D8F3A919FDF9EDCD4BCC9B19156F082DD1BC8182F86E3CF4D
B187F0347EB538E6D20435DE8582B2694BF90EA0EA58832944867201EF4BBF09
EEF7A07C3BC363E9F90AD674B052E2A3A612A2C3DD0DC0A9C66DF1AFC98207A5
578BA7BE6D9CFB14566214E32D503EBDA6B4B0308511C3CB3B723DAE7AA7EFCE
E0AFFA3B9E3AB78513B73D45450E65920AAFEFBD1EE1FFCD79E915BD280FCF6E
BF85BFE4DCF0C8E7E1CF88AE97FBE38FEF768D11B2F40A6E5E1668677939A5E4
F9E5FA2905FB26D39416921C452E35BFD2764B8CEFB2FCB5C950A6C97229ECCA
7A569C4401A203DA8B574FD56BF418A831014DF5A8EE30BDBB724D372581577D
40DE8DC7EA3D506D9AC28886A7D4C1FE7EB4641094824AF384716F72FD4F80E7
7DFDB6935D72927440A74478BDDC81A7BA87014DC3C1BADD2EE20443E015713F
F39223F096C3982A12CC9ED577396259B9793CBB121C5D60963A544D74CA2744
CD79F036415A148B11F4DC6A1EE18BFAF6C7BC2D0693904F9F6A96A3EFDF6634
7013F5596EC4046AF4441876F03A83FEE3376013916911A2614899130FA462E9
78EFB9E3665B5F24A11BE22CAB2D74F0FBFB7250EC22BA7646EE6706F0D2DB1B
393EA6A4BEEE233CDF9F5F8A0ADFD88A03C1E645E7C0450EA25702779FFDF17F
24BC98779A42D8AAC2078994614BE2F9A3878ED93902321BF1944536E1E1EA7E
7593345497D941EA7D9442D774E37D20A93EC8534AB22CDC8DDB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (poc-all.dvi)
@start /Fa 138[47 33 2[47 47 32[67 79[{ enclmec ReEncodeFont }5
90.9091 /LMSans10-Regular rf
%DVIPSBitmapFont: Fb xybtip10 10 1
[/d0/d1/d2/d3/d4/d5/d6/d7/d8/d9/d10/d11/d12/d13/d14/d15/d16/d17/d18/d19/d20
/d21/d22/d23/d24/d25/d26/d27/d28/d29/d30/d31/d32/d33/d34/d35/d36/d37/d38/d39
/d40/d41/d42/d43/d44/d45/d46/d47/d48/d49/d50/d51/d52/d53/d54/d55/d56/d57/d58
/d59/d60/d61/d62/d63/d64/d65/d66/d67/d68/d69/d70/d71/d72/d73/d74/d75/d76/d77
/d78/d79/d80/d81/d82/d83/d84/d85/d86/d87/d88/d89/d90/d91/d92/d93/d94/d95/d96
/d97/d98/d99/d100/d101/d102/d103/d104/d105/d106/d107/d108/d109/d110/d111
/d112/d113/d114/d115/d116/d117/d118/d119/d120/d121/d122/d123/d124/d125/d126
/d127 128{/.notdef}repeat]
A/EN0 X IEn S/IEn X FBB FMat/FMat[0.012 0 0 -0.012 0
0]N/FBB[-46 -47 46 45]N
/Fb 1 20 df<70000000F8000000FC0000007E0000003F0000001F0000000F8000000FC0
000007E0000003F0000001F0000000F8000000FC0000007C0000003E0000003F0000001F
0000000F8000000FC0000007C0000003E0000003E0000001F0000001F8000000F8000000
7C0000007C0000003E0000003E0000001F0000001F0000000F0000000F8000000F800000
07C0000007C0000003C0000003E0000003E0000001E0000000C01B2999A600>19
D E
/Fb load 0 Fb currentfont 83.3333 scalefont put/FMat
X/FBB X/IEn X
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc xyatip10 10 1
/EN0 load IEn S/IEn X FBB FMat/FMat[0.012 0 0 -0.012
0 0]N/FBB[-46 -47 46 45]N
/Fc 1 12 df<000001C0000003E0000007E000000FC000001F8000001F0000003E000000
7E000000FC000001F8000001F0000003E0000007E0000007C000000F8000001F8000001F
0000003E0000007E0000007C000000F8000000F8000001F0000003F0000003E0000007C0
000007C000000F8000000F8000001F0000001F0000001E0000003E0000003E0000007C00
00007C00000078000000F8000000F8000000F0000000600000001B2982A600>11
D E
/Fc load 0 Fc currentfont 83.3333 scalefont put/FMat
X/FBB X/IEn X
%EndDVIPSBitmapFont
/Fd 205[30 30 30 48[{ enclmrm ReEncodeFont }3 49.8132
/LMRoman6-Regular rf
%DVIPSBitmapFont: Fe xydash10 10 1
[/a0/a1/a2/a3/a4/a5/a6/a7/a8/a9/a10/a11/a12/a13/a14/a15/a16/a17/a18/a19/a20
/a21/a22/a23/a24/a25/a26/a27/a28/a29/a30/a31/a32/a33/a34/a35/a36/a37/a38/a39
/a40/a41/a42/a43/a44/a45/a46/a47/a48/a49/a50/a51/a52/a53/a54/a55/a56/a57/a58
/a59/a60/a61/a62/a63/a64/a65/a66/a67/a68/a69/a70/a71/a72/a73/a74/a75/a76/a77
/a78/a79/a80/a81/a82/a83/a84/a85/a86/a87/a88/a89/a90/a91/a92/a93/a94/a95/a96
/a97/a98/a99/a100/a101/a102/a103/a104/a105/a106/a107/a108/a109/a110/a111
/a112/a113/a114/a115/a116/a117/a118/a119/a120/a121/a122/a123/a124/a125/a126
/a127 128{/.notdef}repeat]
A/EN1 X IEn S/IEn X FBB FMat/FMat[0.012 0 0 -0.012 0
0]N/FBB[-3 -46 45 43]N
/Fe 1 14 df<00000700000F00001F00001F00003E00003E00007C00007C0000F80001F8
0001F00003E00003E00007C00007C0000F80000F80001F00003F00003E00007C00007C00
00F80000F80001F00003F00003E00007C00007C0000F80000F80001F00001F00003E0000
7E00007C0000F80000F80000F00000600000182882A517>13 D E
/Fe load 0 Fe currentfont 83.3333 scalefont put/FMat
X/FBB X/IEn X
%EndDVIPSBitmapFont
/Ff 240[45 14[71{ enclmmathsy ReEncodeFont }2 90.9091
/LMMathSymbols10-Regular rf /Fg 141[36 14[40 26[68 13[25
1[45 1[45 45 45 1[45 45 45 48[{ enclmrm ReEncodeFont }11
90.9091 /LMRoman10-Regular rf /Fh 206[35 35 48[{ enclmrm ReEncodeFont }
2 66.4176 /LMRoman8-Regular rf /Fi 141[41 41 51[45 2[25
58[{ enclmmathit ReEncodeFont }4 90.9091 /LMMathItalic10-Regular
rf /Fj 134[48 48 2[51 1[36 36 2[45 51 1[25 1[28 25 3[40
51 1[51 45 13[51 15[66 64 15[45 45 45 48[{ enclmec ReEncodeFont }20
90.9091 /LMRoman10-Regular rf /Fk 22[61 115[75 52 53
55 71 1[67 75 112 37 2[37 75 67 1[61 1[60 1[65 13[75
1[101 92 3[81 3[105 18[67 67 67 67 67 49[{ enclmec ReEncodeFont }26
119.552 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-128 -128 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 -128 a -128 -128 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -128 a -128
-128 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 -128 a -128 -128 a
0.8 setlinewidth 0 setgray
 -128 -128 a -128 -128
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 -128 a 92 x Fk(1)135 b(Sc)l(h\351ma)p 0 TeXcolorgray
1355 1888 a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 1355 1888 a 1386 440 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   43.40892 -1.38754 2
copy moveto 35.8503 .5 CLW mul round sub dup 0 rmoveto 0 360 arc closepath
 gsave 1.13791 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 32.02756 8.85544
  false NArray  /DS 22.76227 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0 0] FontDot /Dot { moveto gsave 1.  1.  scale
<62> show grestore } bind def   1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  newpath n { transform floor .5 add exch
floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 58.77321 9.99336
  false NArray  /DS 22.76227 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0 0] FontDot /Dot { moveto gsave 1.  1.  scale
<62> show grestore } bind def   1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse  newpath n { transform floor .5 add exch
floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 61.61865 -11.63055 61.61865
-34.39284 31.45882 -36.09993 31.45882 -13.33765   false /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{ 0.5 } ifelse def BezierNArray n 1 eq
{ pop pop }{ 2 copy /y0 ED /x0 ED ArrowA n 4 sub 3 idiv { 6 2 roll
4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB /y3 ED /x3 ED /y2
ED /x2 ED /y1 ED /x1 ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul
def /bx x2 x1 sub 3 mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax
x3 x0 sub cx sub bx sub def /ay y3 y0 sub cy sub by sub def /getValues
{ ax t0 3 exp mul bx t0 t0 mul mul add cx t0 mul add x0 add ay t0 3
exp mul by t0 t0 mul mul add cy t0 mul add y0 add ax t 3 exp mul bx
t t mul mul add cx t mul add x0 add ay t 3 exp mul by t t mul mul add
cy t mul add y0 add } def /getdL { getValues 3 -1 roll sub 3 1 roll
sub Pyth } def /CurveLength { /u 0 def /du 0.01 def 0 100 { /t0 u def
/u u du add def /t u def getdL add } repeat } def /GetArrowPos { /ende
0.5  1 gt {ArrowPos} {ArrowPos CurveLength mul} ifelse def /u 0 def
/du 0.01 def /sum 0 def { /t0 u def /u u du add def /t u def /sum getdL
sum add def sum ende gt {exit} if } loop u } def /ArrowPos 0.  def
/loopNo 0.5  1 gt {CurveLength 0.5  div cvi }{ 1. } ifelse def loopNo
cvi { /ArrowPos ArrowPos dArrowPos add def /t GetArrowPos def /t0 t
0.95 mul def getValues ArrowInside pop pop pop pop } repeat x1 y1 x2
y2 x3 y3 curveto } ifelse   gsave 1.13791 SLW 0  setgray  1. revision
952 gt { .setstrokeconstantalpha }{ .setopacityalpha } ifelse   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 43.9781 -119.18188 44.54684
-37.23828   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 86.08804 -58.29303 45.11601
-75.93404 23.49208 -60.5693   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 45.11601 -118.04398 0.72981
-173.81154   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 72.43085 -169.259 43.40892
-116.90605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. revision 952 gt { .setstrokeconstantalpha
}{ .setopacityalpha } ifelse   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1386 440 a
tx@Dict begin  gsave { 82.67384 8.85544 /yRot ED /xRot ED 29.97405
dup cos /cosA ED sin /sinA ED /ax cosA def /by sinA def /cx sinA neg
def /dy cosA def /ex xRot cosA mul neg xRot add yRot sinA mul add def
/fy xRot sinA mul neg yRot add yRot cosA mul sub def [ax by cx dy ex
fy] concat }  tx@3Ddict begin TMChange end  end
 1386
440 a 1386 440 a
tx@Dict begin { 82.67384 8.85544 } PutCoor PutBegin  end
 1386 440 a -18 x Fj(Bonjour)1386 440
y
tx@Dict begin  PutEnd  end
 1386 440 a 1386 440 a
tx@Dict begin   tx@3Ddict begin TMRestore end grestore  end
 1386 440 a 1355 1888 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 1355 1888
a 0 TeXcolorgray -128 2274 a Fk(2)g(Quan)l(tum)45 b(circuit)1151
2590 y
 currentpoint currentpoint translate 1.0 1.0 scale neg exch neg exch
translate
 1151 2590 a 1317 2744 a Fi(q)s(r)1405 2766 y Fh(0)1469
2744 y Fg(:)1658 2767 y(H)p 1631 2678 123 4 v 1629 2794
4 118 v 1631 2795 123 4 v 1752 2794 4 118 v 1540 2737
91 4 v 1859 2758 a Ff(\017)p 1880 2843 4 96 v 1754 2737
118 4 v 2019 2766 4 4 v 2021 2764 V 2023 2763 V 2025
2761 V 2027 2759 V 2029 2758 V 2031 2756 V 2033 2755
V 2035 2753 V 2037 2752 V 2039 2751 V 2042 2749 V 2044
2748 V 2046 2747 V 2048 2746 V 2050 2745 V 2053 2744
V 2055 2743 V 2057 2742 V 2059 2742 V 2062 2741 V 2064
2740 V 2066 2740 V 2069 2739 V 2071 2739 V 2073 2738
V 2076 2738 V 2078 2738 V 2081 2737 V 2083 2737 V 2085
2737 V 2088 2737 V 2090 2737 V 2093 2737 V 2095 2737
V 2097 2737 V 2100 2737 V 2102 2738 V 2105 2738 V 2107
2738 V 2109 2739 V 2112 2739 V 2114 2740 V 2116 2740
V 2119 2741 V 2121 2742 V 2123 2742 V 2126 2743 V 2128
2744 V 2130 2745 V 2132 2746 V 2135 2747 V 2137 2748
V 2139 2749 V 2141 2751 V 2143 2752 V 2145 2753 V 2147
2755 V 2149 2756 V 2151 2758 V 2153 2759 V 2155 2761
V 2157 2763 V 2159 2764 V 2117 2726 a Fe(\015)2104 2749
y(\015)2092 2772 y(\015)p 2010 2673 164 4 v 2008 2799
4 128 v 2010 2801 164 4 v 2172 2799 4 128 v 1893 2737
118 4 v 2174 2737 173 4 v 2346 2737 V 2519 2737 91 4
v 1317 2889 a Fi(q)s(r)1405 2911 y Fh(1)1469 2889 y Fg(:)p
1540 2882 153 4 v 1846 2882 71 4 v 1880 2916 4 71 v 1880
2846 4 4 v 1878 2846 V 1876 2846 V 1875 2846 V 1873 2847
V 1871 2847 V 1869 2848 V 1868 2848 V 1866 2849 V 1864
2850 V 1863 2850 V 1861 2851 V 1860 2852 V 1858 2853
V 1857 2854 V 1856 2855 V 1854 2857 V 1853 2858 V 1852
2859 V 1851 2861 V 1850 2862 V 1849 2863 V 1848 2865
V 1847 2867 V 1847 2869 V 1846 2870 V 1845 2872 V 1845
2874 V 1845 2875 V 1844 2877 V 1844 2879 V 1844 2881
V 1844 2883 V 1844 2883 V 1844 2885 V 1844 2886 V 1844
2888 V 1845 2890 V 1845 2892 V 1845 2893 V 1846 2895
V 1847 2896 V 1847 2898 V 1848 2900 V 1849 2901 V 1850
2903 V 1851 2904 V 1852 2905 V 1853 2907 V 1854 2908
V 1856 2909 V 1857 2910 V 1858 2911 V 1860 2912 V 1861
2913 V 1863 2914 V 1864 2915 V 1866 2916 V 1868 2916
V 1869 2917 V 1871 2918 V 1873 2918 V 1875 2918 V 1876
2918 V 1878 2919 V 1880 2919 V 1880 2919 V 1882 2919
V 1884 2918 V 1886 2918 V 1888 2918 V 1889 2918 V 1891
2917 V 1893 2916 V 1894 2916 V 1896 2915 V 1898 2914
V 1899 2913 V 1901 2912 V 1902 2911 V 1903 2910 V 1905
2909 V 1906 2908 V 1907 2907 V 1908 2905 V 1909 2904
V 1910 2903 V 1911 2901 V 1912 2900 V 1913 2898 V 1914
2896 V 1914 2895 V 1915 2893 V 1915 2892 V 1916 2890
V 1916 2888 V 1916 2886 V 1917 2885 V 1917 2883 V 1917
2883 V 1917 2881 V 1916 2879 V 1916 2877 V 1916 2875
V 1915 2874 V 1915 2872 V 1914 2870 V 1914 2869 V 1913
2867 V 1912 2865 V 1911 2863 V 1910 2862 V 1909 2861
V 1908 2859 V 1907 2858 V 1906 2857 V 1905 2855 V 1903
2854 V 1902 2853 V 1901 2852 V 1899 2851 V 1898 2850
V 1896 2850 V 1894 2849 V 1893 2848 V 1891 2848 V 1889
2847 V 1888 2847 V 1886 2846 V 1884 2846 V 1882 2846
V 1880 2846 V 1692 2882 153 4 v 1919 2882 173 4 v 2274
2912 4 4 v 2276 2910 V 2278 2908 V 2280 2906 V 2282 2905
V 2284 2903 V 2286 2902 V 2288 2900 V 2290 2899 V 2292
2897 V 2294 2896 V 2296 2895 V 2298 2894 V 2300 2893
V 2303 2892 V 2305 2891 V 2307 2890 V 2309 2889 V 2312
2888 V 2314 2887 V 2316 2886 V 2319 2886 V 2321 2885
V 2323 2885 V 2326 2884 V 2328 2884 V 2330 2883 V 2333
2883 V 2335 2883 V 2338 2883 V 2340 2882 V 2342 2882
V 2345 2882 V 2347 2882 V 2350 2882 V 2352 2883 V 2354
2883 V 2357 2883 V 2359 2883 V 2361 2884 V 2364 2884
V 2366 2885 V 2369 2885 V 2371 2886 V 2373 2886 V 2376
2887 V 2378 2888 V 2380 2889 V 2382 2890 V 2385 2891
V 2387 2892 V 2389 2893 V 2391 2894 V 2393 2895 V 2396
2896 V 2398 2897 V 2400 2899 V 2402 2900 V 2404 2902
V 2406 2903 V 2408 2905 V 2410 2906 V 2412 2908 V 2414
2910 V 2372 2871 a Fe(\015)2359 2894 y(\015)2346 2917
y(\015)p 2265 2819 164 4 v 2263 2944 4 128 v 2265 2946
164 4 v 2427 2944 4 128 v 2092 2882 173 4 v 2428 2882
91 4 v 2519 2882 V 1368 3046 a Fg(cr)25 b(:)1563 3049
y Fi(=)1608 3072 y Fd(2)p 1540 3036 153 4 v 1540 3019
V 1692 3036 190 4 v 1692 3019 V 2072 3104 a(0)p 1882
3036 210 4 v 1882 3019 V 2092 3026 a Fc(\013)p Fb(\023)p
2082 3005 4 207 v 2098 3005 V 2327 3104 a Fd(1)p 2092
3036 255 4 v 2092 3019 V 2346 3026 a Fc(\013)p Fb(\023)p
2336 3005 4 62 v 2353 3005 V 2346 3036 173 4 v 2346 3019
V 2519 3036 91 4 v 2519 3019 V 1151 2590 a
 currentpoint currentpoint translate 1 1.0 div 1 1.0 div scale neg
exch neg exch translate
 1151 2590
a -128 3399 a Fk(3)135 b(Plotting)441 5040 y

 441 5040
a 441 5040 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 441 5040 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -51.25519 -33.57925 ] concat

 pgfs


 868 4760 a

 868 4760 a 868 4760
a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0 setgray

 8.83041 -4.25185 moveto

 8.83041 0.0 lineto

 46.40666 -4.25185 moveto

 46.40666 0.0 lineto

 83.98291 -4.25185 moveto

 83.98291 0.0 lineto

 121.55916 -4.25185 moveto

 121.55916 0.0 lineto

 159.1354 -4.25185 moveto

 159.1354 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0 setgray

 -4.25188 7.33055 moveto

 0.0 7.33055 lineto

 -4.25188 44.01292 moveto

 0.0 44.01292 lineto

 -4.25188 80.6953 moveto

 0.0 80.6953 lineto

 -4.25188 117.37767 moveto

 0.0 117.37767 lineto

 -4.25188 154.06004 moveto

 0.0 154.06004 lineto

 pgfstr
 0
TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 161.39624 lineto

 194.26921 161.39624 lineto

 194.26921 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 6.10312 -14.95691 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760 a Fg(0)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 43.67937 -14.95691 ] concat

 pgfs


 868
4760 a
 0 setgray
 868 4760 a Fg(2)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 81.25562 -14.95691 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760
a Fg(4)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 118.83186 -14.95691 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760 a Fg(6)868 4760
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 156.40811 -14.95691 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760 a Fg(8)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -22.02672 4.3502 ] concat

 pgfs


 868 4760 a
 0 setgray
 868
4760 a Ff(\000)p Fg(1)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -30.51167 41.03258 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760
a Ff(\000)p Fg(0)p Fi(:)p Fg(5)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -13.54173 77.2604 ] concat

 pgfs


 868 4760 a
 0 setgray

868 4760 a Fg(0)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -22.02669 113.94278 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760 a Fg(0)p
Fi(:)p Fg(5)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -13.54173 150.62515 ] concat

 pgfs


 868 4760 a
 0 setgray
 868 4760 a Fg(1)868
4760 y


 pgfr

 restore

 restore

 0.0 0.0 moveto

 194.26921 0.0 lineto

 194.26921 161.39624 lineto

 0.0 161.39624 lineto

 closepath

 /pgfsmaskinplace dup where {exch get}{pop false} ifelse not {clip}
if

 newpath

 save

 0.59776 pgfw
 0.12158 0.46667 0.70589 TeXcolorrgb
 8.83041 80.6953 moveto

 10.70923 88.01955 lineto

 12.58804 95.27063 lineto

 14.46684 102.37605 lineto

 16.34566 109.26488 lineto

 18.22447 115.86823 lineto

 20.10329 122.12015 lineto

 21.9821 127.95816 lineto

 23.86092 133.32394 lineto

 25.73973 138.16388 lineto

 27.61853 142.4296 lineto

 29.49734 146.0785 lineto

 31.37616 149.0741 lineto

 33.25497 151.3865 lineto

 35.13379 152.99257 lineto

 37.0126 153.87625 lineto

 38.89142 154.02876 lineto

 40.77022 153.44853 lineto

 42.64903 152.14137 lineto

 44.52785 150.12036 lineto

 46.40666 147.40567 lineto

 48.28548 144.02443 lineto

 50.16429 140.01042 lineto

 52.0431 135.40378 lineto

 53.9219 130.25049 lineto

 55.80072 124.60205 lineto

 57.67953 118.51492 lineto

 59.55835 112.04991 lineto

 61.43716 105.2716 lineto

 63.31598 98.24776 lineto

 65.1948 91.04854 lineto

 67.0736 83.74585 lineto

 68.95241 76.41269 lineto

 70.83122 69.12233 lineto

 72.71004 61.94759 lineto

 74.58885 54.96017 lineto

 76.46767 48.22989 lineto

 78.34648 41.824 lineto

 80.22528 35.80649 lineto

 82.1041 30.2375 lineto

 83.98291 25.17267 lineto

 85.86172 20.6626 lineto

 87.74054 16.75237 lineto

 89.61935 13.48102 lineto

 91.49817 10.88126 lineto

 93.37697 8.97905 lineto

 95.25578 7.79341 lineto

 97.1346 7.33618 lineto

 99.01341 7.61194 lineto

 100.89223 8.61792 lineto

 102.77104 10.34406 lineto

 104.64986 12.77313 lineto

 106.52866 15.88087 lineto

 108.40747 19.6362 lineto

 110.28629 24.00163 lineto

 112.1651 28.9335 lineto

 114.04391 34.38258 lineto

 115.92273 40.29439 lineto

 117.80154 46.60986 lineto

 119.68034 53.26593 lineto

 121.55916 60.19606 lineto

 123.43797 67.331 lineto

 125.31679 74.59946 lineto

 127.1956 81.92885 lineto

 129.07442 89.2459 lineto

 130.95323 96.47751 lineto

 132.83203 103.55145 lineto

 134.71085 110.397 lineto

 136.58966 116.9458 lineto

 138.46848 123.13239 lineto

 140.34729 128.89496 lineto

 142.2261 134.17593 lineto

 144.1049 138.92255 lineto

 145.98372 143.08736 lineto

 147.86253 146.62878 lineto

 149.74135 149.51143 lineto

 151.62016 151.70648 lineto

 153.49898 153.192 lineto

 155.37779 153.95319 lineto

 157.25659 153.98238 lineto

 159.1354 153.27931 lineto

 161.01422 151.85101 lineto

 162.89304 149.71176 lineto

 164.77185 146.8829 lineto

 166.65067 143.39273 lineto

 168.52948 139.2761 lineto

 170.40828 134.57416 lineto

 172.2871 129.33386 lineto

 174.16591 123.6076 lineto

 176.04472 117.45256 lineto

 177.92354 110.93027 lineto

 179.80235 104.10587 lineto

 181.68117 97.04755 lineto

 183.55997 89.82587 lineto

 185.43878 82.51294 lineto

 pgfstr
 0 TeXcolorgray
 restore

 save

 0.59776 pgfw

1 0.49805 0.0549 TeXcolorrgb
 8.83041 154.06004 moveto

 10.70923 153.69353 lineto

 12.58804 152.59764 lineto

 14.46684 150.78331 lineto

 16.34566 148.2687 lineto

 18.22447 145.07892 lineto

 20.10329 141.24583 lineto

 21.9821 136.80775 lineto

 23.86092 131.809 lineto

 25.73973 126.29955 lineto

 27.61853 120.33443 lineto

 29.49734 113.97327 lineto

 31.37616 107.27957 lineto

 33.25497 100.32028 lineto

 35.13379 93.16489 lineto

 37.0126 85.8849 lineto

 38.89142 78.55309 lineto

 40.77022 71.24265 lineto

 42.64903 64.02667 lineto

 44.52785 56.97723 lineto

 46.40666 50.1648 lineto

 48.28548 43.6574 lineto

 50.16429 37.52005 lineto

 52.0431 31.81412 lineto

 53.9219 26.5966 lineto

 55.80072 21.91959 lineto

 57.67953 17.82988 lineto

 59.55835 14.36829 lineto

 61.43716 11.5694 lineto

 63.31598 9.4612 lineto

 65.1948 8.06474 lineto

 67.0736 7.39401 lineto

 68.95241 7.45566 lineto

 70.83122 8.2491 lineto

 72.71004 9.76639 lineto

 74.58885 11.99237 lineto

 76.46767 14.90485 lineto

 78.34648 18.47466 lineto

 80.22528 22.66615 lineto

 82.1041 27.43745 lineto

 83.98291 32.74089 lineto

 85.86172 38.52348 lineto

 87.74054 44.72743 lineto

 89.61935 51.29077 lineto

 91.49817 58.14789 lineto

 93.37697 65.23032 lineto

 95.25578 72.46724 lineto

 97.1346 79.7864 lineto

 99.01341 87.11464 lineto

 100.89223 94.37872 lineto

 102.77104 101.50609 lineto

 104.64986 108.42554 lineto

 106.52866 115.0679 lineto

 108.40747 121.36682 lineto

 110.28629 127.25937 lineto

 112.1651 132.68668 lineto

 114.04391 137.5945 lineto

 115.92273 141.93379 lineto

 117.80154 145.66121 lineto

 119.68034 148.73952 lineto

 121.55916 151.13794 lineto

 123.43797 152.83253 lineto

 125.31679 153.80635 lineto

 127.1956 154.04968 lineto

 129.07442 153.56006 lineto

 130.95323 152.3424 lineto

 132.83203 150.40887 lineto

 134.71085 147.77878 lineto

 136.58966 144.47842 lineto

 138.46848 140.54076 lineto

 140.34729 136.00514 lineto

 142.2261 130.91689 lineto

 144.1049 125.32683 lineto

 145.98372 119.29085 lineto

 147.86253 112.8692 lineto

 149.74135 106.12611 lineto

 151.62016 99.12892 lineto

 153.49898 91.94753 lineto

 155.37779 84.65372 lineto

 157.25659 77.32036 lineto

 159.1354 70.02074 lineto

 161.01422 62.82774 lineto

 162.89304 55.8133 lineto

 164.77185 49.04744 lineto

 166.65067 42.59782 lineto

 168.52948 36.52884 lineto

 170.40828 30.90117 lineto

 172.2871 25.77103 lineto

 174.16591 21.18967 lineto

 176.04472 17.20287 lineto

 177.92354 13.85045 lineto

 179.80235 11.16594 lineto

 181.68117 9.17613 lineto

 183.55997 7.90092 lineto

 185.43878 7.35307 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 69.98254 -29.94324 ] concat

 pgfs


 868 4760
a
 0 setgray
 868 4760 a Fj(x)30 b(axis)h(lab)s(el)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [0.0 1.0 -1.0 0.0 -40.10411 53.54605 ] concat

 pgfs


 868
4760 a
 0 setgray
 868 4760 a Fj(y)f(axis)h(lab)s(el)868 4760 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 58.92227 171.20915 ] concat

 pgfs


 868
4760 a
 0 setgray
 868 4760 a Fj(Sine)f(and)g(Cosine)868 4760 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 441
5040 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1858 6192 a Fj(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -128 -36 a Fk(4)135 b(Histogramme)248 1432
y

 248 1432 a 248 1432 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 0.0 0.0 ] concat

 pgfs


 248 1432 a


 pgfr

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 restore

 save

 [1.0 0.0 0.0 1.0 -28.08699 -18.59308 ] concat

 pgfs


 482 1277 a

 482 1277
a 482 1277 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 save

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0 setgray

 27.42143 -4.252 moveto

 27.42143 0.0 lineto

 73.89844 -4.252 moveto

 73.89844 0.0 lineto

 120.37544 -4.252 moveto

 120.37544 0.0 lineto

 166.85245 -4.252 moveto

 166.85245 0.0 lineto

 pgfstr
 0 TeXcolorgray
 restore

 restore

 save

 save

 0.19925 pgfw
 0.5 TeXcolorgray
 0 setgray

 -4.2519 0.0 moveto

 0.0 0.0 lineto

 -4.2519 30.13943 moveto

 0.0 30.13943 lineto

 -4.2519 60.27887 moveto

 0.0 60.27887 lineto

 -4.2519 90.41832 moveto

 0.0 90.41832 lineto

 -4.2519 120.55775 moveto

 0.0 120.55775 lineto

 -4.2519 150.6972 moveto

 0.0 150.6972 lineto

 pgfstr

0 TeXcolorgray
 restore

 restore

 0.0 0.0 moveto

 0.0 161.39671 lineto

 194.2739 161.39671 lineto

 194.2739 0.0 lineto

 0.0 0.0 lineto

 closepath

 pgfstr

 save

 save

 [1.0 0.0 0.0 1.0 19.23953 -14.95706 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a Fj(001)482 1277
y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 65.71654 -14.95706 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a Fj(010)482 1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 112.19354 -14.95706 ] concat

 pgfs


 482 1277 a
 0 setgray

482 1277 a Fj(000)482 1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 158.67055 -14.95706 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a Fj(111)482
1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -13.54176 -3.43489 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a Fg(0)482 1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -18.99638 26.70453 ] concat

 pgfs


 482 1277
a
 0 setgray
 482 1277 a Fg(50)482 1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -24.45097 56.84398 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a Fg(100)482
1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -24.45097 86.98341 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a Fg(150)482 1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -24.45097 117.12286 ] concat

 pgfs


 482 1277
a
 0 setgray
 482 1277 a Fg(200)482 1277 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -24.45097 147.2623 ] concat

 pgfs


 482 1277 a
 0 setgray
 482 1277 a
Fg(250)482 1277 y


 pgfr

 restore

 restore

 0.0 0.0 moveto

 194.2739 0.0 lineto

 194.2739 161.39671 lineto

 0.0 161.39671 lineto

 closepath

 /pgfsmaskinplace dup where {exch get}{pop false} ifelse not {clip}
if

 newpath

 save

 /pgffc{0.12158 0.46667 0.70589 setrgbcolor}def

 8.83063 0.0 moveto

 8.83063 0.0 moveto

 8.83063 153.71115 lineto

 46.01224 153.71115 lineto

 46.01224 0.0 lineto

 closepath

 46.01224 153.71115 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.12158 0.46667 0.70589 setrgbcolor}def

 55.30763 0.0 moveto

 55.30763 0.0 moveto

 55.30763 149.49162 lineto

 92.48924 149.49162 lineto

 92.48924 0.0 lineto

 closepath

 92.48924 149.49162 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.12158 0.46667 0.70589 setrgbcolor}def

 101.78464 0.0 moveto

 101.78464 0.0 moveto

 101.78464 150.6972 lineto

 138.96625 150.6972 lineto

 138.96625 0.0 lineto

 closepath

 138.96625 150.6972 moveto

 gsave pgffc pgffill grestore newpath

 restore

 save

 /pgffc{0.12158 0.46667 0.70589 setrgbcolor}def

 148.26164 0.0 moveto

 148.26164 0.0 moveto

 148.26164 148.88884 lineto

 185.44325 148.88884 lineto

 185.44325 0.0 lineto

 closepath

 185.44325 148.88884 moveto

 gsave pgffc pgffill grestore newpath

 restore

 restore

 restore

 newpath

 restore

 pgfc


 248 1432 a


 pgfr

 restore

 save

 restore

 save

 restore

 restore

 newpath

 restore

 pgfc


 -128 1873 a Fk(5)g(Logique)1057
2184 y

 1057 2184 a 1057 2184 a


 pgfo

 save

 0 setgray

 0.3985 pgfw

 save

 0.79701 pgfw

 save

 7.43875 22.31662 moveto

 19.76402 22.31662 29.75537 12.32527 29.75537 0.0 curveto

 29.75537 -12.32527 19.76402 -22.31662 7.43875 -22.31662 curveto

 -26.03581 -22.31662 lineto

 -26.03581 22.31662 lineto

 closepath

 pgfstr

 save

 [2.0 0.0 0.0 2.0 0.0 0.0 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184
a 1057 2184 a


 pgfr

 restore

 restore

 save

 64.13237 -34.37698 moveto

 76.45764 -34.37698 86.44899 -44.36833 86.44899 -56.69362 curveto

 86.44899 -69.01889 76.45764 -79.01024 64.13237 -79.01024 curveto

 30.65779 -79.01024 lineto

 30.65779 -34.37698 lineto

 closepath

 pgfstr

 save

 [2.0 0.0 0.0 2.0 56.69362 -56.69362 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184 a 1057 2184 a


 pgfr

 restore

 restore

 save

 194.70847 -6.03018 moveto

 210.65248 -6.03018 225.39008 -14.53885 233.36208 -28.3468 curveto

 225.39008 -42.15475 210.65248 -50.66342 194.70847 -50.66342 curveto

 172.39185 -50.66342 lineto

 176.30821 -43.8801 178.37148 -36.17953 178.37148 -28.3468 curveto

 178.37148 -20.51407 176.30821 -12.8135 172.39185 -6.03018 curveto

 closepath

 pgfstr

 save

 [2.0 0.0 0.0 2.0 198.42766 -28.3468 ] concat

 pgfs


 1057
2184 a
 0 setgray
 1057 2184 a 1057 2184 a


 pgfr

 restore

 restore

 save

 -45.98622 -11.15831 moveto

 -59.82924 -4.64928 lineto

 -59.82924 -17.66734 lineto

 -45.98622 -11.15831 lineto

 -42.06284 -11.15831 moveto

 -42.06284 -10.05783 -42.95491 -9.16576 -44.05539 -9.16576 curveto

 -45.15585 -9.16576 -46.04794 -10.05783 -46.04794 -11.15831 curveto

 -46.04794 -12.25877 -45.15585 -13.15086 -44.05539 -13.15086 curveto

 -42.95491 -13.15086 -42.06284 -12.25877 -42.06284 -11.15831 curveto

 closepath

 -44.05539 -11.15831 moveto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 -55.17996 -11.15831 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184
a 1057 2184 a


 pgfr

 restore

 restore

 save

 10.70738 -67.85193 moveto

 -3.13562 -61.3429 lineto

 -3.13562 -74.36096 lineto

 10.70738 -67.85193 lineto

 14.63077 -67.85193 moveto

 14.63077 -66.75145 13.7387 -65.85938 12.63821 -65.85938 curveto

 11.53775 -65.85938 10.64566 -66.75145 10.64566 -67.85193 curveto

 10.64566 -68.9524 11.53775 -69.84448 12.63821 -69.84448 curveto

 13.7387 -69.84448 14.63077 -68.9524 14.63077 -67.85193 curveto

 closepath

 12.63821 -67.85193 moveto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 1.51364 -67.85193 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184 a 1057 2184 a


 pgfr

 restore

 restore

 save

 -45.98622 -45.5353 moveto

 -59.82924 -39.02628 lineto

 -59.82924 -52.04433 lineto

 -45.98622 -45.5353 lineto

 -42.06284 -45.5353 moveto

 -42.06284 -44.43483 -42.95491 -43.54274 -44.05539 -43.54274 curveto

 -45.15585 -43.54274 -46.04794 -44.43483 -46.04794 -45.5353 curveto

 -46.04794 -46.63577 -45.15585 -47.52785 -44.05539 -47.52785 curveto

 -42.95491 -47.52785 -42.06284 -46.63577 -42.06284 -45.5353 curveto

 closepath

 -44.05539 -45.5353 moveto

 pgfstr

 save

 [1.0 0.0 0.0 1.0 -55.17996 -45.5353 ] concat

 pgfs


 1057
2184 a
 0 setgray
 1057 2184 a 1057 2184 a


 pgfr

 restore

 restore

 176.12865 -17.18849 moveto

 133.60843 -17.18849 lineto

 133.60843 0.0 lineto

 30.55238 0.0 lineto

 176.12865 -39.50511 moveto

 133.60843 -39.50511 lineto

 133.60843 -56.69362 lineto

 87.246 -56.69362 lineto

 15.02928 -67.85193 moveto

 29.86044 -67.85193 lineto

 -41.66432 -11.15831 moveto

 -26.83316 -11.15831 lineto

 -41.66432 -45.5353 moveto

 29.86044 -45.5353 lineto

 -26.83316 11.15831 moveto

 -111.87358 11.15831 lineto

 -77.85793 -11.15831 moveto

 -77.85793 -6.17693 moveto

 -75.10675 -6.17693 -72.87654 -8.40712 -72.87654 -11.15831 curveto

 -72.87654 -13.90948 -75.10675 -16.1397 -77.85793 -16.1397 curveto

 -77.85793 -45.5353 lineto

 -60.22781 -45.5353 lineto

 -111.87358 -11.15831 moveto

 -60.22781 -11.15831 lineto

 -91.2156 -11.15831 moveto

 -91.2156 -67.85193 lineto

 -3.5342 -67.85193 lineto

 234.28238 -28.3468 moveto

 290.976 -28.3468 lineto

 pgfstr

 save

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -121.54454 9.80974 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184
a Fa(p)1057 2184 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -77.85793 11.15831 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184 a 1057 2184
a


 pgfr

 restore

 restore

 save

 -77.85793 -6.17693 moveto

 -77.85793 11.15831 lineto

 pgfstr

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -121.54454 -12.50687 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184 a Fa(q)1057 2184 y


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 -91.2156 -11.15831 ] concat

 pgfs


 1057 2184
a
 0 setgray
 1057 2184 a 1057 2184 a


 pgfr

 restore

 restore

 save

 save

 [1.0 0.0 0.0 1.0 246.2201 -22.1911 ] concat

 pgfs


 1057 2184 a
 0 setgray
 1057 2184 a Fa(Output)1057
2184 y


 pgfr

 restore

 restore

 restore

 newpath

 restore

 pgfc


 0 TeXcolorgray 1858 6192 a Fj(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
